//! > init_circuit_data

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
use core::circuit::{
    RangeCheck96, AddMod, MulMod, u96, CircuitElement, CircuitInput, circuit_add, circuit_sub,
    circuit_mul, circuit_inverse, EvalCircuitResult, EvalCircuitTrait, u384, CircuitOutputsTrait,
    CircuitModulus, FillInputResultTrait, CircuitInputs,
};

fn foo() {
    let in1 = CircuitElement::<CircuitInput<0>> {};
    let in2 = CircuitElement::<CircuitInput<1>> {};
    let add = circuit_add(in1, in2);
    let inv = circuit_inverse(add);
    let sub = circuit_sub(inv, in2);
    let mul = circuit_mul(inv, sub);

    let modulus = TryInto::<_, CircuitModulus>::try_into([7, 0, 0, 0]).unwrap();
    let _outputs =
        match (mul,).new_inputs().next([3, 0, 0, 0]).next([6, 0, 0, 0]).done().eval(modulus) {
        EvalCircuitResult::Success(outputs) => { outputs },
        EvalCircuitResult::Failure((_, _)) => { panic!("Expected success") }
    };
}

//! > casm
ap += 12;
[fp + 7] = 7;
[fp + 8] = 0;
[fp + 9] = 0;
[fp + 10] = 0;
jmp rel 16 if [fp + 10] != 0, ap++;
jmp rel 14 if [fp + 9] != 0;
jmp rel 12 if [fp + 8] != 0;
jmp rel 4 if [fp + 7] != 0;
jmp rel 281;
[fp + 7] = [ap + -1] + 1;
jmp rel 4 if [ap + -1] != 0;
jmp rel 275;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -4] + 4, ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[fp + 11] = [fp + -4] + 36;
call rel 271;
jmp rel 243 if [ap + -4] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 6, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
call rel 254;
jmp rel 216 if [ap + -4] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
call rel 347;
jmp rel 197 if [ap + -3] != 0;
call rel 1751;
[ap + 0] = [ap + -1] + 1750, ap++;
[ap + 0] = 2, ap++;
[ap + 0] = [ap + -2] + 6, ap++;
[ap + 0] = 4, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -9] = [ap + 0] + 12, ap++;
[ap + -2] = [[ap + -1] + 0];
[ap + -3] = [[ap + -1] + 1];
[ap + -3] = [[ap + -1] + 2];
[ap + -3] = [[ap + -1] + 3];
[fp + 7] = [[fp + -6] + 0];
[fp + 8] = [[fp + -6] + 1];
[fp + 9] = [[fp + -6] + 2];
[fp + 10] = [[fp + -6] + 3];
[ap + -1] = [[fp + -6] + 4];
[ap + -7] = [[fp + -6] + 5];
[ap + -6] = [[fp + -6] + 6];
[fp + 7] = [[fp + -5] + 0];
[fp + 8] = [[fp + -5] + 1];
[fp + 9] = [[fp + -5] + 2];
[fp + 10] = [[fp + -5] + 3];
[ap + -1] = [[fp + -5] + 4];
[ap + -5] = [[fp + -5] + 5];
%{
from starkware.cairo.lang.builtins.modulo.mod_builtin_runner import eval_circuit

memory[ap + 0] = run_circuit(
    memory=memory,
    values_ptr=memory[ap + -1],
    add_mod_builtin=memory[fp + -6],
    n_add_mods=memory[ap + -6],
    mul_mod_builtin=memory[fp + -5],
    n_mul_mods=memory[ap + -4],
    modulus_ptr=fp + 7,
)
%}
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [ap + -1] * 7, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [fp + -6] + 14, ap++;
[ap + 0] = [fp + -5] + [ap + -4], ap++;
[ap + 0] = [fp + 11], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -5] + [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6] * 3, ap++;
[ap + 0] = [ap + -12] + [ap + -1], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -2] + 1], ap++;
[ap + -6] = [[ap + -3] + 2];
[fp + 11] = [ap + 0] + [ap + -11], ap++;
[ap + -7] = [[fp + 11] + 0];
[ap + -7] = [[fp + 11] + 1];
[ap + -7] = [[fp + 11] + 2];
[ap + -7] = [[fp + 11] + 3];
%{ memory[ap + 0] = segments.add() %}
[ap + -3] = [[ap + 0] + 0], ap++;
[ap + -3] = [[ap + -1] + 1];
[ap + -2] = [[ap + -1] + 2];
[ap + -12] = [[fp + 11] + 4];
[ap + -16] = [ap + 0] + [ap + -12], ap++;
[ap + -1] = [[fp + 11] + 5];
[fp + 7] = [[ap + -10] + 0];
[fp + 8] = [[ap + -10] + 1];
[fp + 9] = [[ap + -10] + 2];
[fp + 10] = [[ap + -10] + 3];
[ap + -14] = [[ap + -10] + 4];
[ap + -2] = [[ap + -10] + 5];
[ap + -8] = [[ap + -10] + 6];
[ap + 0] = [ap + -14] + [ap + -5], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -2] + 1], ap++;
[ap + 0] = [[ap + -3] + 2], ap++;
[ap + 0] = [[ap + -4] + 3], ap++;
jmp rel 9 if [ap + -4] != 0;
jmp rel 7 if [ap + -3] != 0;
jmp rel 5 if [ap + -2] != 0;
jmp rel 3 if [ap + -1] != 0;
[ap + -13] = [ap + -14];
[fp + 0] = [fp + -6] + 14;
[ap + 0] = [fp + 11] + 6, ap++;
[fp + 6] = [ap + -16] + 7;
[fp + 10] = [ap + 0] + [ap + -2], ap++;
jmp rel 19 if [ap + -1] != 0;
[fp + 9] = [ap + 0] + [ap + -4], ap++;
jmp rel 11 if [ap + -1] != 0;
[fp + 8] = [ap + 0] + [ap + -6], ap++;
jmp rel 5 if [ap + -1] != 0;
[fp + 7] = [ap + 0] + [ap + -8], ap++;
jmp rel 13;
[ap + 0] = [ap + -1], ap++;
jmp rel 10;
ap += 1;
[ap + 0] = [ap + -2], ap++;
jmp rel 5;
ap += 2;
[ap + 0] = [ap + -3], ap++;
[ap + -1] = [[ap + -5] + 0];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 92342086994883127646987903453339415411, ap++;
[ap + 0] = 16, ap++;
call rel 279;
[fp + 5] = [ap + -126] + 1;
jmp rel 43 if [ap + -5] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1997209042069643135709344952807065910992472029923670688473712229447419591075, ap++;
[ap + -1] = [[ap + -2] + 0];
[fp + 1] = [ap + -6];
[fp + 2] = [ap + -5];
[fp + 3] = [ap + -4];
[fp + 4] = [ap + -3];
[fp + 2] = [ap + 0] + [fp + 1], ap++;
[ap + -1] = [[ap + -3] + 1];
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -161], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 2, ap++;
call rel 1392;
jmp rel 9 if [ap + -3] != 0;
[fp + 3] = [[ap + -1] + 0];
[fp + 4] = [[ap + -1] + 1];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2] + 2, ap++;
jmp rel 4;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + 5], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + 5], ap++;
[ap + 0] = [ap + -161], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + 11], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + 11], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + 11], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 29721761890975875353235833581453094220424382983267374, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
ret;
ap += 4;
jmp rel 68 if [fp + -9] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 26913677086973030051406221357623718750637972950955665348321109348, ap++;
[ap + 0] = 27, ap++;
call rel 159;
jmp rel 42 if [ap + -5] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1997209042069643135709344952807065910992472029923670688473712229447419591075, ap++;
[ap + -1] = [[ap + -2] + 0];
[fp + 0] = [ap + -6];
[fp + 1] = [ap + -5];
[fp + 2] = [ap + -4];
[fp + 3] = [ap + -3];
[fp + 1] = [ap + 0] + [fp + 0], ap++;
[ap + -1] = [[ap + -3] + 1];
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 2, ap++;
call rel 1274;
jmp rel 9 if [ap + -3] != 0;
[fp + 2] = [[ap + -1] + 0];
[fp + 3] = [[ap + -1] + 1];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2] + 2, ap++;
jmp rel 4;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + -4] = [[fp + -8] + 0];
[ap + -3] = [[fp + -8] + 1];
[ap + -2] = [[fp + -8] + 2];
[ap + -1] = [[fp + -8] + 3];
[ap + 0] = [fp + -8] + 4, ap++;
[fp + -7] = [ap + 0] + [ap + -1], ap++;
jmp rel 9 if [ap + -1] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
jmp rel 6;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 4;
jmp rel 10 if [fp + -5] != 0;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 138583295661092166701491297054433349032460315956105119041111996301516236132, ap++;
[ap + 0] = 31, ap++;
call rel 49;
jmp rel 40 if [ap + -5] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1997209042069643135709344952807065910992472029923670688473712229447419591075, ap++;
[ap + -1] = [[ap + -2] + 0];
[fp + 0] = [ap + -6];
[fp + 1] = [ap + -5];
[fp + 2] = [ap + -4];
[fp + 3] = [ap + -3];
[fp + 1] = [ap + 0] + [fp + 0], ap++;
[ap + -1] = [[ap + -3] + 1];
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 2, ap++;
call rel 1164;
jmp rel 9 if [ap + -3] != 0;
[fp + 2] = [[ap + -1] + 0];
[fp + 3] = [[ap + -1] + 1];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2] + 2, ap++;
jmp rel 4;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[fp + -3] = [ap + 0] + 0, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 1123;
%{ memory[ap + 0] = (memory[fp + -5] + memory[fp + -3]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -5] + [fp + -3], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 1096;
[ap + 1] = [fp + -5] + [fp + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[fp + -9] + 0];
[ap + 0] = 31, ap++;
[ap + -2] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -9] + 1];
jmp rel 939;
[ap + -1] = [[fp + -9] + 1];
[ap + 0] = [fp + -9] + 2, ap++;
[ap + -5] = [ap + 0] + 31, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 791;
[ap + 0] = 31, ap++;
[ap + -7] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -6] + 0];
jmp rel 762;
[ap + -1] = [[ap + -5] + 0];
[ap + 0] = [ap + -5] + 1, ap++;
[ap + -2] = [ap + 0] + 16, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 555;
[ap + 0] = 16, ap++;
[ap + -4] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -6] + 0];
jmp rel 269;
[ap + -1] = [[ap + -5] + 0];
ap += 15;
%{ memory[ap + 0] = memory[fp + -4] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -21] + 1], ap++;
[ap + 3] = [[ap + -22] + 2], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[fp + -4] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -26] + 3];
jmp rel 14 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -4] = [[ap + -21] + 1];
ap += 5;
[ap + 0] = [ap + -26] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -26] + 4, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 16, ap++;
[ap + -31] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 198;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
call rel 1084;
jmp rel 183 if [ap + -3] != 0;
jmp rel 15 if [ap + -1] != 0;
ap += 42;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 29721761890975875353235833581453094220424382983267374, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -48], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 187;
%{ (memory[ap + 5], memory[ap + 6]) = divmod(memory[ap + -18], memory[ap + -1]) %}
[ap + 5] = [[ap + -4] + 0], ap++;
[ap + 5] = [[ap + -5] + 1], ap++;
[ap + -2] = [ap + 4] + 1, ap++;
[ap + -4] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[ap + -8] + 2], ap++;
%{ memory[ap + -3] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 6 if [ap + -3] != 0, ap++;
[ap + -3] = [ap + -7] + 340282366920938463444927863358058659840, ap++;
jmp rel 4;
[ap + -3] = [ap + -1] + 340282366920938463444927863358058659840, ap++;
[ap + -4] = [[ap + -11] + 3];
[ap + -3] = [ap + -8] * [ap + -2];
[ap + -25] = [ap + -3] + [ap + -1];
[ap + 0] = [ap + -1] * 340282366920938463463374607431768211456, ap++;
[ap + 0] = 31, ap++;
[ap + 0] = [ap + -2] + [ap + -28], ap++;
[ap + -2] = [ap + 1] + [fp + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -17] + 4];
jmp rel 124;
[ap + -1] = [[ap + -16] + 4];
[ap + 0] = 16, ap++;
[ap + -2] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -20] + 5];
jmp rel 47;
[ap + -1] = [[ap + -19] + 5];
[ap + 0] = 16, ap++;
[ap + -5] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -23] + 6];
jmp rel 22;
[ap + -1] = [[ap + -22] + 6];
[ap + 0] = [ap + -22] + 7, ap++;
[ap + 0] = [ap + -2], ap++;
call rel 1009;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] * 340282366920938463463374607431768211456, ap++;
jmp rel 34;
ap += 12;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 80;
ap += 23;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -48] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 66;
ap += 2;
[ap + 0] = [ap + -22] + 6, ap++;
[ap + 0] = [ap + -8], ap++;
call rel 974;
jmp rel 52 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -6] * [ap + -1], ap++;
[ap + 0] = [ap + -30] + [ap + -1], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 452312848583266388373324160190187140051835877600158453279131187530910662656 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 452312848583266388373324160190187140051835877600158453279131187530910662656, ap++;
%{
(value, scalar) = (memory[ap + 3], 9304595970494411423921298675024789504)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 9304595970494411423921298675024789504, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 330977770950444052039453308756743421951;
[ap + -3] = [[ap + -10] + 2];
jmp rel 22;
%{
(value, scalar) = (memory[ap + -2], 1329227995784915872903807060280344576)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 1329227995784915872903807060280344576, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -7] + 0], ap++;
[ap + -3] = [[ap + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 338953138925153547590470800371487866880;
[ap + -2] = [[ap + -9] + 2];
ap += 1;
[ap + -7] = [[fp + -7] + 0];
[ap + 0] = [ap + -10] + 3, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [fp + -5], ap++;
jmp rel 269;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 29721761890975875353235833581453094220424382983267374, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -12] + 3, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 42;
ap += 12;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 35;
ap += 29;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -48] + 5, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 21;
ap += 44;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -47], ap++;
jmp rel 14;
ap += 55;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -64] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = memory[fp + -4] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -7] + 1], ap++;
[ap + 3] = [[ap + -8] + 2], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[fp + -4] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -12] + 3];
jmp rel 14 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -4] = [[ap + -7] + 1];
ap += 5;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -12] + 4, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -17], ap++;
call rel 832;
jmp rel 221 if [ap + -3] != 0;
jmp rel 15 if [ap + -1] != 0;
ap += 59;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 29721761890975875353235833581453094220424382983267374, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 211;
%{ (memory[ap + 5], memory[ap + 6]) = divmod(memory[ap + -16], memory[ap + -1]) %}
[ap + 5] = [[ap + -4] + 0], ap++;
[ap + 5] = [[ap + -5] + 1], ap++;
[ap + -2] = [ap + 4] + 1, ap++;
[ap + -4] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[ap + -8] + 2], ap++;
%{ memory[ap + -3] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 6 if [ap + -3] != 0, ap++;
[ap + -3] = [ap + -7] + 340282366920938463444927863358058659840, ap++;
jmp rel 4;
[ap + -3] = [ap + -1] + 340282366920938463444927863358058659840, ap++;
[ap + -4] = [[ap + -11] + 3];
[ap + -3] = [ap + -8] * [ap + -2];
[ap + -23] = [ap + -3] + [ap + -1];
[ap + 0] = 16, ap++;
[ap + -1] = [ap + 1] + [ap + -38], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -15] + 4];
jmp rel 165;
[ap + -1] = [[ap + -14] + 4];
[ap + 0] = [ap + -14] + 5, ap++;
[ap + 0] = [ap + -2], ap++;
call rel 782;
jmp rel 150 if [ap + -3] != 0;
[ap + 0] = [ap + -39] * [ap + -1], ap++;
[ap + 0] = 31, ap++;
[ap + 0] = [ap + -2] + [ap + -21], ap++;
[ap + -2] = [ap + 1] + [fp + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 124;
[ap + -1] = [[ap + -9] + 0];
[ap + 0] = 16, ap++;
[ap + -2] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 1];
jmp rel 47;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = 16, ap++;
[ap + -5] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -16] + 2];
jmp rel 22;
[ap + -1] = [[ap + -15] + 2];
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -2], ap++;
call rel 740;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] * 340282366920938463463374607431768211456, ap++;
jmp rel 34;
ap += 12;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 80;
ap += 23;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -41] + 3, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 66;
ap += 2;
[ap + 0] = [ap + -15] + 2, ap++;
[ap + 0] = [ap + -8], ap++;
call rel 705;
jmp rel 52 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -6] * [ap + -1], ap++;
[ap + 0] = [ap + -26] + [ap + -1], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 452312848583266388373324160190187140051835877600158453279131187530910662656 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 452312848583266388373324160190187140051835877600158453279131187530910662656, ap++;
%{
(value, scalar) = (memory[ap + 3], 9304595970494411423921298675024789504)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 9304595970494411423921298675024789504, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 330977770950444052039453308756743421951;
[ap + -3] = [[ap + -10] + 2];
jmp rel 22;
%{
(value, scalar) = (memory[ap + -2], 1329227995784915872903807060280344576)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 1329227995784915872903807060280344576, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -7] + 0], ap++;
[ap + -3] = [[ap + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 338953138925153547590470800371487866880;
[ap + -2] = [[ap + -9] + 2];
ap += 1;
[ap + -7] = [[fp + -7] + 0];
[ap + 0] = [ap + -10] + 3, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -56], ap++;
[ap + 0] = [fp + -5], ap++;
jmp rel 220;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 29721761890975875353235833581453094220424382983267374, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -12] + 3, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 49;
ap += 12;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 42;
ap += 29;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -41] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 28;
ap += 37;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = [ap + -40], ap++;
jmp rel 21;
ap += 48;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -65] + 5, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 7;
ap += 61;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [ap + -64], ap++;
[ap + 0] = [ap + -64], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 44;
%{ memory[ap + 0] = memory[fp + -4] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -47] + 0], ap++;
[ap + 3] = [[ap + -48] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[fp + -4] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -52] + 2];
jmp rel 14 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -4] = [[ap + -47] + 0];
ap += 5;
[ap + 0] = [ap + -52] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -52] + 3, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 31, ap++;
[ap + -1] = [ap + 1] + [fp + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 130;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = 16, ap++;
[ap + -2] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -10] + 1];
jmp rel 47;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = 16, ap++;
[ap + -5] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 2];
jmp rel 22;
[ap + -1] = [[ap + -12] + 2];
[ap + 0] = [ap + -12] + 3, ap++;
[ap + 0] = [ap + -2], ap++;
call rel 520;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] * 340282366920938463463374607431768211456, ap++;
jmp rel 34;
ap += 12;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 86;
ap += 23;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -38] + 3, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 72;
ap += 2;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -8], ap++;
call rel 485;
jmp rel 58 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -6] * [ap + -1], ap++;
[ap + 0] = [ap + -27] + [ap + -1], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 452312848583266388373324160190187140051835877600158453279131187530910662656 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 452312848583266388373324160190187140051835877600158453279131187530910662656, ap++;
%{
(value, scalar) = (memory[ap + 3], 9304595970494411423921298675024789504)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 9304595970494411423921298675024789504, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 330977770950444052039453308756743421951;
[ap + -3] = [[ap + -10] + 2];
jmp rel 28;
%{
(value, scalar) = (memory[ap + -2], 1329227995784915872903807060280344576)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 1329227995784915872903807060280344576, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -7] + 0], ap++;
[ap + -3] = [[ap + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 338953138925153547590470800371487866880;
[ap + -2] = [[ap + -9] + 2];
ap += 1;
[ap + -7] = [[fp + -7] + 0];
[ap + 0] = [ap + -10] + 3, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -99], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 29721761890975875353235833581453094220424382983267374, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -12] + 3, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 21;
ap += 12;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 14;
ap += 29;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -38] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 90;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -98] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
ap += 64;
[ap + 0] = 16, ap++;
[fp + -3] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -70] + 0];
jmp rel 47;
[ap + -1] = [[ap + -69] + 0];
[ap + 0] = 16, ap++;
[fp + -3] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -73] + 1];
jmp rel 22;
[ap + -1] = [[ap + -72] + 1];
[ap + 0] = [ap + -72] + 2, ap++;
[ap + 0] = [ap + -2], ap++;
call rel 350;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] * 340282366920938463463374607431768211456, ap++;
jmp rel 34;
ap += 9;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 88;
ap += 20;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -95] + 2, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 74;
ap += 2;
[ap + 0] = [ap + -72] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
call rel 315;
jmp rel 60 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -6] * [ap + -1], ap++;
[ap + 0] = [fp + -4] + [ap + -1], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 452312848583266388373324160190187140051835877600158453279131187530910662656 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 452312848583266388373324160190187140051835877600158453279131187530910662656, ap++;
%{
(value, scalar) = (memory[ap + 3], 9304595970494411423921298675024789504)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 9304595970494411423921298675024789504, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 330977770950444052039453308756743421951;
[ap + -3] = [[ap + -10] + 2];
jmp rel 25;
%{
(value, scalar) = (memory[ap + -2], 1329227995784915872903807060280344576)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 1329227995784915872903807060280344576, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -7] + 0], ap++;
[ap + -3] = [[ap + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 338953138925153547590470800371487866880;
[ap + -2] = [[ap + -9] + 2];
ap += 3;
[ap + -9] = [[fp + -7] + 0];
[ap + 0] = [ap + -12] + 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 29721761890975875353235833581453094220424382983267374, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -12] + 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
ap += 9;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 66;
[ap + 0] = [fp + -9] + 2, ap++;
[fp + -5] = [ap + 0] + 0, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 125;
[ap + 0] = 16, ap++;
[fp + -3] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -6] + 0];
jmp rel 47;
[ap + -1] = [[ap + -5] + 0];
[ap + 0] = 16, ap++;
[fp + -3] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -9] + 1];
jmp rel 22;
[ap + -1] = [[ap + -8] + 1];
[ap + 0] = [ap + -8] + 2, ap++;
[ap + 0] = [ap + -2], ap++;
call rel 203;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] * 340282366920938463463374607431768211456, ap++;
jmp rel 34;
ap += 6;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
jmp rel 74;
ap += 17;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -28] + 2, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 60;
ap += 2;
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
call rel 168;
jmp rel 46 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -6] * [ap + -1], ap++;
[ap + 0] = [fp + -4] + [ap + -1], ap++;
%{ memory[ap + 0] = (memory[fp + -5] + memory[fp + -3]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -5] + [fp + -3], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 17;
[ap + 1] = [fp + -5] + [fp + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -7] + 0];
ap += 2;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504323917466144735657540098748279, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
ap += 6;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 29;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
ap += 99;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504323917466144735657540098748279, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
ap += 104;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
ret;
%{ memory[ap + 0] = 2270 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768209186, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 47;
[fp + -7] = [ap + 0] + 2270, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6], ap++;
jmp rel 8;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 14 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
call rel -42;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
%{ memory[ap + 0] = memory[fp + -3] < 16 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[fp + -3] = [ap + 0] + 16, ap++;
[ap + -1] = [[fp + -4] + 0];
jmp rel 111;
[ap + 0] = [fp + -3] + 340282366920938463463374607431768211440, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -3] = [ap + 0] + 1809251394333065606848661391547535052811553607665798349986546028067936010256, ap++;
[ap + 0] = [ap + -1] * -2, ap++;
[ap + 0] = [fp + -4] + 1, ap++;
jmp rel [ap + -2];
jmp rel 90;
jmp rel 84;
jmp rel 78;
jmp rel 72;
jmp rel 66;
jmp rel 60;
jmp rel 54;
jmp rel 48;
jmp rel 42;
jmp rel 36;
jmp rel 30;
jmp rel 24;
jmp rel 18;
jmp rel 12;
jmp rel 6;
[ap + 0] = 1, ap++;
jmp rel 60;
[ap + 0] = 256, ap++;
jmp rel 56;
[ap + 0] = 65536, ap++;
jmp rel 52;
[ap + 0] = 16777216, ap++;
jmp rel 48;
[ap + 0] = 4294967296, ap++;
jmp rel 44;
[ap + 0] = 1099511627776, ap++;
jmp rel 40;
[ap + 0] = 281474976710656, ap++;
jmp rel 36;
[ap + 0] = 72057594037927936, ap++;
jmp rel 32;
[ap + 0] = 18446744073709551616, ap++;
jmp rel 28;
[ap + 0] = 4722366482869645213696, ap++;
jmp rel 24;
[ap + 0] = 1208925819614629174706176, ap++;
jmp rel 20;
[ap + 0] = 309485009821345068724781056, ap++;
jmp rel 16;
[ap + 0] = 79228162514264337593543950336, ap++;
jmp rel 12;
[ap + 0] = 20282409603651670423947251286016, ap++;
jmp rel 8;
[ap + 0] = 5192296858534827628530496329220096, ap++;
jmp rel 4;
[ap + 0] = 1329227995784915872903807060280344576, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 2;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 573087285299505011920718992710461799, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
ret;
ret;
dw 12;
dw 16;
dw 20;
dw 28;
dw 16;
dw 24;
dw 0;
dw 4;
dw 12;
dw 0;
dw 8;
dw 16;
dw 24;
dw 20;
dw 0;
dw 24;
dw 28;
dw 32;

//! > function_costs
test::foo: OrderedHashMap({RangeCheck96: 43, AddMod: 2, MulMod: 4, Const: 101560})
core::circuit::FillInputResultImpl::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>::next::<[core::internal::BoundedInt::<0, 79228162514264337593543950335>; 4], core::circuit::U96sIntoCircuitInputValue, core::traits::FixedSizedArrayDrop::<core::internal::BoundedInt::<0, 79228162514264337593543950335>, core::internal::BoundedIntDrop::<0, 79228162514264337593543950335>, 4>>: OrderedHashMap({Const: 22340})
core::circuit::FillInputResultImpl::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>::done: OrderedHashMap({Const: 22240})
core::byte_array::ByteArrayImpl::append_word: OrderedHashMap({Const: 16870})
core::array::serialize_array_helper::<core::bytes_31::bytes31, core::serde::into_felt252_based::SerdeImpl::<core::bytes_31::bytes31, core::bytes_31::bytes31Copy, core::bytes_31::Bytes31IntoFelt252, core::bytes_31::Felt252TryIntoBytes31>, core::bytes_31::bytes31Drop>: OrderedHashMap({Const: 1270})
core::bytes_31::one_shift_left_bytes_u128: OrderedHashMap({Const: 1470})

//! > sierra_code
type AddMod = AddMod [storable: true, drop: false, dup: false, zero_sized: false];
type Uninitialized<AddMod> = Uninitialized<AddMod> [storable: false, drop: true, dup: false, zero_sized: false];
type Const<felt252, 573087285299505011920718992710461799> = Const<felt252, 573087285299505011920718992710461799> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u128, 1329227995784915872903807060280344576> = Const<u128, 1329227995784915872903807060280344576> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u128, 5192296858534827628530496329220096> = Const<u128, 5192296858534827628530496329220096> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u128, 20282409603651670423947251286016> = Const<u128, 20282409603651670423947251286016> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u128, 79228162514264337593543950336> = Const<u128, 79228162514264337593543950336> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u128, 309485009821345068724781056> = Const<u128, 309485009821345068724781056> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u128, 1208925819614629174706176> = Const<u128, 1208925819614629174706176> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u128, 4722366482869645213696> = Const<u128, 4722366482869645213696> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u128, 18446744073709551616> = Const<u128, 18446744073709551616> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u128, 72057594037927936> = Const<u128, 72057594037927936> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u128, 281474976710656> = Const<u128, 281474976710656> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u128, 1099511627776> = Const<u128, 1099511627776> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u128, 4294967296> = Const<u128, 4294967296> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u128, 16777216> = Const<u128, 16777216> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u128, 65536> = Const<u128, 65536> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u128, 256> = Const<u128, 256> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u128, 1> = Const<u128, 1> [storable: false, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type index_enum_type<16> = Enum<ut@index_enum_type<16>, Unit, Unit, Unit, Unit, Unit, Unit, Unit, Unit, Unit, Unit, Unit, Unit, Unit, Unit, Unit, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type BoundedInt<0, 15> = BoundedInt<0, 15> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<felt252, 375233589013918064796019> = Const<felt252, 375233589013918064796019> [storable: false, drop: false, dup: false, zero_sized: false];
type Box<bytes31> = Box<bytes31> [storable: true, drop: true, dup: true, zero_sized: false];
type core::option::Option::<core::box::Box::<@core::bytes_31::bytes31>> = Enum<ut@core::option::Option::<core::box::Box::<@core::bytes_31::bytes31>>, Box<bytes31>, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<felt252, 155785504323917466144735657540098748279> = Const<felt252, 155785504323917466144735657540098748279> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<felt252, 155785504329508738615720351733824384887> = Const<felt252, 155785504329508738615720351733824384887> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<felt252, 340282366920938463463374607431768211456> = Const<felt252, 340282366920938463463374607431768211456> [storable: false, drop: false, dup: false, zero_sized: false];
type u128 = u128 [storable: true, drop: true, dup: true, zero_sized: false];
type NonZero<u128> = NonZero<u128> [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<u128> = Struct<ut@Tuple, u128> [storable: true, drop: true, dup: true, zero_sized: false];
type core::panics::Panic = Struct<ut@core::panics::Panic> [storable: true, drop: true, dup: true, zero_sized: true];
type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type Tuple<core::panics::Panic, Array<felt252>> = Struct<ut@Tuple, core::panics::Panic, Array<felt252>> [storable: true, drop: true, dup: false, zero_sized: false];
type core::panics::PanicResult::<(core::integer::u128,)> = Enum<ut@core::panics::PanicResult::<(core::integer::u128,)>, Tuple<u128>, Tuple<core::panics::Panic, Array<felt252>>> [storable: true, drop: true, dup: false, zero_sized: false];
type Const<u128, 0> = Const<u128, 0> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u32, 31> = Const<u32, 31> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<felt252, 138583295661092166701491297054433349032460315956105119041111996301516236132> = Const<felt252, 138583295661092166701491297054433349032460315956105119041111996301516236132> [storable: false, drop: false, dup: false, zero_sized: false];
type U96Guarantee = U96Guarantee [storable: true, drop: false, dup: false, zero_sized: false];
type Tuple<U96Guarantee, U96Guarantee, U96Guarantee, U96Guarantee> = Struct<ut@Tuple, U96Guarantee, U96Guarantee, U96Guarantee, U96Guarantee> [storable: true, drop: false, dup: false, zero_sized: false];
type Const<u32, 27> = Const<u32, 27> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<felt252, 26913677086973030051406221357623718750637972950955665348321109348> = Const<felt252, 26913677086973030051406221357623718750637972950955665348321109348> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<felt252, 29721761890975875353235833581453094220424382983267374> = Const<felt252, 29721761890975875353235833581453094220424382983267374> [storable: false, drop: false, dup: false, zero_sized: false];
type Tuple<Array<felt252>, Unit> = Struct<ut@Tuple, Array<felt252>, Unit> [storable: true, drop: true, dup: false, zero_sized: false];
type core::panics::PanicResult::<(core::array::Array::<core::felt252>, ())> = Enum<ut@core::panics::PanicResult::<(core::array::Array::<core::felt252>, ())>, Tuple<Array<felt252>, Unit>, Tuple<core::panics::Panic, Array<felt252>>> [storable: true, drop: true, dup: false, zero_sized: false];
type Array<bytes31> = Array<bytes31> [storable: true, drop: true, dup: false, zero_sized: false];
type Snapshot<Array<bytes31>> = Snapshot<Array<bytes31>> [storable: true, drop: true, dup: true, zero_sized: false];
type core::array::Span::<core::bytes_31::bytes31> = Struct<ut@core::array::Span::<core::bytes_31::bytes31>, Snapshot<Array<bytes31>>> [storable: true, drop: true, dup: true, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type u32 = u32 [storable: true, drop: true, dup: true, zero_sized: false];
type core::byte_array::ByteArray = Struct<ut@core::byte_array::ByteArray, Array<bytes31>, felt252, u32> [storable: true, drop: true, dup: false, zero_sized: false];
type Snapshot<core::byte_array::ByteArray> = Snapshot<core::byte_array::ByteArray> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<felt252, 1997209042069643135709344952807065910992472029923670688473712229447419591075> = Const<felt252, 1997209042069643135709344952807065910992472029923670688473712229447419591075> [storable: false, drop: false, dup: false, zero_sized: false];
type Tuple<core::byte_array::ByteArray, Unit> = Struct<ut@Tuple, core::byte_array::ByteArray, Unit> [storable: true, drop: true, dup: false, zero_sized: false];
type core::panics::PanicResult::<(core::byte_array::ByteArray, ())> = Enum<ut@core::panics::PanicResult::<(core::byte_array::ByteArray, ())>, Tuple<core::byte_array::ByteArray, Unit>, Tuple<core::panics::Panic, Array<felt252>>> [storable: true, drop: true, dup: false, zero_sized: false];
type Const<u32, 16> = Const<u32, 16> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<felt252, 92342086994883127646987903453339415411> = Const<felt252, 92342086994883127646987903453339415411> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u32, 0> = Const<u32, 0> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<felt252, 0> = Const<felt252, 0> [storable: false, drop: false, dup: false, zero_sized: false];
type bytes31 = bytes31 [storable: true, drop: true, dup: true, zero_sized: false];
type U96LimbsLTGuarantee<1> = U96LimbsLTGuarantee<1> [storable: true, drop: false, dup: false, zero_sized: false];
type U96LimbsLTGuarantee<2> = U96LimbsLTGuarantee<2> [storable: true, drop: false, dup: false, zero_sized: false];
type U96LimbsLTGuarantee<3> = U96LimbsLTGuarantee<3> [storable: true, drop: false, dup: false, zero_sized: false];
type U96LimbsLTGuarantee<4> = U96LimbsLTGuarantee<4> [storable: true, drop: false, dup: false, zero_sized: false];
type Tuple<Unit> = Struct<ut@Tuple, Unit> [storable: true, drop: true, dup: true, zero_sized: true];
type core::panics::PanicResult::<((),)> = Enum<ut@core::panics::PanicResult::<((),)>, Tuple<Unit>, Tuple<core::panics::Panic, Array<felt252>>> [storable: true, drop: true, dup: false, zero_sized: false];
type CircuitFailureGuarantee = CircuitFailureGuarantee [storable: true, drop: false, dup: false, zero_sized: false];
type CircuitPartialOutputs<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>> = CircuitPartialOutputs<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>> [storable: true, drop: true, dup: false, zero_sized: false];
type CircuitOutputs<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>> = CircuitOutputs<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<BoundedInt<1, 1>, 1> = Const<BoundedInt<1, 1>, 1> [storable: false, drop: false, dup: false, zero_sized: false];
type BoundedInt<1, 1> = BoundedInt<1, 1> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<BoundedInt<0, 0>, 0> = Const<BoundedInt<0, 0>, 0> [storable: false, drop: false, dup: false, zero_sized: false];
type BoundedInt<0, 0> = BoundedInt<0, 0> [storable: true, drop: true, dup: true, zero_sized: false];
type CircuitData<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>> = CircuitData<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>> [storable: true, drop: true, dup: false, zero_sized: false];
type CircuitDescriptor<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>> = CircuitDescriptor<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>> [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<CircuitData<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>> = Struct<ut@Tuple, CircuitData<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>> [storable: true, drop: true, dup: false, zero_sized: false];
type core::panics::PanicResult::<(core::circuit::CircuitData::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>,)> = Enum<ut@core::panics::PanicResult::<(core::circuit::CircuitData::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>,)>, Tuple<CircuitData<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>>, Tuple<core::panics::Panic, Array<felt252>>> [storable: true, drop: true, dup: false, zero_sized: false];
type Const<BoundedInt<0, 79228162514264337593543950335>, 6> = Const<BoundedInt<0, 79228162514264337593543950335>, 6> [storable: false, drop: false, dup: false, zero_sized: false];
type CircuitInputAccumulator<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>> = CircuitInputAccumulator<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>> [storable: true, drop: true, dup: false, zero_sized: false];
type core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>> = Enum<ut@core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>, CircuitData<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>, CircuitInputAccumulator<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>> [storable: true, drop: true, dup: false, zero_sized: false];
type Tuple<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>> = Struct<ut@Tuple, core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>> [storable: true, drop: true, dup: false, zero_sized: false];
type core::panics::PanicResult::<(core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>,)> = Enum<ut@core::panics::PanicResult::<(core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>,)>, Tuple<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>>, Tuple<core::panics::Panic, Array<felt252>>> [storable: true, drop: true, dup: false, zero_sized: false];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Const<BoundedInt<0, 79228162514264337593543950335>, 3> = Const<BoundedInt<0, 79228162514264337593543950335>, 3> [storable: false, drop: false, dup: false, zero_sized: false];
type Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)> = Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)> [storable: false, drop: false, dup: false, zero_sized: true];
type core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>> = MulModGate<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>> [storable: false, drop: false, dup: false, zero_sized: false];
type (core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,) = Struct<ut@Tuple, core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>> [storable: false, drop: false, dup: false, zero_sized: false];
type CircuitModulus = CircuitModulus [storable: true, drop: true, dup: true, zero_sized: false];
type core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>> = SubModGate<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>> [storable: false, drop: false, dup: false, zero_sized: false];
type core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>> = InverseGate<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>> [storable: false, drop: false, dup: false, zero_sized: false];
type core::circuit::CircuitInput::<1> = CircuitInput<1> [storable: false, drop: false, dup: false, zero_sized: false];
type core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>> = AddModGate<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<BoundedInt<0, 79228162514264337593543950335>, 0> = Const<BoundedInt<0, 79228162514264337593543950335>, 0> [storable: false, drop: false, dup: false, zero_sized: false];
type core::circuit::CircuitInput::<0> = CircuitInput<0> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<BoundedInt<0, 79228162514264337593543950335>, 7> = Const<BoundedInt<0, 79228162514264337593543950335>, 7> [storable: false, drop: false, dup: false, zero_sized: false];
type BoundedInt<0, 79228162514264337593543950335> = BoundedInt<0, 79228162514264337593543950335> [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>> = Struct<ut@Tuple, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>> [storable: true, drop: true, dup: true, zero_sized: false];
type Uninitialized<Tuple<BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>>> = Uninitialized<Tuple<BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>>> [storable: false, drop: true, dup: false, zero_sized: false];
type MulMod = MulMod [storable: true, drop: false, dup: false, zero_sized: false];
type Uninitialized<MulMod> = Uninitialized<MulMod> [storable: false, drop: true, dup: false, zero_sized: false];
type RangeCheck96 = RangeCheck96 [storable: true, drop: false, dup: false, zero_sized: false];
type Uninitialized<RangeCheck96> = Uninitialized<RangeCheck96> [storable: false, drop: true, dup: false, zero_sized: false];
type Uninitialized<core::byte_array::ByteArray> = Uninitialized<core::byte_array::ByteArray> [storable: false, drop: true, dup: false, zero_sized: false];

libfunc alloc_local<AddMod> = alloc_local<AddMod>;
libfunc alloc_local<core::byte_array::ByteArray> = alloc_local<core::byte_array::ByteArray>;
libfunc alloc_local<RangeCheck96> = alloc_local<RangeCheck96>;
libfunc alloc_local<MulMod> = alloc_local<MulMod>;
libfunc alloc_local<Tuple<BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>>> = alloc_local<Tuple<BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>>>;
libfunc finalize_locals = finalize_locals;
libfunc disable_ap_tracking = disable_ap_tracking;
libfunc const_as_immediate<Const<BoundedInt<0, 79228162514264337593543950335>, 7>> = const_as_immediate<Const<BoundedInt<0, 79228162514264337593543950335>, 7>>;
libfunc const_as_immediate<Const<BoundedInt<0, 79228162514264337593543950335>, 0>> = const_as_immediate<Const<BoundedInt<0, 79228162514264337593543950335>, 0>>;
libfunc struct_construct<Tuple<BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>>> = struct_construct<Tuple<BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>>>;
libfunc store_local<Tuple<BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>>> = store_local<Tuple<BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>>>;
libfunc try_into_circuit_modulus = try_into_circuit_modulus;
libfunc branch_align = branch_align;
libfunc init_circuit_data<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>> = init_circuit_data<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>;
libfunc enum_init<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>, 1> = enum_init<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>, 1>;
libfunc const_as_immediate<Const<BoundedInt<0, 79228162514264337593543950335>, 3>> = const_as_immediate<Const<BoundedInt<0, 79228162514264337593543950335>, 3>>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>> = store_temp<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>>;
libfunc store_temp<Tuple<BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>>> = store_temp<Tuple<BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>>>;
libfunc store_local<RangeCheck96> = store_local<RangeCheck96>;
libfunc function_call<user@core::circuit::FillInputResultImpl::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>::next::<[core::internal::BoundedInt::<0, 79228162514264337593543950335>; 4], core::circuit::U96sIntoCircuitInputValue, core::traits::FixedSizedArrayDrop::<core::internal::BoundedInt::<0, 79228162514264337593543950335>, core::internal::BoundedIntDrop::<0, 79228162514264337593543950335>, 4>>> = function_call<user@core::circuit::FillInputResultImpl::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>::next::<[core::internal::BoundedInt::<0, 79228162514264337593543950335>; 4], core::circuit::U96sIntoCircuitInputValue, core::traits::FixedSizedArrayDrop::<core::internal::BoundedInt::<0, 79228162514264337593543950335>, core::internal::BoundedIntDrop::<0, 79228162514264337593543950335>, 4>>>;
libfunc enum_match<core::panics::PanicResult::<(core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>,)>> = enum_match<core::panics::PanicResult::<(core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>,)>>;
libfunc struct_deconstruct<Tuple<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>>> = struct_deconstruct<Tuple<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>>>;
libfunc const_as_immediate<Const<BoundedInt<0, 79228162514264337593543950335>, 6>> = const_as_immediate<Const<BoundedInt<0, 79228162514264337593543950335>, 6>>;
libfunc function_call<user@core::circuit::FillInputResultImpl::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>::done> = function_call<user@core::circuit::FillInputResultImpl::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>::done>;
libfunc enum_match<core::panics::PanicResult::<(core::circuit::CircuitData::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>,)>> = enum_match<core::panics::PanicResult::<(core::circuit::CircuitData::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>,)>>;
libfunc get_circuit_descriptor<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>> = get_circuit_descriptor<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>;
libfunc struct_deconstruct<Tuple<CircuitData<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>>> = struct_deconstruct<Tuple<CircuitData<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>>>;
libfunc const_as_immediate<Const<BoundedInt<0, 0>, 0>> = const_as_immediate<Const<BoundedInt<0, 0>, 0>>;
libfunc const_as_immediate<Const<BoundedInt<1, 1>, 1>> = const_as_immediate<Const<BoundedInt<1, 1>, 1>>;
libfunc store_temp<BoundedInt<0, 0>> = store_temp<BoundedInt<0, 0>>;
libfunc store_temp<BoundedInt<1, 1>> = store_temp<BoundedInt<1, 1>>;
libfunc eval_circuit<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>> = eval_circuit<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>;
libfunc drop<CircuitOutputs<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>> = drop<CircuitOutputs<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>>;
libfunc drop<Uninitialized<RangeCheck96>> = drop<Uninitialized<RangeCheck96>>;
libfunc drop<Uninitialized<core::byte_array::ByteArray>> = drop<Uninitialized<core::byte_array::ByteArray>>;
libfunc drop<Uninitialized<MulMod>> = drop<Uninitialized<MulMod>>;
libfunc drop<Uninitialized<AddMod>> = drop<Uninitialized<AddMod>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc struct_construct<Tuple<Unit>> = struct_construct<Tuple<Unit>>;
libfunc enum_init<core::panics::PanicResult::<((),)>, 0> = enum_init<core::panics::PanicResult::<((),)>, 0>;
libfunc store_temp<AddMod> = store_temp<AddMod>;
libfunc store_temp<MulMod> = store_temp<MulMod>;
libfunc store_temp<RangeCheck96> = store_temp<RangeCheck96>;
libfunc store_temp<core::panics::PanicResult::<((),)>> = store_temp<core::panics::PanicResult::<((),)>>;
libfunc drop<CircuitPartialOutputs<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>> = drop<CircuitPartialOutputs<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>>;
libfunc circuit_failure_guarantee_verify = circuit_failure_guarantee_verify;
libfunc enable_ap_tracking = enable_ap_tracking;
libfunc store_local<AddMod> = store_local<AddMod>;
libfunc store_local<MulMod> = store_local<MulMod>;
libfunc u96_limbs_less_than_guarantee_verify<4> = u96_limbs_less_than_guarantee_verify<4>;
libfunc u96_limbs_less_than_guarantee_verify<3> = u96_limbs_less_than_guarantee_verify<3>;
libfunc u96_limbs_less_than_guarantee_verify<2> = u96_limbs_less_than_guarantee_verify<2>;
libfunc u96_single_limb_less_than_guarantee_verify = u96_single_limb_less_than_guarantee_verify;
libfunc store_temp<U96Guarantee> = store_temp<U96Guarantee>;
libfunc jump = jump;
libfunc u96_guarantee_verify = u96_guarantee_verify;
libfunc array_new<bytes31> = array_new<bytes31>;
libfunc const_as_immediate<Const<felt252, 0>> = const_as_immediate<Const<felt252, 0>>;
libfunc const_as_immediate<Const<u32, 0>> = const_as_immediate<Const<u32, 0>>;
libfunc const_as_immediate<Const<felt252, 92342086994883127646987903453339415411>> = const_as_immediate<Const<felt252, 92342086994883127646987903453339415411>>;
libfunc const_as_immediate<Const<u32, 16>> = const_as_immediate<Const<u32, 16>>;
libfunc struct_construct<core::byte_array::ByteArray> = struct_construct<core::byte_array::ByteArray>;
libfunc store_temp<core::byte_array::ByteArray> = store_temp<core::byte_array::ByteArray>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc store_temp<u32> = store_temp<u32>;
libfunc function_call<user@core::byte_array::ByteArrayImpl::append_word> = function_call<user@core::byte_array::ByteArrayImpl::append_word>;
libfunc enum_match<core::panics::PanicResult::<(core::byte_array::ByteArray, ())>> = enum_match<core::panics::PanicResult::<(core::byte_array::ByteArray, ())>>;
libfunc array_new<felt252> = array_new<felt252>;
libfunc const_as_immediate<Const<felt252, 1997209042069643135709344952807065910992472029923670688473712229447419591075>> = const_as_immediate<Const<felt252, 1997209042069643135709344952807065910992472029923670688473712229447419591075>>;
libfunc array_append<felt252> = array_append<felt252>;
libfunc struct_deconstruct<Tuple<core::byte_array::ByteArray, Unit>> = struct_deconstruct<Tuple<core::byte_array::ByteArray, Unit>>;
libfunc drop<Unit> = drop<Unit>;
libfunc store_local<core::byte_array::ByteArray> = store_local<core::byte_array::ByteArray>;
libfunc snapshot_take<core::byte_array::ByteArray> = snapshot_take<core::byte_array::ByteArray>;
libfunc drop<core::byte_array::ByteArray> = drop<core::byte_array::ByteArray>;
libfunc dup<Snapshot<core::byte_array::ByteArray>> = dup<Snapshot<core::byte_array::ByteArray>>;
libfunc struct_snapshot_deconstruct<core::byte_array::ByteArray> = struct_snapshot_deconstruct<core::byte_array::ByteArray>;
libfunc drop<felt252> = drop<felt252>;
libfunc drop<u32> = drop<u32>;
libfunc dup<Snapshot<Array<bytes31>>> = dup<Snapshot<Array<bytes31>>>;
libfunc array_len<bytes31> = array_len<bytes31>;
libfunc u32_to_felt252 = u32_to_felt252;
libfunc struct_construct<core::array::Span::<core::bytes_31::bytes31>> = struct_construct<core::array::Span::<core::bytes_31::bytes31>>;
libfunc store_temp<core::array::Span::<core::bytes_31::bytes31>> = store_temp<core::array::Span::<core::bytes_31::bytes31>>;
libfunc store_temp<Array<felt252>> = store_temp<Array<felt252>>;
libfunc function_call<user@core::array::serialize_array_helper::<core::bytes_31::bytes31, core::serde::into_felt252_based::SerdeImpl::<core::bytes_31::bytes31, core::bytes_31::bytes31Copy, core::bytes_31::Bytes31IntoFelt252, core::bytes_31::Felt252TryIntoBytes31>, core::bytes_31::bytes31Drop>> = function_call<user@core::array::serialize_array_helper::<core::bytes_31::bytes31, core::serde::into_felt252_based::SerdeImpl::<core::bytes_31::bytes31, core::bytes_31::bytes31Copy, core::bytes_31::Bytes31IntoFelt252, core::bytes_31::Felt252TryIntoBytes31>, core::bytes_31::bytes31Drop>>;
libfunc enum_match<core::panics::PanicResult::<(core::array::Array::<core::felt252>, ())>> = enum_match<core::panics::PanicResult::<(core::array::Array::<core::felt252>, ())>>;
libfunc struct_deconstruct<Tuple<Array<felt252>, Unit>> = struct_deconstruct<Tuple<Array<felt252>, Unit>>;
libfunc drop<Snapshot<Array<bytes31>>> = drop<Snapshot<Array<bytes31>>>;
libfunc rename<felt252> = rename<felt252>;
libfunc rename<u32> = rename<u32>;
libfunc drop<Snapshot<core::byte_array::ByteArray>> = drop<Snapshot<core::byte_array::ByteArray>>;
libfunc struct_deconstruct<Tuple<core::panics::Panic, Array<felt252>>> = struct_deconstruct<Tuple<core::panics::Panic, Array<felt252>>>;
libfunc drop<core::panics::Panic> = drop<core::panics::Panic>;
libfunc struct_construct<core::panics::Panic> = struct_construct<core::panics::Panic>;
libfunc struct_construct<Tuple<core::panics::Panic, Array<felt252>>> = struct_construct<Tuple<core::panics::Panic, Array<felt252>>>;
libfunc enum_init<core::panics::PanicResult::<((),)>, 1> = enum_init<core::panics::PanicResult::<((),)>, 1>;
libfunc drop<CircuitModulus> = drop<CircuitModulus>;
libfunc const_as_immediate<Const<felt252, 29721761890975875353235833581453094220424382983267374>> = const_as_immediate<Const<felt252, 29721761890975875353235833581453094220424382983267374>>;
libfunc enum_match<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>> = enum_match<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>>;
libfunc drop<CircuitData<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>> = drop<CircuitData<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>>;
libfunc drop<Tuple<BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>>> = drop<Tuple<BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>>>;
libfunc const_as_immediate<Const<felt252, 26913677086973030051406221357623718750637972950955665348321109348>> = const_as_immediate<Const<felt252, 26913677086973030051406221357623718750637972950955665348321109348>>;
libfunc const_as_immediate<Const<u32, 27>> = const_as_immediate<Const<u32, 27>>;
libfunc enum_init<core::panics::PanicResult::<(core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>,)>, 1> = enum_init<core::panics::PanicResult::<(core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>,)>, 1>;
libfunc store_temp<core::panics::PanicResult::<(core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>,)>> = store_temp<core::panics::PanicResult::<(core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>,)>>;
libfunc struct_deconstruct<Tuple<BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>>> = struct_deconstruct<Tuple<BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>>>;
libfunc into_u96_guarantee<BoundedInt<0, 79228162514264337593543950335>> = into_u96_guarantee<BoundedInt<0, 79228162514264337593543950335>>;
libfunc struct_construct<Tuple<U96Guarantee, U96Guarantee, U96Guarantee, U96Guarantee>> = struct_construct<Tuple<U96Guarantee, U96Guarantee, U96Guarantee, U96Guarantee>>;
libfunc store_temp<Tuple<U96Guarantee, U96Guarantee, U96Guarantee, U96Guarantee>> = store_temp<Tuple<U96Guarantee, U96Guarantee, U96Guarantee, U96Guarantee>>;
libfunc fill_circuit_input<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>> = fill_circuit_input<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>;
libfunc enum_init<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>, 0> = enum_init<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>, 0>;
libfunc struct_construct<Tuple<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>>> = struct_construct<Tuple<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>>>;
libfunc enum_init<core::panics::PanicResult::<(core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>,)>, 0> = enum_init<core::panics::PanicResult::<(core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>,)>, 0>;
libfunc struct_construct<Tuple<CircuitData<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>>> = struct_construct<Tuple<CircuitData<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>>>;
libfunc enum_init<core::panics::PanicResult::<(core::circuit::CircuitData::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>,)>, 0> = enum_init<core::panics::PanicResult::<(core::circuit::CircuitData::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>,)>, 0>;
libfunc store_temp<core::panics::PanicResult::<(core::circuit::CircuitData::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>,)>> = store_temp<core::panics::PanicResult::<(core::circuit::CircuitData::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>,)>>;
libfunc drop<CircuitInputAccumulator<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>> = drop<CircuitInputAccumulator<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>>;
libfunc const_as_immediate<Const<felt252, 138583295661092166701491297054433349032460315956105119041111996301516236132>> = const_as_immediate<Const<felt252, 138583295661092166701491297054433349032460315956105119041111996301516236132>>;
libfunc const_as_immediate<Const<u32, 31>> = const_as_immediate<Const<u32, 31>>;
libfunc enum_init<core::panics::PanicResult::<(core::circuit::CircuitData::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>,)>, 1> = enum_init<core::panics::PanicResult::<(core::circuit::CircuitData::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>,)>, 1>;
libfunc dup<u32> = dup<u32>;
libfunc u32_eq = u32_eq;
libfunc struct_deconstruct<core::byte_array::ByteArray> = struct_deconstruct<core::byte_array::ByteArray>;
libfunc u32_overflowing_add = u32_overflowing_add;
libfunc u32_overflowing_sub = u32_overflowing_sub;
libfunc u128s_from_felt252 = u128s_from_felt252;
libfunc const_as_immediate<Const<u128, 0>> = const_as_immediate<Const<u128, 0>>;
libfunc store_temp<u128> = store_temp<u128>;
libfunc function_call<user@core::bytes_31::one_shift_left_bytes_u128> = function_call<user@core::bytes_31::one_shift_left_bytes_u128>;
libfunc enum_match<core::panics::PanicResult::<(core::integer::u128,)>> = enum_match<core::panics::PanicResult::<(core::integer::u128,)>>;
libfunc struct_deconstruct<Tuple<u128>> = struct_deconstruct<Tuple<u128>>;
libfunc u128_is_zero = u128_is_zero;
libfunc drop<Array<bytes31>> = drop<Array<bytes31>>;
libfunc drop<u128> = drop<u128>;
libfunc u128_safe_divmod = u128_safe_divmod;
libfunc u128_to_felt252 = u128_to_felt252;
libfunc const_as_immediate<Const<felt252, 340282366920938463463374607431768211456>> = const_as_immediate<Const<felt252, 340282366920938463463374607431768211456>>;
libfunc felt252_mul = felt252_mul;
libfunc felt252_add = felt252_add;
libfunc const_as_immediate<Const<felt252, 155785504329508738615720351733824384887>> = const_as_immediate<Const<felt252, 155785504329508738615720351733824384887>>;
libfunc bytes31_try_from_felt252 = bytes31_try_from_felt252;
libfunc array_append<bytes31> = array_append<bytes31>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<Array<felt252>> = rename<Array<felt252>>;
libfunc enum_init<core::panics::PanicResult::<(core::byte_array::ByteArray, ())>, 1> = enum_init<core::panics::PanicResult::<(core::byte_array::ByteArray, ())>, 1>;
libfunc store_temp<core::panics::PanicResult::<(core::byte_array::ByteArray, ())>> = store_temp<core::panics::PanicResult::<(core::byte_array::ByteArray, ())>>;
libfunc rename<core::byte_array::ByteArray> = rename<core::byte_array::ByteArray>;
libfunc struct_construct<Tuple<core::byte_array::ByteArray, Unit>> = struct_construct<Tuple<core::byte_array::ByteArray, Unit>>;
libfunc enum_init<core::panics::PanicResult::<(core::byte_array::ByteArray, ())>, 0> = enum_init<core::panics::PanicResult::<(core::byte_array::ByteArray, ())>, 0>;
libfunc const_as_immediate<Const<felt252, 155785504323917466144735657540098748279>> = const_as_immediate<Const<felt252, 155785504323917466144735657540098748279>>;
libfunc withdraw_gas = withdraw_gas;
libfunc struct_deconstruct<core::array::Span::<core::bytes_31::bytes31>> = struct_deconstruct<core::array::Span::<core::bytes_31::bytes31>>;
libfunc array_snapshot_pop_front<bytes31> = array_snapshot_pop_front<bytes31>;
libfunc enum_init<core::option::Option::<core::box::Box::<@core::bytes_31::bytes31>>, 0> = enum_init<core::option::Option::<core::box::Box::<@core::bytes_31::bytes31>>, 0>;
libfunc store_temp<Snapshot<Array<bytes31>>> = store_temp<Snapshot<Array<bytes31>>>;
libfunc store_temp<core::option::Option::<core::box::Box::<@core::bytes_31::bytes31>>> = store_temp<core::option::Option::<core::box::Box::<@core::bytes_31::bytes31>>>;
libfunc enum_init<core::option::Option::<core::box::Box::<@core::bytes_31::bytes31>>, 1> = enum_init<core::option::Option::<core::box::Box::<@core::bytes_31::bytes31>>, 1>;
libfunc enum_match<core::option::Option::<core::box::Box::<@core::bytes_31::bytes31>>> = enum_match<core::option::Option::<core::box::Box::<@core::bytes_31::bytes31>>>;
libfunc unbox<bytes31> = unbox<bytes31>;
libfunc rename<bytes31> = rename<bytes31>;
libfunc bytes31_to_felt252 = bytes31_to_felt252;
libfunc struct_construct<Tuple<Array<felt252>, Unit>> = struct_construct<Tuple<Array<felt252>, Unit>>;
libfunc enum_init<core::panics::PanicResult::<(core::array::Array::<core::felt252>, ())>, 0> = enum_init<core::panics::PanicResult::<(core::array::Array::<core::felt252>, ())>, 0>;
libfunc store_temp<core::panics::PanicResult::<(core::array::Array::<core::felt252>, ())>> = store_temp<core::panics::PanicResult::<(core::array::Array::<core::felt252>, ())>>;
libfunc drop<Array<felt252>> = drop<Array<felt252>>;
libfunc drop<core::array::Span::<core::bytes_31::bytes31>> = drop<core::array::Span::<core::bytes_31::bytes31>>;
libfunc const_as_immediate<Const<felt252, 375233589013918064796019>> = const_as_immediate<Const<felt252, 375233589013918064796019>>;
libfunc enum_init<core::panics::PanicResult::<(core::array::Array::<core::felt252>, ())>, 1> = enum_init<core::panics::PanicResult::<(core::array::Array::<core::felt252>, ())>, 1>;
libfunc downcast<u32, BoundedInt<0, 15>> = downcast<u32, BoundedInt<0, 15>>;
libfunc enum_from_bounded_int<index_enum_type<16>> = enum_from_bounded_int<index_enum_type<16>>;
libfunc store_temp<index_enum_type<16>> = store_temp<index_enum_type<16>>;
libfunc enum_match<index_enum_type<16>> = enum_match<index_enum_type<16>>;
libfunc const_as_immediate<Const<u128, 1>> = const_as_immediate<Const<u128, 1>>;
libfunc const_as_immediate<Const<u128, 256>> = const_as_immediate<Const<u128, 256>>;
libfunc const_as_immediate<Const<u128, 65536>> = const_as_immediate<Const<u128, 65536>>;
libfunc const_as_immediate<Const<u128, 16777216>> = const_as_immediate<Const<u128, 16777216>>;
libfunc const_as_immediate<Const<u128, 4294967296>> = const_as_immediate<Const<u128, 4294967296>>;
libfunc const_as_immediate<Const<u128, 1099511627776>> = const_as_immediate<Const<u128, 1099511627776>>;
libfunc const_as_immediate<Const<u128, 281474976710656>> = const_as_immediate<Const<u128, 281474976710656>>;
libfunc const_as_immediate<Const<u128, 72057594037927936>> = const_as_immediate<Const<u128, 72057594037927936>>;
libfunc const_as_immediate<Const<u128, 18446744073709551616>> = const_as_immediate<Const<u128, 18446744073709551616>>;
libfunc const_as_immediate<Const<u128, 4722366482869645213696>> = const_as_immediate<Const<u128, 4722366482869645213696>>;
libfunc const_as_immediate<Const<u128, 1208925819614629174706176>> = const_as_immediate<Const<u128, 1208925819614629174706176>>;
libfunc const_as_immediate<Const<u128, 309485009821345068724781056>> = const_as_immediate<Const<u128, 309485009821345068724781056>>;
libfunc const_as_immediate<Const<u128, 79228162514264337593543950336>> = const_as_immediate<Const<u128, 79228162514264337593543950336>>;
libfunc const_as_immediate<Const<u128, 20282409603651670423947251286016>> = const_as_immediate<Const<u128, 20282409603651670423947251286016>>;
libfunc const_as_immediate<Const<u128, 5192296858534827628530496329220096>> = const_as_immediate<Const<u128, 5192296858534827628530496329220096>>;
libfunc const_as_immediate<Const<u128, 1329227995784915872903807060280344576>> = const_as_immediate<Const<u128, 1329227995784915872903807060280344576>>;
libfunc struct_construct<Tuple<u128>> = struct_construct<Tuple<u128>>;
libfunc enum_init<core::panics::PanicResult::<(core::integer::u128,)>, 0> = enum_init<core::panics::PanicResult::<(core::integer::u128,)>, 0>;
libfunc store_temp<core::panics::PanicResult::<(core::integer::u128,)>> = store_temp<core::panics::PanicResult::<(core::integer::u128,)>>;
libfunc const_as_immediate<Const<felt252, 573087285299505011920718992710461799>> = const_as_immediate<Const<felt252, 573087285299505011920718992710461799>>;
libfunc enum_init<core::panics::PanicResult::<(core::integer::u128,)>, 1> = enum_init<core::panics::PanicResult::<(core::integer::u128,)>, 1>;

alloc_local<AddMod>() -> ([6]); // 0
alloc_local<core::byte_array::ByteArray>() -> ([8]); // 1
alloc_local<RangeCheck96>() -> ([10]); // 2
alloc_local<MulMod>() -> ([12]); // 3
alloc_local<Tuple<BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>>>() -> ([14]); // 4
alloc_local<RangeCheck96>() -> ([16]); // 5
finalize_locals() -> (); // 6
disable_ap_tracking() -> (); // 7
const_as_immediate<Const<BoundedInt<0, 79228162514264337593543950335>, 7>>() -> ([17]); // 8
const_as_immediate<Const<BoundedInt<0, 79228162514264337593543950335>, 0>>() -> ([18]); // 9
const_as_immediate<Const<BoundedInt<0, 79228162514264337593543950335>, 0>>() -> ([19]); // 10
const_as_immediate<Const<BoundedInt<0, 79228162514264337593543950335>, 0>>() -> ([20]); // 11
struct_construct<Tuple<BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>>>([17], [18], [19], [20]) -> ([13]); // 12
store_local<Tuple<BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>>>([14], [13]) -> ([13]); // 13
try_into_circuit_modulus([13]) { fallthrough([21]) 230() }; // 14
branch_align() -> (); // 15
init_circuit_data<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>([3]) -> ([15], [22]); // 16
enum_init<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>, 1>([22]) -> ([23]); // 17
const_as_immediate<Const<BoundedInt<0, 79228162514264337593543950335>, 3>>() -> ([24]); // 18
const_as_immediate<Const<BoundedInt<0, 79228162514264337593543950335>, 0>>() -> ([25]); // 19
const_as_immediate<Const<BoundedInt<0, 79228162514264337593543950335>, 0>>() -> ([26]); // 20
const_as_immediate<Const<BoundedInt<0, 79228162514264337593543950335>, 0>>() -> ([27]); // 21
struct_construct<Tuple<BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>>>([24], [25], [26], [27]) -> ([28]); // 22
store_temp<RangeCheck>([0]) -> ([0]); // 23
store_temp<GasBuiltin>([4]) -> ([4]); // 24
store_temp<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>>([23]) -> ([23]); // 25
store_temp<Tuple<BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>>>([28]) -> ([28]); // 26
store_local<RangeCheck96>([16], [15]) -> ([15]); // 27
function_call<user@core::circuit::FillInputResultImpl::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>::next::<[core::internal::BoundedInt::<0, 79228162514264337593543950335>; 4], core::circuit::U96sIntoCircuitInputValue, core::traits::FixedSizedArrayDrop::<core::internal::BoundedInt::<0, 79228162514264337593543950335>, core::internal::BoundedIntDrop::<0, 79228162514264337593543950335>, 4>>>([0], [4], [23], [28]) -> ([29], [30], [31]); // 28
enum_match<core::panics::PanicResult::<(core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>,)>>([31]) { fallthrough([32]) 216([33]) }; // 29
branch_align() -> (); // 30
struct_deconstruct<Tuple<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>>>([32]) -> ([34]); // 31
const_as_immediate<Const<BoundedInt<0, 79228162514264337593543950335>, 6>>() -> ([35]); // 32
const_as_immediate<Const<BoundedInt<0, 79228162514264337593543950335>, 0>>() -> ([36]); // 33
const_as_immediate<Const<BoundedInt<0, 79228162514264337593543950335>, 0>>() -> ([37]); // 34
const_as_immediate<Const<BoundedInt<0, 79228162514264337593543950335>, 0>>() -> ([38]); // 35
struct_construct<Tuple<BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>>>([35], [36], [37], [38]) -> ([39]); // 36
store_temp<RangeCheck>([29]) -> ([29]); // 37
store_temp<GasBuiltin>([30]) -> ([30]); // 38
store_temp<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>>([34]) -> ([34]); // 39
store_temp<Tuple<BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>>>([39]) -> ([39]); // 40
function_call<user@core::circuit::FillInputResultImpl::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>::next::<[core::internal::BoundedInt::<0, 79228162514264337593543950335>; 4], core::circuit::U96sIntoCircuitInputValue, core::traits::FixedSizedArrayDrop::<core::internal::BoundedInt::<0, 79228162514264337593543950335>, core::internal::BoundedIntDrop::<0, 79228162514264337593543950335>, 4>>>([29], [30], [34], [39]) -> ([40], [41], [42]); // 41
enum_match<core::panics::PanicResult::<(core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>,)>>([42]) { fallthrough([43]) 202([44]) }; // 42
branch_align() -> (); // 43
struct_deconstruct<Tuple<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>>>([43]) -> ([45]); // 44
store_temp<RangeCheck>([40]) -> ([40]); // 45
store_temp<GasBuiltin>([41]) -> ([41]); // 46
store_temp<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>>([45]) -> ([45]); // 47
function_call<user@core::circuit::FillInputResultImpl::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>::done>([40], [41], [45]) -> ([46], [47], [48]); // 48
enum_match<core::panics::PanicResult::<(core::circuit::CircuitData::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>,)>>([48]) { fallthrough([49]) 188([50]) }; // 49
branch_align() -> (); // 50
get_circuit_descriptor<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>() -> ([51]); // 51
struct_deconstruct<Tuple<CircuitData<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>>>([49]) -> ([52]); // 52
const_as_immediate<Const<BoundedInt<0, 0>, 0>>() -> ([53]); // 53
const_as_immediate<Const<BoundedInt<1, 1>, 1>>() -> ([54]); // 54
store_temp<BoundedInt<0, 0>>([53]) -> ([53]); // 55
store_temp<BoundedInt<1, 1>>([54]) -> ([54]); // 56
eval_circuit<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>([1], [2], [51], [52], [21], [53], [54]) { fallthrough([55], [56], [57]) 74([5], [58], [59], [60]) }; // 57
branch_align() -> (); // 58
drop<CircuitOutputs<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>>([57]) -> (); // 59
drop<Uninitialized<RangeCheck96>>([10]) -> (); // 60
drop<Uninitialized<core::byte_array::ByteArray>>([8]) -> (); // 61
drop<Uninitialized<MulMod>>([12]) -> (); // 62
drop<Uninitialized<AddMod>>([6]) -> (); // 63
struct_construct<Unit>() -> ([61]); // 64
struct_construct<Tuple<Unit>>([61]) -> ([62]); // 65
enum_init<core::panics::PanicResult::<((),)>, 0>([62]) -> ([63]); // 66
store_temp<RangeCheck>([46]) -> ([46]); // 67
store_temp<AddMod>([55]) -> ([55]); // 68
store_temp<MulMod>([56]) -> ([56]); // 69
store_temp<RangeCheck96>([15]) -> ([15]); // 70
store_temp<GasBuiltin>([47]) -> ([47]); // 71
store_temp<core::panics::PanicResult::<((),)>>([63]) -> ([63]); // 72
return([46], [55], [56], [15], [47], [63]); // 73
branch_align() -> (); // 74
drop<CircuitPartialOutputs<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>>([59]) -> (); // 75
const_as_immediate<Const<BoundedInt<0, 0>, 0>>() -> ([64]); // 76
const_as_immediate<Const<BoundedInt<1, 1>, 1>>() -> ([65]); // 77
store_temp<MulMod>([58]) -> ([58]); // 78
store_temp<BoundedInt<0, 0>>([64]) -> ([64]); // 79
store_temp<BoundedInt<1, 1>>([65]) -> ([65]); // 80
circuit_failure_guarantee_verify([15], [58], [60], [64], [65]) -> ([66], [11], [67]); // 81
enable_ap_tracking() -> (); // 82
store_local<AddMod>([6], [5]) -> ([5]); // 83
store_temp<RangeCheck96>([66]) -> ([66]); // 84
store_local<MulMod>([12], [11]) -> ([11]); // 85
u96_limbs_less_than_guarantee_verify<4>([67]) { fallthrough([68]) 101([69]) }; // 86
branch_align() -> (); // 87
u96_limbs_less_than_guarantee_verify<3>([68]) { fallthrough([70]) 98([71]) }; // 88
branch_align() -> (); // 89
u96_limbs_less_than_guarantee_verify<2>([70]) { fallthrough([72]) 95([73]) }; // 90
branch_align() -> (); // 91
u96_single_limb_less_than_guarantee_verify([72]) -> ([74]); // 92
store_temp<U96Guarantee>([74]) -> ([75]); // 93
jump() { 103() }; // 94
branch_align() -> (); // 95
store_temp<U96Guarantee>([73]) -> ([75]); // 96
jump() { 103() }; // 97
branch_align() -> (); // 98
store_temp<U96Guarantee>([71]) -> ([75]); // 99
jump() { 103() }; // 100
branch_align() -> (); // 101
store_temp<U96Guarantee>([69]) -> ([75]); // 102
u96_guarantee_verify([66], [75]) -> ([9]); // 103
array_new<bytes31>() -> ([76]); // 104
const_as_immediate<Const<felt252, 0>>() -> ([77]); // 105
const_as_immediate<Const<u32, 0>>() -> ([78]); // 106
const_as_immediate<Const<felt252, 92342086994883127646987903453339415411>>() -> ([79]); // 107
const_as_immediate<Const<u32, 16>>() -> ([80]); // 108
struct_construct<core::byte_array::ByteArray>([76], [77], [78]) -> ([81]); // 109
store_temp<RangeCheck>([46]) -> ([46]); // 110
store_temp<core::byte_array::ByteArray>([81]) -> ([81]); // 111
store_temp<felt252>([79]) -> ([79]); // 112
store_temp<u32>([80]) -> ([80]); // 113
function_call<user@core::byte_array::ByteArrayImpl::append_word>([46], [81], [79], [80]) -> ([82], [83]); // 114
store_local<RangeCheck96>([10], [9]) -> ([9]); // 115
enum_match<core::panics::PanicResult::<(core::byte_array::ByteArray, ())>>([83]) { fallthrough([84]) 177([85]) }; // 116
branch_align() -> (); // 117
array_new<felt252>() -> ([86]); // 118
const_as_immediate<Const<felt252, 1997209042069643135709344952807065910992472029923670688473712229447419591075>>() -> ([87]); // 119
store_temp<felt252>([87]) -> ([87]); // 120
array_append<felt252>([86], [87]) -> ([88]); // 121
struct_deconstruct<Tuple<core::byte_array::ByteArray, Unit>>([84]) -> ([7], [89]); // 122
drop<Unit>([89]) -> (); // 123
store_local<core::byte_array::ByteArray>([8], [7]) -> ([7]); // 124
snapshot_take<core::byte_array::ByteArray>([7]) -> ([90], [91]); // 125
drop<core::byte_array::ByteArray>([90]) -> (); // 126
dup<Snapshot<core::byte_array::ByteArray>>([91]) -> ([91], [92]); // 127
struct_snapshot_deconstruct<core::byte_array::ByteArray>([92]) -> ([93], [94], [95]); // 128
drop<felt252>([94]) -> (); // 129
drop<u32>([95]) -> (); // 130
dup<Snapshot<Array<bytes31>>>([93]) -> ([93], [96]); // 131
array_len<bytes31>([96]) -> ([97]); // 132
u32_to_felt252([97]) -> ([98]); // 133
store_temp<felt252>([98]) -> ([98]); // 134
array_append<felt252>([88], [98]) -> ([99]); // 135
struct_construct<core::array::Span::<core::bytes_31::bytes31>>([93]) -> ([100]); // 136
store_temp<RangeCheck>([82]) -> ([82]); // 137
store_temp<GasBuiltin>([47]) -> ([47]); // 138
store_temp<core::array::Span::<core::bytes_31::bytes31>>([100]) -> ([100]); // 139
store_temp<Array<felt252>>([99]) -> ([99]); // 140
function_call<user@core::array::serialize_array_helper::<core::bytes_31::bytes31, core::serde::into_felt252_based::SerdeImpl::<core::bytes_31::bytes31, core::bytes_31::bytes31Copy, core::bytes_31::Bytes31IntoFelt252, core::bytes_31::Felt252TryIntoBytes31>, core::bytes_31::bytes31Drop>>([82], [47], [100], [99]) -> ([101], [102], [103]); // 141
enable_ap_tracking() -> (); // 142
enum_match<core::panics::PanicResult::<(core::array::Array::<core::felt252>, ())>>([103]) { fallthrough([104]) 161([105]) }; // 143
branch_align() -> (); // 144
struct_deconstruct<Tuple<Array<felt252>, Unit>>([104]) -> ([106], [107]); // 145
drop<Unit>([107]) -> (); // 146
dup<Snapshot<core::byte_array::ByteArray>>([91]) -> ([91], [108]); // 147
struct_snapshot_deconstruct<core::byte_array::ByteArray>([108]) -> ([109], [110], [111]); // 148
drop<Snapshot<Array<bytes31>>>([109]) -> (); // 149
drop<u32>([111]) -> (); // 150
rename<felt252>([110]) -> ([112]); // 151
array_append<felt252>([106], [112]) -> ([113]); // 152
struct_snapshot_deconstruct<core::byte_array::ByteArray>([91]) -> ([114], [115], [116]); // 153
drop<Snapshot<Array<bytes31>>>([114]) -> (); // 154
drop<felt252>([115]) -> (); // 155
rename<u32>([116]) -> ([117]); // 156
u32_to_felt252([117]) -> ([118]); // 157
array_append<felt252>([113], [118]) -> ([119]); // 158
store_temp<Array<felt252>>([119]) -> ([120]); // 159
jump() { 166() }; // 160
branch_align() -> (); // 161
drop<Snapshot<core::byte_array::ByteArray>>([91]) -> (); // 162
struct_deconstruct<Tuple<core::panics::Panic, Array<felt252>>>([105]) -> ([121], [122]); // 163
drop<core::panics::Panic>([121]) -> (); // 164
store_temp<Array<felt252>>([122]) -> ([120]); // 165
disable_ap_tracking() -> (); // 166
struct_construct<core::panics::Panic>() -> ([123]); // 167
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([123], [120]) -> ([124]); // 168
enum_init<core::panics::PanicResult::<((),)>, 1>([124]) -> ([125]); // 169
store_temp<RangeCheck>([101]) -> ([101]); // 170
store_temp<AddMod>([5]) -> ([5]); // 171
store_temp<MulMod>([11]) -> ([11]); // 172
store_temp<RangeCheck96>([9]) -> ([9]); // 173
store_temp<GasBuiltin>([102]) -> ([102]); // 174
store_temp<core::panics::PanicResult::<((),)>>([125]) -> ([125]); // 175
return([101], [5], [11], [9], [102], [125]); // 176
branch_align() -> (); // 177
disable_ap_tracking() -> (); // 178
drop<Uninitialized<core::byte_array::ByteArray>>([8]) -> (); // 179
enum_init<core::panics::PanicResult::<((),)>, 1>([85]) -> ([126]); // 180
store_temp<RangeCheck>([82]) -> ([82]); // 181
store_temp<AddMod>([5]) -> ([5]); // 182
store_temp<MulMod>([11]) -> ([11]); // 183
store_temp<RangeCheck96>([9]) -> ([9]); // 184
store_temp<GasBuiltin>([47]) -> ([47]); // 185
store_temp<core::panics::PanicResult::<((),)>>([126]) -> ([126]); // 186
return([82], [5], [11], [9], [47], [126]); // 187
branch_align() -> (); // 188
drop<Uninitialized<RangeCheck96>>([10]) -> (); // 189
drop<Uninitialized<core::byte_array::ByteArray>>([8]) -> (); // 190
drop<Uninitialized<MulMod>>([12]) -> (); // 191
drop<Uninitialized<AddMod>>([6]) -> (); // 192
drop<CircuitModulus>([21]) -> (); // 193
enum_init<core::panics::PanicResult::<((),)>, 1>([50]) -> ([127]); // 194
store_temp<RangeCheck>([46]) -> ([46]); // 195
store_temp<AddMod>([1]) -> ([1]); // 196
store_temp<MulMod>([2]) -> ([2]); // 197
store_temp<RangeCheck96>([15]) -> ([15]); // 198
store_temp<GasBuiltin>([47]) -> ([47]); // 199
store_temp<core::panics::PanicResult::<((),)>>([127]) -> ([127]); // 200
return([46], [1], [2], [15], [47], [127]); // 201
branch_align() -> (); // 202
drop<CircuitModulus>([21]) -> (); // 203
drop<Uninitialized<RangeCheck96>>([10]) -> (); // 204
drop<Uninitialized<core::byte_array::ByteArray>>([8]) -> (); // 205
drop<Uninitialized<MulMod>>([12]) -> (); // 206
drop<Uninitialized<AddMod>>([6]) -> (); // 207
enum_init<core::panics::PanicResult::<((),)>, 1>([44]) -> ([128]); // 208
store_temp<RangeCheck>([40]) -> ([40]); // 209
store_temp<AddMod>([1]) -> ([1]); // 210
store_temp<MulMod>([2]) -> ([2]); // 211
store_temp<RangeCheck96>([15]) -> ([15]); // 212
store_temp<GasBuiltin>([41]) -> ([41]); // 213
store_temp<core::panics::PanicResult::<((),)>>([128]) -> ([128]); // 214
return([40], [1], [2], [15], [41], [128]); // 215
branch_align() -> (); // 216
drop<CircuitModulus>([21]) -> (); // 217
drop<Uninitialized<RangeCheck96>>([10]) -> (); // 218
drop<Uninitialized<core::byte_array::ByteArray>>([8]) -> (); // 219
drop<Uninitialized<MulMod>>([12]) -> (); // 220
drop<Uninitialized<AddMod>>([6]) -> (); // 221
enum_init<core::panics::PanicResult::<((),)>, 1>([33]) -> ([129]); // 222
store_temp<RangeCheck>([29]) -> ([29]); // 223
store_temp<AddMod>([1]) -> ([1]); // 224
store_temp<MulMod>([2]) -> ([2]); // 225
store_temp<RangeCheck96>([15]) -> ([15]); // 226
store_temp<GasBuiltin>([30]) -> ([30]); // 227
store_temp<core::panics::PanicResult::<((),)>>([129]) -> ([129]); // 228
return([29], [1], [2], [15], [30], [129]); // 229
branch_align() -> (); // 230
drop<Uninitialized<RangeCheck96>>([10]) -> (); // 231
drop<Uninitialized<core::byte_array::ByteArray>>([8]) -> (); // 232
drop<Uninitialized<MulMod>>([12]) -> (); // 233
drop<Uninitialized<AddMod>>([6]) -> (); // 234
drop<Uninitialized<RangeCheck96>>([16]) -> (); // 235
array_new<felt252>() -> ([130]); // 236
const_as_immediate<Const<felt252, 29721761890975875353235833581453094220424382983267374>>() -> ([131]); // 237
store_temp<felt252>([131]) -> ([131]); // 238
array_append<felt252>([130], [131]) -> ([132]); // 239
struct_construct<core::panics::Panic>() -> ([133]); // 240
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([133], [132]) -> ([134]); // 241
enum_init<core::panics::PanicResult::<((),)>, 1>([134]) -> ([135]); // 242
store_temp<RangeCheck>([0]) -> ([0]); // 243
store_temp<AddMod>([1]) -> ([1]); // 244
store_temp<MulMod>([2]) -> ([2]); // 245
store_temp<RangeCheck96>([3]) -> ([3]); // 246
store_temp<GasBuiltin>([4]) -> ([4]); // 247
store_temp<core::panics::PanicResult::<((),)>>([135]) -> ([135]); // 248
return([0], [1], [2], [3], [4], [135]); // 249
alloc_local<core::byte_array::ByteArray>() -> ([5]); // 250
finalize_locals() -> (); // 251
disable_ap_tracking() -> (); // 252
enum_match<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>>([2]) { fallthrough([6]) 333([7]) }; // 253
branch_align() -> (); // 254
drop<CircuitData<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>>([6]) -> (); // 255
drop<Tuple<BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>>>([3]) -> (); // 256
array_new<bytes31>() -> ([8]); // 257
const_as_immediate<Const<felt252, 0>>() -> ([9]); // 258
const_as_immediate<Const<u32, 0>>() -> ([10]); // 259
const_as_immediate<Const<felt252, 26913677086973030051406221357623718750637972950955665348321109348>>() -> ([11]); // 260
const_as_immediate<Const<u32, 27>>() -> ([12]); // 261
struct_construct<core::byte_array::ByteArray>([8], [9], [10]) -> ([13]); // 262
store_temp<RangeCheck>([0]) -> ([0]); // 263
store_temp<core::byte_array::ByteArray>([13]) -> ([13]); // 264
store_temp<felt252>([11]) -> ([11]); // 265
store_temp<u32>([12]) -> ([12]); // 266
function_call<user@core::byte_array::ByteArrayImpl::append_word>([0], [13], [11], [12]) -> ([14], [15]); // 267
enum_match<core::panics::PanicResult::<(core::byte_array::ByteArray, ())>>([15]) { fallthrough([16]) 326([17]) }; // 268
branch_align() -> (); // 269
array_new<felt252>() -> ([18]); // 270
const_as_immediate<Const<felt252, 1997209042069643135709344952807065910992472029923670688473712229447419591075>>() -> ([19]); // 271
store_temp<felt252>([19]) -> ([19]); // 272
array_append<felt252>([18], [19]) -> ([20]); // 273
struct_deconstruct<Tuple<core::byte_array::ByteArray, Unit>>([16]) -> ([4], [21]); // 274
drop<Unit>([21]) -> (); // 275
store_local<core::byte_array::ByteArray>([5], [4]) -> ([4]); // 276
snapshot_take<core::byte_array::ByteArray>([4]) -> ([22], [23]); // 277
drop<core::byte_array::ByteArray>([22]) -> (); // 278
dup<Snapshot<core::byte_array::ByteArray>>([23]) -> ([23], [24]); // 279
struct_snapshot_deconstruct<core::byte_array::ByteArray>([24]) -> ([25], [26], [27]); // 280
drop<felt252>([26]) -> (); // 281
drop<u32>([27]) -> (); // 282
dup<Snapshot<Array<bytes31>>>([25]) -> ([25], [28]); // 283
array_len<bytes31>([28]) -> ([29]); // 284
u32_to_felt252([29]) -> ([30]); // 285
store_temp<felt252>([30]) -> ([30]); // 286
array_append<felt252>([20], [30]) -> ([31]); // 287
struct_construct<core::array::Span::<core::bytes_31::bytes31>>([25]) -> ([32]); // 288
store_temp<RangeCheck>([14]) -> ([14]); // 289
store_temp<GasBuiltin>([1]) -> ([1]); // 290
store_temp<core::array::Span::<core::bytes_31::bytes31>>([32]) -> ([32]); // 291
store_temp<Array<felt252>>([31]) -> ([31]); // 292
function_call<user@core::array::serialize_array_helper::<core::bytes_31::bytes31, core::serde::into_felt252_based::SerdeImpl::<core::bytes_31::bytes31, core::bytes_31::bytes31Copy, core::bytes_31::Bytes31IntoFelt252, core::bytes_31::Felt252TryIntoBytes31>, core::bytes_31::bytes31Drop>>([14], [1], [32], [31]) -> ([33], [34], [35]); // 293
enable_ap_tracking() -> (); // 294
enum_match<core::panics::PanicResult::<(core::array::Array::<core::felt252>, ())>>([35]) { fallthrough([36]) 313([37]) }; // 295
branch_align() -> (); // 296
struct_deconstruct<Tuple<Array<felt252>, Unit>>([36]) -> ([38], [39]); // 297
drop<Unit>([39]) -> (); // 298
dup<Snapshot<core::byte_array::ByteArray>>([23]) -> ([23], [40]); // 299
struct_snapshot_deconstruct<core::byte_array::ByteArray>([40]) -> ([41], [42], [43]); // 300
drop<Snapshot<Array<bytes31>>>([41]) -> (); // 301
drop<u32>([43]) -> (); // 302
rename<felt252>([42]) -> ([44]); // 303
array_append<felt252>([38], [44]) -> ([45]); // 304
struct_snapshot_deconstruct<core::byte_array::ByteArray>([23]) -> ([46], [47], [48]); // 305
drop<Snapshot<Array<bytes31>>>([46]) -> (); // 306
drop<felt252>([47]) -> (); // 307
rename<u32>([48]) -> ([49]); // 308
u32_to_felt252([49]) -> ([50]); // 309
array_append<felt252>([45], [50]) -> ([51]); // 310
store_temp<Array<felt252>>([51]) -> ([52]); // 311
jump() { 318() }; // 312
branch_align() -> (); // 313
drop<Snapshot<core::byte_array::ByteArray>>([23]) -> (); // 314
struct_deconstruct<Tuple<core::panics::Panic, Array<felt252>>>([37]) -> ([53], [54]); // 315
drop<core::panics::Panic>([53]) -> (); // 316
store_temp<Array<felt252>>([54]) -> ([52]); // 317
disable_ap_tracking() -> (); // 318
struct_construct<core::panics::Panic>() -> ([55]); // 319
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([55], [52]) -> ([56]); // 320
enum_init<core::panics::PanicResult::<(core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>,)>, 1>([56]) -> ([57]); // 321
store_temp<RangeCheck>([33]) -> ([33]); // 322
store_temp<GasBuiltin>([34]) -> ([34]); // 323
store_temp<core::panics::PanicResult::<(core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>,)>>([57]) -> ([57]); // 324
return([33], [34], [57]); // 325
branch_align() -> (); // 326
drop<Uninitialized<core::byte_array::ByteArray>>([5]) -> (); // 327
enum_init<core::panics::PanicResult::<(core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>,)>, 1>([17]) -> ([58]); // 328
store_temp<RangeCheck>([14]) -> ([14]); // 329
store_temp<GasBuiltin>([1]) -> ([1]); // 330
store_temp<core::panics::PanicResult::<(core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>,)>>([58]) -> ([58]); // 331
return([14], [1], [58]); // 332
branch_align() -> (); // 333
drop<Uninitialized<core::byte_array::ByteArray>>([5]) -> (); // 334
struct_deconstruct<Tuple<BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>>>([3]) -> ([59], [60], [61], [62]); // 335
into_u96_guarantee<BoundedInt<0, 79228162514264337593543950335>>([59]) -> ([63]); // 336
into_u96_guarantee<BoundedInt<0, 79228162514264337593543950335>>([60]) -> ([64]); // 337
into_u96_guarantee<BoundedInt<0, 79228162514264337593543950335>>([61]) -> ([65]); // 338
into_u96_guarantee<BoundedInt<0, 79228162514264337593543950335>>([62]) -> ([66]); // 339
struct_construct<Tuple<U96Guarantee, U96Guarantee, U96Guarantee, U96Guarantee>>([63], [64], [65], [66]) -> ([67]); // 340
store_temp<Tuple<U96Guarantee, U96Guarantee, U96Guarantee, U96Guarantee>>([67]) -> ([67]); // 341
fill_circuit_input<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>([7], [67]) { fallthrough([68]) 347([69]) }; // 342
branch_align() -> (); // 343
enum_init<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>, 0>([68]) -> ([70]); // 344
store_temp<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>>([70]) -> ([71]); // 345
jump() { 350() }; // 346
branch_align() -> (); // 347
enum_init<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>, 1>([69]) -> ([72]); // 348
store_temp<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>>([72]) -> ([71]); // 349
struct_construct<Tuple<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>>>([71]) -> ([73]); // 350
enum_init<core::panics::PanicResult::<(core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>,)>, 0>([73]) -> ([74]); // 351
store_temp<RangeCheck>([0]) -> ([0]); // 352
store_temp<GasBuiltin>([1]) -> ([1]); // 353
store_temp<core::panics::PanicResult::<(core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>,)>>([74]) -> ([74]); // 354
return([0], [1], [74]); // 355
alloc_local<core::byte_array::ByteArray>() -> ([4]); // 356
finalize_locals() -> (); // 357
disable_ap_tracking() -> (); // 358
enum_match<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>>([2]) { fallthrough([5]) 368([6]) }; // 359
branch_align() -> (); // 360
drop<Uninitialized<core::byte_array::ByteArray>>([4]) -> (); // 361
struct_construct<Tuple<CircuitData<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>>>([5]) -> ([7]); // 362
enum_init<core::panics::PanicResult::<(core::circuit::CircuitData::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>,)>, 0>([7]) -> ([8]); // 363
store_temp<RangeCheck>([0]) -> ([0]); // 364
store_temp<GasBuiltin>([1]) -> ([1]); // 365
store_temp<core::panics::PanicResult::<(core::circuit::CircuitData::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>,)>>([8]) -> ([8]); // 366
return([0], [1], [8]); // 367
branch_align() -> (); // 368
drop<CircuitInputAccumulator<Circuit<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>>([6]) -> (); // 369
array_new<bytes31>() -> ([9]); // 370
const_as_immediate<Const<felt252, 0>>() -> ([10]); // 371
const_as_immediate<Const<u32, 0>>() -> ([11]); // 372
const_as_immediate<Const<felt252, 138583295661092166701491297054433349032460315956105119041111996301516236132>>() -> ([12]); // 373
const_as_immediate<Const<u32, 31>>() -> ([13]); // 374
struct_construct<core::byte_array::ByteArray>([9], [10], [11]) -> ([14]); // 375
store_temp<RangeCheck>([0]) -> ([0]); // 376
store_temp<core::byte_array::ByteArray>([14]) -> ([14]); // 377
store_temp<felt252>([12]) -> ([12]); // 378
store_temp<u32>([13]) -> ([13]); // 379
function_call<user@core::byte_array::ByteArrayImpl::append_word>([0], [14], [12], [13]) -> ([15], [16]); // 380
enum_match<core::panics::PanicResult::<(core::byte_array::ByteArray, ())>>([16]) { fallthrough([17]) 439([18]) }; // 381
branch_align() -> (); // 382
array_new<felt252>() -> ([19]); // 383
const_as_immediate<Const<felt252, 1997209042069643135709344952807065910992472029923670688473712229447419591075>>() -> ([20]); // 384
store_temp<felt252>([20]) -> ([20]); // 385
array_append<felt252>([19], [20]) -> ([21]); // 386
struct_deconstruct<Tuple<core::byte_array::ByteArray, Unit>>([17]) -> ([3], [22]); // 387
drop<Unit>([22]) -> (); // 388
store_local<core::byte_array::ByteArray>([4], [3]) -> ([3]); // 389
snapshot_take<core::byte_array::ByteArray>([3]) -> ([23], [24]); // 390
drop<core::byte_array::ByteArray>([23]) -> (); // 391
dup<Snapshot<core::byte_array::ByteArray>>([24]) -> ([24], [25]); // 392
struct_snapshot_deconstruct<core::byte_array::ByteArray>([25]) -> ([26], [27], [28]); // 393
drop<felt252>([27]) -> (); // 394
drop<u32>([28]) -> (); // 395
dup<Snapshot<Array<bytes31>>>([26]) -> ([26], [29]); // 396
array_len<bytes31>([29]) -> ([30]); // 397
u32_to_felt252([30]) -> ([31]); // 398
store_temp<felt252>([31]) -> ([31]); // 399
array_append<felt252>([21], [31]) -> ([32]); // 400
struct_construct<core::array::Span::<core::bytes_31::bytes31>>([26]) -> ([33]); // 401
store_temp<RangeCheck>([15]) -> ([15]); // 402
store_temp<GasBuiltin>([1]) -> ([1]); // 403
store_temp<core::array::Span::<core::bytes_31::bytes31>>([33]) -> ([33]); // 404
store_temp<Array<felt252>>([32]) -> ([32]); // 405
function_call<user@core::array::serialize_array_helper::<core::bytes_31::bytes31, core::serde::into_felt252_based::SerdeImpl::<core::bytes_31::bytes31, core::bytes_31::bytes31Copy, core::bytes_31::Bytes31IntoFelt252, core::bytes_31::Felt252TryIntoBytes31>, core::bytes_31::bytes31Drop>>([15], [1], [33], [32]) -> ([34], [35], [36]); // 406
enable_ap_tracking() -> (); // 407
enum_match<core::panics::PanicResult::<(core::array::Array::<core::felt252>, ())>>([36]) { fallthrough([37]) 426([38]) }; // 408
branch_align() -> (); // 409
struct_deconstruct<Tuple<Array<felt252>, Unit>>([37]) -> ([39], [40]); // 410
drop<Unit>([40]) -> (); // 411
dup<Snapshot<core::byte_array::ByteArray>>([24]) -> ([24], [41]); // 412
struct_snapshot_deconstruct<core::byte_array::ByteArray>([41]) -> ([42], [43], [44]); // 413
drop<Snapshot<Array<bytes31>>>([42]) -> (); // 414
drop<u32>([44]) -> (); // 415
rename<felt252>([43]) -> ([45]); // 416
array_append<felt252>([39], [45]) -> ([46]); // 417
struct_snapshot_deconstruct<core::byte_array::ByteArray>([24]) -> ([47], [48], [49]); // 418
drop<Snapshot<Array<bytes31>>>([47]) -> (); // 419
drop<felt252>([48]) -> (); // 420
rename<u32>([49]) -> ([50]); // 421
u32_to_felt252([50]) -> ([51]); // 422
array_append<felt252>([46], [51]) -> ([52]); // 423
store_temp<Array<felt252>>([52]) -> ([53]); // 424
jump() { 431() }; // 425
branch_align() -> (); // 426
drop<Snapshot<core::byte_array::ByteArray>>([24]) -> (); // 427
struct_deconstruct<Tuple<core::panics::Panic, Array<felt252>>>([38]) -> ([54], [55]); // 428
drop<core::panics::Panic>([54]) -> (); // 429
store_temp<Array<felt252>>([55]) -> ([53]); // 430
disable_ap_tracking() -> (); // 431
struct_construct<core::panics::Panic>() -> ([56]); // 432
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([56], [53]) -> ([57]); // 433
enum_init<core::panics::PanicResult::<(core::circuit::CircuitData::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>,)>, 1>([57]) -> ([58]); // 434
store_temp<RangeCheck>([34]) -> ([34]); // 435
store_temp<GasBuiltin>([35]) -> ([35]); // 436
store_temp<core::panics::PanicResult::<(core::circuit::CircuitData::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>,)>>([58]) -> ([58]); // 437
return([34], [35], [58]); // 438
branch_align() -> (); // 439
drop<Uninitialized<core::byte_array::ByteArray>>([4]) -> (); // 440
enum_init<core::panics::PanicResult::<(core::circuit::CircuitData::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>,)>, 1>([18]) -> ([59]); // 441
store_temp<RangeCheck>([15]) -> ([15]); // 442
store_temp<GasBuiltin>([1]) -> ([1]); // 443
store_temp<core::panics::PanicResult::<(core::circuit::CircuitData::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>,)>>([59]) -> ([59]); // 444
return([15], [1], [59]); // 445
const_as_immediate<Const<u32, 0>>() -> ([4]); // 446
dup<u32>([3]) -> ([3], [5]); // 447
u32_eq([5], [4]) { fallthrough() 1296() }; // 448
branch_align() -> (); // 449
struct_deconstruct<core::byte_array::ByteArray>([1]) -> ([6], [7], [8]); // 450
dup<u32>([8]) -> ([8], [9]); // 451
dup<u32>([3]) -> ([3], [10]); // 452
u32_overflowing_add([0], [9], [10]) { fallthrough([11], [12]) 1279([13], [14]) }; // 453
branch_align() -> (); // 454
const_as_immediate<Const<u32, 31>>() -> ([15]); // 455
dup<u32>([12]) -> ([12], [16]); // 456
store_temp<u32>([15]) -> ([15]); // 457
u32_overflowing_sub([11], [16], [15]) { fallthrough([17], [18]) 1158([19], [20]) }; // 458
branch_align() -> (); // 459
drop<u32>([18]) -> (); // 460
const_as_immediate<Const<u32, 31>>() -> ([21]); // 461
dup<u32>([12]) -> ([12], [22]); // 462
store_temp<RangeCheck>([17]) -> ([17]); // 463
u32_eq([22], [21]) { fallthrough() 1059() }; // 464
branch_align() -> (); // 465
drop<u32>([3]) -> (); // 466
const_as_immediate<Const<u32, 31>>() -> ([23]); // 467
store_temp<u32>([23]) -> ([23]); // 468
u32_overflowing_sub([17], [12], [23]) { fallthrough([24], [25]) 1043([26], [27]) }; // 469
branch_align() -> (); // 470
const_as_immediate<Const<u32, 16>>() -> ([28]); // 471
dup<u32>([25]) -> ([25], [29]); // 472
store_temp<RangeCheck>([24]) -> ([24]); // 473
u32_eq([29], [28]) { fallthrough() 899() }; // 474
branch_align() -> (); // 475
const_as_immediate<Const<u32, 16>>() -> ([30]); // 476
dup<u32>([25]) -> ([25], [31]); // 477
store_temp<u32>([30]) -> ([30]); // 478
u32_overflowing_sub([24], [31], [30]) { fallthrough([32], [33]) 678([34], [35]) }; // 479
branch_align() -> (); // 480
drop<u32>([33]) -> (); // 481
u128s_from_felt252([32], [2]) { fallthrough([36], [37]) 489([38], [39], [40]) }; // 482
branch_align() -> (); // 483
const_as_immediate<Const<u128, 0>>() -> ([41]); // 484
store_temp<RangeCheck>([36]) -> ([42]); // 485
store_temp<u128>([37]) -> ([43]); // 486
store_temp<u128>([41]) -> ([44]); // 487
jump() { 493() }; // 488
branch_align() -> (); // 489
store_temp<RangeCheck>([38]) -> ([42]); // 490
store_temp<u128>([40]) -> ([43]); // 491
store_temp<u128>([39]) -> ([44]); // 492
const_as_immediate<Const<u32, 16>>() -> ([45]); // 493
dup<u32>([25]) -> ([25], [46]); // 494
store_temp<u32>([45]) -> ([45]); // 495
u32_overflowing_sub([42], [46], [45]) { fallthrough([47], [48]) 658([49], [50]) }; // 496
branch_align() -> (); // 497
store_temp<RangeCheck>([47]) -> ([47]); // 498
store_temp<u32>([48]) -> ([48]); // 499
function_call<user@core::bytes_31::one_shift_left_bytes_u128>([47], [48]) -> ([51], [52]); // 500
enum_match<core::panics::PanicResult::<(core::integer::u128,)>>([52]) { fallthrough([53]) 646([54]) }; // 501
branch_align() -> (); // 502
struct_deconstruct<Tuple<u128>>([53]) -> ([55]); // 503
u128_is_zero([55]) { fallthrough() 519([56]) }; // 504
branch_align() -> (); // 505
drop<Array<bytes31>>([6]) -> (); // 506
drop<u32>([25]) -> (); // 507
drop<u32>([8]) -> (); // 508
drop<u128>([43]) -> (); // 509
drop<felt252>([7]) -> (); // 510
drop<u128>([44]) -> (); // 511
array_new<felt252>() -> ([57]); // 512
const_as_immediate<Const<felt252, 29721761890975875353235833581453094220424382983267374>>() -> ([58]); // 513
store_temp<felt252>([58]) -> ([58]); // 514
array_append<felt252>([57], [58]) -> ([59]); // 515
store_temp<RangeCheck>([51]) -> ([60]); // 516
store_temp<Array<felt252>>([59]) -> ([61]); // 517
jump() { 672() }; // 518
branch_align() -> (); // 519
u128_safe_divmod([51], [44], [56]) -> ([62], [63], [64]); // 520
u128_to_felt252([64]) -> ([65]); // 521
const_as_immediate<Const<felt252, 340282366920938463463374607431768211456>>() -> ([66]); // 522
felt252_mul([65], [66]) -> ([67]); // 523
u128_to_felt252([43]) -> ([68]); // 524
store_temp<felt252>([67]) -> ([67]); // 525
felt252_add([67], [68]) -> ([69]); // 526
u128_to_felt252([63]) -> ([70]); // 527
const_as_immediate<Const<u32, 31>>() -> ([71]); // 528
dup<u32>([8]) -> ([8], [72]); // 529
store_temp<u32>([71]) -> ([71]); // 530
store_temp<felt252>([69]) -> ([69]); // 531
u32_overflowing_sub([62], [71], [72]) { fallthrough([73], [74]) 631([75], [76]) }; // 532
branch_align() -> (); // 533
const_as_immediate<Const<u32, 16>>() -> ([77]); // 534
dup<u32>([74]) -> ([74], [78]); // 535
store_temp<u32>([77]) -> ([77]); // 536
u32_overflowing_sub([73], [78], [77]) { fallthrough([79], [80]) 583([81], [82]) }; // 537
branch_align() -> (); // 538
drop<u32>([80]) -> (); // 539
const_as_immediate<Const<u32, 16>>() -> ([83]); // 540
store_temp<u32>([83]) -> ([83]); // 541
u32_overflowing_sub([79], [74], [83]) { fallthrough([84], [85]) 568([86], [87]) }; // 542
branch_align() -> (); // 543
store_temp<RangeCheck>([84]) -> ([84]); // 544
store_temp<u32>([85]) -> ([85]); // 545
function_call<user@core::bytes_31::one_shift_left_bytes_u128>([84], [85]) -> ([88], [89]); // 546
enum_match<core::panics::PanicResult::<(core::integer::u128,)>>([89]) { fallthrough([90]) 556([91]) }; // 547
branch_align() -> (); // 548
struct_deconstruct<Tuple<u128>>([90]) -> ([92]); // 549
u128_to_felt252([92]) -> ([93]); // 550
const_as_immediate<Const<felt252, 340282366920938463463374607431768211456>>() -> ([94]); // 551
felt252_mul([93], [94]) -> ([95]); // 552
store_temp<RangeCheck>([88]) -> ([96]); // 553
store_temp<felt252>([95]) -> ([97]); // 554
jump() { 594() }; // 555
branch_align() -> (); // 556
drop<Array<bytes31>>([6]) -> (); // 557
drop<u32>([25]) -> (); // 558
drop<u32>([8]) -> (); // 559
drop<felt252>([69]) -> (); // 560
drop<felt252>([70]) -> (); // 561
drop<felt252>([7]) -> (); // 562
struct_deconstruct<Tuple<core::panics::Panic, Array<felt252>>>([91]) -> ([98], [99]); // 563
drop<core::panics::Panic>([98]) -> (); // 564
store_temp<RangeCheck>([88]) -> ([100]); // 565
store_temp<Array<felt252>>([99]) -> ([101]); // 566
jump() { 628() }; // 567
branch_align() -> (); // 568
drop<u32>([87]) -> (); // 569
drop<Array<bytes31>>([6]) -> (); // 570
drop<u32>([25]) -> (); // 571
drop<u32>([8]) -> (); // 572
drop<felt252>([69]) -> (); // 573
drop<felt252>([7]) -> (); // 574
drop<felt252>([70]) -> (); // 575
array_new<felt252>() -> ([102]); // 576
const_as_immediate<Const<felt252, 155785504329508738615720351733824384887>>() -> ([103]); // 577
store_temp<felt252>([103]) -> ([103]); // 578
array_append<felt252>([102], [103]) -> ([104]); // 579
store_temp<RangeCheck>([86]) -> ([100]); // 580
store_temp<Array<felt252>>([104]) -> ([101]); // 581
jump() { 628() }; // 582
branch_align() -> (); // 583
drop<u32>([82]) -> (); // 584
store_temp<RangeCheck>([81]) -> ([81]); // 585
store_temp<u32>([74]) -> ([74]); // 586
function_call<user@core::bytes_31::one_shift_left_bytes_u128>([81], [74]) -> ([105], [106]); // 587
enum_match<core::panics::PanicResult::<(core::integer::u128,)>>([106]) { fallthrough([107]) 617([108]) }; // 588
branch_align() -> (); // 589
struct_deconstruct<Tuple<u128>>([107]) -> ([109]); // 590
u128_to_felt252([109]) -> ([110]); // 591
store_temp<RangeCheck>([105]) -> ([96]); // 592
store_temp<felt252>([110]) -> ([97]); // 593
felt252_mul([7], [97]) -> ([111]); // 594
store_temp<felt252>([111]) -> ([111]); // 595
felt252_add([70], [111]) -> ([112]); // 596
store_temp<felt252>([112]) -> ([112]); // 597
bytes31_try_from_felt252([96], [112]) { fallthrough([113], [114]) 605([115]) }; // 598
branch_align() -> (); // 599
array_append<bytes31>([6], [114]) -> ([116]); // 600
struct_construct<core::byte_array::ByteArray>([116], [69], [8]) -> ([117]); // 601
store_temp<RangeCheck>([113]) -> ([118]); // 602
store_temp<core::byte_array::ByteArray>([117]) -> ([119]); // 603
jump() { 809() }; // 604
branch_align() -> (); // 605
drop<Array<bytes31>>([6]) -> (); // 606
drop<u32>([25]) -> (); // 607
drop<u32>([8]) -> (); // 608
drop<felt252>([69]) -> (); // 609
array_new<felt252>() -> ([120]); // 610
const_as_immediate<Const<felt252, 29721761890975875353235833581453094220424382983267374>>() -> ([121]); // 611
store_temp<felt252>([121]) -> ([121]); // 612
array_append<felt252>([120], [121]) -> ([122]); // 613
store_temp<RangeCheck>([115]) -> ([60]); // 614
store_temp<Array<felt252>>([122]) -> ([61]); // 615
jump() { 672() }; // 616
branch_align() -> (); // 617
drop<Array<bytes31>>([6]) -> (); // 618
drop<u32>([25]) -> (); // 619
drop<u32>([8]) -> (); // 620
drop<felt252>([69]) -> (); // 621
drop<felt252>([70]) -> (); // 622
drop<felt252>([7]) -> (); // 623
struct_deconstruct<Tuple<core::panics::Panic, Array<felt252>>>([108]) -> ([123], [124]); // 624
drop<core::panics::Panic>([123]) -> (); // 625
store_temp<RangeCheck>([105]) -> ([100]); // 626
store_temp<Array<felt252>>([124]) -> ([101]); // 627
rename<RangeCheck>([100]) -> ([60]); // 628
rename<Array<felt252>>([101]) -> ([61]); // 629
jump() { 672() }; // 630
branch_align() -> (); // 631
drop<u32>([76]) -> (); // 632
drop<Array<bytes31>>([6]) -> (); // 633
drop<u32>([25]) -> (); // 634
drop<u32>([8]) -> (); // 635
drop<felt252>([69]) -> (); // 636
drop<felt252>([7]) -> (); // 637
drop<felt252>([70]) -> (); // 638
array_new<felt252>() -> ([125]); // 639
const_as_immediate<Const<felt252, 155785504329508738615720351733824384887>>() -> ([126]); // 640
store_temp<felt252>([126]) -> ([126]); // 641
array_append<felt252>([125], [126]) -> ([127]); // 642
store_temp<RangeCheck>([75]) -> ([60]); // 643
store_temp<Array<felt252>>([127]) -> ([61]); // 644
jump() { 672() }; // 645
branch_align() -> (); // 646
drop<Array<bytes31>>([6]) -> (); // 647
drop<u32>([25]) -> (); // 648
drop<u32>([8]) -> (); // 649
drop<u128>([43]) -> (); // 650
drop<felt252>([7]) -> (); // 651
drop<u128>([44]) -> (); // 652
struct_deconstruct<Tuple<core::panics::Panic, Array<felt252>>>([54]) -> ([128], [129]); // 653
drop<core::panics::Panic>([128]) -> (); // 654
store_temp<RangeCheck>([51]) -> ([60]); // 655
store_temp<Array<felt252>>([129]) -> ([61]); // 656
jump() { 672() }; // 657
branch_align() -> (); // 658
drop<u32>([50]) -> (); // 659
drop<u128>([44]) -> (); // 660
drop<Array<bytes31>>([6]) -> (); // 661
drop<u32>([25]) -> (); // 662
drop<u32>([8]) -> (); // 663
drop<u128>([43]) -> (); // 664
drop<felt252>([7]) -> (); // 665
array_new<felt252>() -> ([130]); // 666
const_as_immediate<Const<felt252, 155785504329508738615720351733824384887>>() -> ([131]); // 667
store_temp<felt252>([131]) -> ([131]); // 668
array_append<felt252>([130], [131]) -> ([132]); // 669
store_temp<RangeCheck>([49]) -> ([60]); // 670
store_temp<Array<felt252>>([132]) -> ([61]); // 671
struct_construct<core::panics::Panic>() -> ([133]); // 672
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([133], [61]) -> ([134]); // 673
enum_init<core::panics::PanicResult::<(core::byte_array::ByteArray, ())>, 1>([134]) -> ([135]); // 674
store_temp<RangeCheck>([60]) -> ([60]); // 675
store_temp<core::panics::PanicResult::<(core::byte_array::ByteArray, ())>>([135]) -> ([135]); // 676
return([60], [135]); // 677
branch_align() -> (); // 678
drop<u32>([35]) -> (); // 679
u128s_from_felt252([34], [2]) { fallthrough([136], [137]) 687([138], [139], [140]) }; // 680
branch_align() -> (); // 681
const_as_immediate<Const<u128, 0>>() -> ([141]); // 682
store_temp<RangeCheck>([136]) -> ([142]); // 683
store_temp<u128>([137]) -> ([143]); // 684
store_temp<u128>([141]) -> ([144]); // 685
jump() { 691() }; // 686
branch_align() -> (); // 687
store_temp<RangeCheck>([138]) -> ([142]); // 688
store_temp<u128>([140]) -> ([143]); // 689
store_temp<u128>([139]) -> ([144]); // 690
store_temp<RangeCheck>([142]) -> ([142]); // 691
dup<u32>([25]) -> ([25], [145]); // 692
store_temp<u32>([145]) -> ([145]); // 693
function_call<user@core::bytes_31::one_shift_left_bytes_u128>([142], [145]) -> ([146], [147]); // 694
enum_match<core::panics::PanicResult::<(core::integer::u128,)>>([147]) { fallthrough([148]) 882([149]) }; // 695
branch_align() -> (); // 696
struct_deconstruct<Tuple<u128>>([148]) -> ([150]); // 697
u128_is_zero([150]) { fallthrough() 713([151]) }; // 698
branch_align() -> (); // 699
drop<Array<bytes31>>([6]) -> (); // 700
drop<u32>([25]) -> (); // 701
drop<u32>([8]) -> (); // 702
drop<u128>([144]) -> (); // 703
drop<felt252>([7]) -> (); // 704
drop<u128>([143]) -> (); // 705
array_new<felt252>() -> ([152]); // 706
const_as_immediate<Const<felt252, 29721761890975875353235833581453094220424382983267374>>() -> ([153]); // 707
store_temp<felt252>([153]) -> ([153]); // 708
array_append<felt252>([152], [153]) -> ([154]); // 709
store_temp<RangeCheck>([146]) -> ([155]); // 710
store_temp<Array<felt252>>([154]) -> ([156]); // 711
jump() { 893() }; // 712
branch_align() -> (); // 713
u128_safe_divmod([146], [143], [151]) -> ([157], [158], [159]); // 714
u128_to_felt252([144]) -> ([160]); // 715
const_as_immediate<Const<u32, 16>>() -> ([161]); // 716
dup<u32>([25]) -> ([25], [162]); // 717
store_temp<u32>([161]) -> ([161]); // 718
u32_overflowing_sub([157], [161], [162]) { fallthrough([163], [164]) 866([165], [166]) }; // 719
branch_align() -> (); // 720
store_temp<RangeCheck>([163]) -> ([163]); // 721
store_temp<u32>([164]) -> ([164]); // 722
function_call<user@core::bytes_31::one_shift_left_bytes_u128>([163], [164]) -> ([167], [168]); // 723
enum_match<core::panics::PanicResult::<(core::integer::u128,)>>([168]) { fallthrough([169]) 853([170]) }; // 724
branch_align() -> (); // 725
struct_deconstruct<Tuple<u128>>([169]) -> ([171]); // 726
u128_to_felt252([171]) -> ([172]); // 727
felt252_mul([160], [172]) -> ([173]); // 728
u128_to_felt252([158]) -> ([174]); // 729
store_temp<felt252>([173]) -> ([173]); // 730
felt252_add([173], [174]) -> ([175]); // 731
u128_to_felt252([159]) -> ([176]); // 732
const_as_immediate<Const<u32, 31>>() -> ([177]); // 733
dup<u32>([8]) -> ([8], [178]); // 734
store_temp<u32>([177]) -> ([177]); // 735
store_temp<felt252>([175]) -> ([175]); // 736
u32_overflowing_sub([167], [177], [178]) { fallthrough([179], [180]) 838([181], [182]) }; // 737
branch_align() -> (); // 738
const_as_immediate<Const<u32, 16>>() -> ([183]); // 739
dup<u32>([180]) -> ([180], [184]); // 740
store_temp<u32>([183]) -> ([183]); // 741
u32_overflowing_sub([179], [184], [183]) { fallthrough([185], [186]) 788([187], [188]) }; // 742
branch_align() -> (); // 743
drop<u32>([186]) -> (); // 744
const_as_immediate<Const<u32, 16>>() -> ([189]); // 745
store_temp<u32>([189]) -> ([189]); // 746
u32_overflowing_sub([185], [180], [189]) { fallthrough([190], [191]) 773([192], [193]) }; // 747
branch_align() -> (); // 748
store_temp<RangeCheck>([190]) -> ([190]); // 749
store_temp<u32>([191]) -> ([191]); // 750
function_call<user@core::bytes_31::one_shift_left_bytes_u128>([190], [191]) -> ([194], [195]); // 751
enum_match<core::panics::PanicResult::<(core::integer::u128,)>>([195]) { fallthrough([196]) 761([197]) }; // 752
branch_align() -> (); // 753
struct_deconstruct<Tuple<u128>>([196]) -> ([198]); // 754
u128_to_felt252([198]) -> ([199]); // 755
const_as_immediate<Const<felt252, 340282366920938463463374607431768211456>>() -> ([200]); // 756
felt252_mul([199], [200]) -> ([201]); // 757
store_temp<RangeCheck>([194]) -> ([202]); // 758
store_temp<felt252>([201]) -> ([203]); // 759
jump() { 799() }; // 760
branch_align() -> (); // 761
drop<Array<bytes31>>([6]) -> (); // 762
drop<u32>([25]) -> (); // 763
drop<u32>([8]) -> (); // 764
drop<felt252>([176]) -> (); // 765
drop<felt252>([175]) -> (); // 766
drop<felt252>([7]) -> (); // 767
struct_deconstruct<Tuple<core::panics::Panic, Array<felt252>>>([197]) -> ([204], [205]); // 768
drop<core::panics::Panic>([204]) -> (); // 769
store_temp<RangeCheck>([194]) -> ([206]); // 770
store_temp<Array<felt252>>([205]) -> ([207]); // 771
jump() { 835() }; // 772
branch_align() -> (); // 773
drop<u32>([193]) -> (); // 774
drop<Array<bytes31>>([6]) -> (); // 775
drop<u32>([25]) -> (); // 776
drop<u32>([8]) -> (); // 777
drop<felt252>([176]) -> (); // 778
drop<felt252>([7]) -> (); // 779
drop<felt252>([175]) -> (); // 780
array_new<felt252>() -> ([208]); // 781
const_as_immediate<Const<felt252, 155785504329508738615720351733824384887>>() -> ([209]); // 782
store_temp<felt252>([209]) -> ([209]); // 783
array_append<felt252>([208], [209]) -> ([210]); // 784
store_temp<RangeCheck>([192]) -> ([206]); // 785
store_temp<Array<felt252>>([210]) -> ([207]); // 786
jump() { 835() }; // 787
branch_align() -> (); // 788
drop<u32>([188]) -> (); // 789
store_temp<RangeCheck>([187]) -> ([187]); // 790
store_temp<u32>([180]) -> ([180]); // 791
function_call<user@core::bytes_31::one_shift_left_bytes_u128>([187], [180]) -> ([211], [212]); // 792
enum_match<core::panics::PanicResult::<(core::integer::u128,)>>([212]) { fallthrough([213]) 824([214]) }; // 793
branch_align() -> (); // 794
struct_deconstruct<Tuple<u128>>([213]) -> ([215]); // 795
u128_to_felt252([215]) -> ([216]); // 796
store_temp<RangeCheck>([211]) -> ([202]); // 797
store_temp<felt252>([216]) -> ([203]); // 798
felt252_mul([7], [203]) -> ([217]); // 799
store_temp<felt252>([217]) -> ([217]); // 800
felt252_add([175], [217]) -> ([218]); // 801
store_temp<felt252>([218]) -> ([218]); // 802
bytes31_try_from_felt252([202], [218]) { fallthrough([219], [220]) 812([221]) }; // 803
branch_align() -> (); // 804
array_append<bytes31>([6], [220]) -> ([222]); // 805
struct_construct<core::byte_array::ByteArray>([222], [176], [8]) -> ([223]); // 806
store_temp<RangeCheck>([219]) -> ([118]); // 807
store_temp<core::byte_array::ByteArray>([223]) -> ([119]); // 808
rename<RangeCheck>([118]) -> ([224]); // 809
rename<core::byte_array::ByteArray>([119]) -> ([225]); // 810
jump() { 988() }; // 811
branch_align() -> (); // 812
drop<Array<bytes31>>([6]) -> (); // 813
drop<u32>([25]) -> (); // 814
drop<u32>([8]) -> (); // 815
drop<felt252>([176]) -> (); // 816
array_new<felt252>() -> ([226]); // 817
const_as_immediate<Const<felt252, 29721761890975875353235833581453094220424382983267374>>() -> ([227]); // 818
store_temp<felt252>([227]) -> ([227]); // 819
array_append<felt252>([226], [227]) -> ([228]); // 820
store_temp<RangeCheck>([221]) -> ([155]); // 821
store_temp<Array<felt252>>([228]) -> ([156]); // 822
jump() { 893() }; // 823
branch_align() -> (); // 824
drop<Array<bytes31>>([6]) -> (); // 825
drop<u32>([25]) -> (); // 826
drop<u32>([8]) -> (); // 827
drop<felt252>([176]) -> (); // 828
drop<felt252>([175]) -> (); // 829
drop<felt252>([7]) -> (); // 830
struct_deconstruct<Tuple<core::panics::Panic, Array<felt252>>>([214]) -> ([229], [230]); // 831
drop<core::panics::Panic>([229]) -> (); // 832
store_temp<RangeCheck>([211]) -> ([206]); // 833
store_temp<Array<felt252>>([230]) -> ([207]); // 834
rename<RangeCheck>([206]) -> ([155]); // 835
rename<Array<felt252>>([207]) -> ([156]); // 836
jump() { 893() }; // 837
branch_align() -> (); // 838
drop<u32>([182]) -> (); // 839
drop<Array<bytes31>>([6]) -> (); // 840
drop<u32>([25]) -> (); // 841
drop<u32>([8]) -> (); // 842
drop<felt252>([176]) -> (); // 843
drop<felt252>([7]) -> (); // 844
drop<felt252>([175]) -> (); // 845
array_new<felt252>() -> ([231]); // 846
const_as_immediate<Const<felt252, 155785504329508738615720351733824384887>>() -> ([232]); // 847
store_temp<felt252>([232]) -> ([232]); // 848
array_append<felt252>([231], [232]) -> ([233]); // 849
store_temp<RangeCheck>([181]) -> ([155]); // 850
store_temp<Array<felt252>>([233]) -> ([156]); // 851
jump() { 893() }; // 852
branch_align() -> (); // 853
drop<Array<bytes31>>([6]) -> (); // 854
drop<u32>([25]) -> (); // 855
drop<u32>([8]) -> (); // 856
drop<felt252>([7]) -> (); // 857
drop<u128>([159]) -> (); // 858
drop<u128>([158]) -> (); // 859
drop<felt252>([160]) -> (); // 860
struct_deconstruct<Tuple<core::panics::Panic, Array<felt252>>>([170]) -> ([234], [235]); // 861
drop<core::panics::Panic>([234]) -> (); // 862
store_temp<RangeCheck>([167]) -> ([155]); // 863
store_temp<Array<felt252>>([235]) -> ([156]); // 864
jump() { 893() }; // 865
branch_align() -> (); // 866
drop<u32>([166]) -> (); // 867
drop<Array<bytes31>>([6]) -> (); // 868
drop<u32>([25]) -> (); // 869
drop<u32>([8]) -> (); // 870
drop<felt252>([160]) -> (); // 871
drop<felt252>([7]) -> (); // 872
drop<u128>([159]) -> (); // 873
drop<u128>([158]) -> (); // 874
array_new<felt252>() -> ([236]); // 875
const_as_immediate<Const<felt252, 155785504329508738615720351733824384887>>() -> ([237]); // 876
store_temp<felt252>([237]) -> ([237]); // 877
array_append<felt252>([236], [237]) -> ([238]); // 878
store_temp<RangeCheck>([165]) -> ([155]); // 879
store_temp<Array<felt252>>([238]) -> ([156]); // 880
jump() { 893() }; // 881
branch_align() -> (); // 882
drop<Array<bytes31>>([6]) -> (); // 883
drop<u32>([25]) -> (); // 884
drop<u32>([8]) -> (); // 885
drop<u128>([144]) -> (); // 886
drop<felt252>([7]) -> (); // 887
drop<u128>([143]) -> (); // 888
struct_deconstruct<Tuple<core::panics::Panic, Array<felt252>>>([149]) -> ([239], [240]); // 889
drop<core::panics::Panic>([239]) -> (); // 890
store_temp<RangeCheck>([146]) -> ([155]); // 891
store_temp<Array<felt252>>([240]) -> ([156]); // 892
struct_construct<core::panics::Panic>() -> ([241]); // 893
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([241], [156]) -> ([242]); // 894
enum_init<core::panics::PanicResult::<(core::byte_array::ByteArray, ())>, 1>([242]) -> ([243]); // 895
store_temp<RangeCheck>([155]) -> ([155]); // 896
store_temp<core::panics::PanicResult::<(core::byte_array::ByteArray, ())>>([243]) -> ([243]); // 897
return([155], [243]); // 898
branch_align() -> (); // 899
u128s_from_felt252([24], [2]) { fallthrough([244], [245]) 907([246], [247], [248]) }; // 900
branch_align() -> (); // 901
const_as_immediate<Const<u128, 0>>() -> ([249]); // 902
store_temp<RangeCheck>([244]) -> ([250]); // 903
store_temp<u128>([245]) -> ([251]); // 904
store_temp<u128>([249]) -> ([252]); // 905
jump() { 911() }; // 906
branch_align() -> (); // 907
store_temp<RangeCheck>([246]) -> ([250]); // 908
store_temp<u128>([248]) -> ([251]); // 909
store_temp<u128>([247]) -> ([252]); // 910
u128_to_felt252([252]) -> ([253]); // 911
u128_to_felt252([251]) -> ([254]); // 912
const_as_immediate<Const<u32, 31>>() -> ([255]); // 913
dup<u32>([8]) -> ([8], [256]); // 914
store_temp<u32>([255]) -> ([255]); // 915
u32_overflowing_sub([250], [255], [256]) { fallthrough([257], [258]) 1023([259], [260]) }; // 916
branch_align() -> (); // 917
const_as_immediate<Const<u32, 16>>() -> ([261]); // 918
dup<u32>([258]) -> ([258], [262]); // 919
store_temp<u32>([261]) -> ([261]); // 920
u32_overflowing_sub([257], [262], [261]) { fallthrough([263], [264]) 967([265], [266]) }; // 921
branch_align() -> (); // 922
drop<u32>([264]) -> (); // 923
const_as_immediate<Const<u32, 16>>() -> ([267]); // 924
store_temp<u32>([267]) -> ([267]); // 925
u32_overflowing_sub([263], [258], [267]) { fallthrough([268], [269]) 952([270], [271]) }; // 926
branch_align() -> (); // 927
store_temp<RangeCheck>([268]) -> ([268]); // 928
store_temp<u32>([269]) -> ([269]); // 929
function_call<user@core::bytes_31::one_shift_left_bytes_u128>([268], [269]) -> ([272], [273]); // 930
enum_match<core::panics::PanicResult::<(core::integer::u128,)>>([273]) { fallthrough([274]) 940([275]) }; // 931
branch_align() -> (); // 932
struct_deconstruct<Tuple<u128>>([274]) -> ([276]); // 933
u128_to_felt252([276]) -> ([277]); // 934
const_as_immediate<Const<felt252, 340282366920938463463374607431768211456>>() -> ([278]); // 935
felt252_mul([277], [278]) -> ([279]); // 936
store_temp<RangeCheck>([272]) -> ([280]); // 937
store_temp<felt252>([279]) -> ([281]); // 938
jump() { 978() }; // 939
branch_align() -> (); // 940
drop<Array<bytes31>>([6]) -> (); // 941
drop<u32>([25]) -> (); // 942
drop<u32>([8]) -> (); // 943
drop<felt252>([254]) -> (); // 944
drop<felt252>([253]) -> (); // 945
drop<felt252>([7]) -> (); // 946
struct_deconstruct<Tuple<core::panics::Panic, Array<felt252>>>([275]) -> ([282], [283]); // 947
drop<core::panics::Panic>([282]) -> (); // 948
store_temp<RangeCheck>([272]) -> ([284]); // 949
store_temp<Array<felt252>>([283]) -> ([285]); // 950
jump() { 1020() }; // 951
branch_align() -> (); // 952
drop<u32>([271]) -> (); // 953
drop<Array<bytes31>>([6]) -> (); // 954
drop<u32>([25]) -> (); // 955
drop<u32>([8]) -> (); // 956
drop<felt252>([254]) -> (); // 957
drop<felt252>([7]) -> (); // 958
drop<felt252>([253]) -> (); // 959
array_new<felt252>() -> ([286]); // 960
const_as_immediate<Const<felt252, 155785504329508738615720351733824384887>>() -> ([287]); // 961
store_temp<felt252>([287]) -> ([287]); // 962
array_append<felt252>([286], [287]) -> ([288]); // 963
store_temp<RangeCheck>([270]) -> ([284]); // 964
store_temp<Array<felt252>>([288]) -> ([285]); // 965
jump() { 1020() }; // 966
branch_align() -> (); // 967
drop<u32>([266]) -> (); // 968
store_temp<RangeCheck>([265]) -> ([265]); // 969
store_temp<u32>([258]) -> ([258]); // 970
function_call<user@core::bytes_31::one_shift_left_bytes_u128>([265], [258]) -> ([289], [290]); // 971
enum_match<core::panics::PanicResult::<(core::integer::u128,)>>([290]) { fallthrough([291]) 1009([292]) }; // 972
branch_align() -> (); // 973
struct_deconstruct<Tuple<u128>>([291]) -> ([293]); // 974
u128_to_felt252([293]) -> ([294]); // 975
store_temp<RangeCheck>([289]) -> ([280]); // 976
store_temp<felt252>([294]) -> ([281]); // 977
felt252_mul([7], [281]) -> ([295]); // 978
store_temp<felt252>([295]) -> ([295]); // 979
felt252_add([253], [295]) -> ([296]); // 980
store_temp<felt252>([296]) -> ([296]); // 981
bytes31_try_from_felt252([280], [296]) { fallthrough([297], [298]) 997([299]) }; // 982
branch_align() -> (); // 983
array_append<bytes31>([6], [298]) -> ([300]); // 984
struct_construct<core::byte_array::ByteArray>([300], [254], [8]) -> ([301]); // 985
store_temp<RangeCheck>([297]) -> ([224]); // 986
store_temp<core::byte_array::ByteArray>([301]) -> ([225]); // 987
struct_deconstruct<core::byte_array::ByteArray>([225]) -> ([302], [303], [304]); // 988
drop<u32>([304]) -> (); // 989
struct_construct<core::byte_array::ByteArray>([302], [303], [25]) -> ([305]); // 990
struct_construct<Unit>() -> ([306]); // 991
struct_construct<Tuple<core::byte_array::ByteArray, Unit>>([305], [306]) -> ([307]); // 992
enum_init<core::panics::PanicResult::<(core::byte_array::ByteArray, ())>, 0>([307]) -> ([308]); // 993
store_temp<RangeCheck>([224]) -> ([224]); // 994
store_temp<core::panics::PanicResult::<(core::byte_array::ByteArray, ())>>([308]) -> ([308]); // 995
return([224], [308]); // 996
branch_align() -> (); // 997
drop<Array<bytes31>>([6]) -> (); // 998
drop<u32>([25]) -> (); // 999
drop<u32>([8]) -> (); // 1000
drop<felt252>([254]) -> (); // 1001
array_new<felt252>() -> ([309]); // 1002
const_as_immediate<Const<felt252, 29721761890975875353235833581453094220424382983267374>>() -> ([310]); // 1003
store_temp<felt252>([310]) -> ([310]); // 1004
array_append<felt252>([309], [310]) -> ([311]); // 1005
store_temp<RangeCheck>([299]) -> ([312]); // 1006
store_temp<Array<felt252>>([311]) -> ([313]); // 1007
jump() { 1037() }; // 1008
branch_align() -> (); // 1009
drop<Array<bytes31>>([6]) -> (); // 1010
drop<u32>([25]) -> (); // 1011
drop<u32>([8]) -> (); // 1012
drop<felt252>([254]) -> (); // 1013
drop<felt252>([253]) -> (); // 1014
drop<felt252>([7]) -> (); // 1015
struct_deconstruct<Tuple<core::panics::Panic, Array<felt252>>>([292]) -> ([314], [315]); // 1016
drop<core::panics::Panic>([314]) -> (); // 1017
store_temp<RangeCheck>([289]) -> ([284]); // 1018
store_temp<Array<felt252>>([315]) -> ([285]); // 1019
rename<RangeCheck>([284]) -> ([312]); // 1020
rename<Array<felt252>>([285]) -> ([313]); // 1021
jump() { 1037() }; // 1022
branch_align() -> (); // 1023
drop<u32>([260]) -> (); // 1024
drop<Array<bytes31>>([6]) -> (); // 1025
drop<u32>([25]) -> (); // 1026
drop<u32>([8]) -> (); // 1027
drop<felt252>([254]) -> (); // 1028
drop<felt252>([7]) -> (); // 1029
drop<felt252>([253]) -> (); // 1030
array_new<felt252>() -> ([316]); // 1031
const_as_immediate<Const<felt252, 155785504329508738615720351733824384887>>() -> ([317]); // 1032
store_temp<felt252>([317]) -> ([317]); // 1033
array_append<felt252>([316], [317]) -> ([318]); // 1034
store_temp<RangeCheck>([259]) -> ([312]); // 1035
store_temp<Array<felt252>>([318]) -> ([313]); // 1036
struct_construct<core::panics::Panic>() -> ([319]); // 1037
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([319], [313]) -> ([320]); // 1038
enum_init<core::panics::PanicResult::<(core::byte_array::ByteArray, ())>, 1>([320]) -> ([321]); // 1039
store_temp<RangeCheck>([312]) -> ([312]); // 1040
store_temp<core::panics::PanicResult::<(core::byte_array::ByteArray, ())>>([321]) -> ([321]); // 1041
return([312], [321]); // 1042
branch_align() -> (); // 1043
drop<u32>([27]) -> (); // 1044
drop<felt252>([7]) -> (); // 1045
drop<Array<bytes31>>([6]) -> (); // 1046
drop<felt252>([2]) -> (); // 1047
drop<u32>([8]) -> (); // 1048
array_new<felt252>() -> ([322]); // 1049
const_as_immediate<Const<felt252, 155785504329508738615720351733824384887>>() -> ([323]); // 1050
store_temp<felt252>([323]) -> ([323]); // 1051
array_append<felt252>([322], [323]) -> ([324]); // 1052
struct_construct<core::panics::Panic>() -> ([325]); // 1053
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([325], [324]) -> ([326]); // 1054
enum_init<core::panics::PanicResult::<(core::byte_array::ByteArray, ())>, 1>([326]) -> ([327]); // 1055
store_temp<RangeCheck>([26]) -> ([26]); // 1056
store_temp<core::panics::PanicResult::<(core::byte_array::ByteArray, ())>>([327]) -> ([327]); // 1057
return([26], [327]); // 1058
branch_align() -> (); // 1059
drop<u32>([8]) -> (); // 1060
drop<u32>([12]) -> (); // 1061
const_as_immediate<Const<u32, 16>>() -> ([328]); // 1062
dup<u32>([3]) -> ([3], [329]); // 1063
store_temp<u32>([328]) -> ([328]); // 1064
u32_overflowing_sub([17], [329], [328]) { fallthrough([330], [331]) 1105([332], [333]) }; // 1065
branch_align() -> (); // 1066
drop<u32>([331]) -> (); // 1067
const_as_immediate<Const<u32, 16>>() -> ([334]); // 1068
store_temp<u32>([334]) -> ([334]); // 1069
u32_overflowing_sub([330], [3], [334]) { fallthrough([335], [336]) 1093([337], [338]) }; // 1070
branch_align() -> (); // 1071
store_temp<RangeCheck>([335]) -> ([335]); // 1072
store_temp<u32>([336]) -> ([336]); // 1073
function_call<user@core::bytes_31::one_shift_left_bytes_u128>([335], [336]) -> ([339], [340]); // 1074
enum_match<core::panics::PanicResult::<(core::integer::u128,)>>([340]) { fallthrough([341]) 1084([342]) }; // 1075
branch_align() -> (); // 1076
struct_deconstruct<Tuple<u128>>([341]) -> ([343]); // 1077
u128_to_felt252([343]) -> ([344]); // 1078
const_as_immediate<Const<felt252, 340282366920938463463374607431768211456>>() -> ([345]); // 1079
felt252_mul([344], [345]) -> ([346]); // 1080
store_temp<RangeCheck>([339]) -> ([347]); // 1081
store_temp<felt252>([346]) -> ([348]); // 1082
jump() { 1116() }; // 1083
branch_align() -> (); // 1084
drop<Array<bytes31>>([6]) -> (); // 1085
drop<felt252>([2]) -> (); // 1086
drop<felt252>([7]) -> (); // 1087
struct_deconstruct<Tuple<core::panics::Panic, Array<felt252>>>([342]) -> ([349], [350]); // 1088
drop<core::panics::Panic>([349]) -> (); // 1089
store_temp<RangeCheck>([339]) -> ([351]); // 1090
store_temp<Array<felt252>>([350]) -> ([352]); // 1091
jump() { 1152() }; // 1092
branch_align() -> (); // 1093
drop<u32>([338]) -> (); // 1094
drop<Array<bytes31>>([6]) -> (); // 1095
drop<felt252>([7]) -> (); // 1096
drop<felt252>([2]) -> (); // 1097
array_new<felt252>() -> ([353]); // 1098
const_as_immediate<Const<felt252, 155785504329508738615720351733824384887>>() -> ([354]); // 1099
store_temp<felt252>([354]) -> ([354]); // 1100
array_append<felt252>([353], [354]) -> ([355]); // 1101
store_temp<RangeCheck>([337]) -> ([351]); // 1102
store_temp<Array<felt252>>([355]) -> ([352]); // 1103
jump() { 1152() }; // 1104
branch_align() -> (); // 1105
drop<u32>([333]) -> (); // 1106
store_temp<RangeCheck>([332]) -> ([332]); // 1107
store_temp<u32>([3]) -> ([3]); // 1108
function_call<user@core::bytes_31::one_shift_left_bytes_u128>([332], [3]) -> ([356], [357]); // 1109
enum_match<core::panics::PanicResult::<(core::integer::u128,)>>([357]) { fallthrough([358]) 1144([359]) }; // 1110
branch_align() -> (); // 1111
struct_deconstruct<Tuple<u128>>([358]) -> ([360]); // 1112
u128_to_felt252([360]) -> ([361]); // 1113
store_temp<RangeCheck>([356]) -> ([347]); // 1114
store_temp<felt252>([361]) -> ([348]); // 1115
felt252_mul([7], [348]) -> ([362]); // 1116
store_temp<felt252>([362]) -> ([362]); // 1117
felt252_add([2], [362]) -> ([363]); // 1118
store_temp<felt252>([363]) -> ([363]); // 1119
bytes31_try_from_felt252([347], [363]) { fallthrough([364], [365]) 1132([366]) }; // 1120
branch_align() -> (); // 1121
array_append<bytes31>([6], [365]) -> ([367]); // 1122
const_as_immediate<Const<felt252, 0>>() -> ([368]); // 1123
const_as_immediate<Const<u32, 0>>() -> ([369]); // 1124
struct_construct<core::byte_array::ByteArray>([367], [368], [369]) -> ([370]); // 1125
struct_construct<Unit>() -> ([371]); // 1126
struct_construct<Tuple<core::byte_array::ByteArray, Unit>>([370], [371]) -> ([372]); // 1127
enum_init<core::panics::PanicResult::<(core::byte_array::ByteArray, ())>, 0>([372]) -> ([373]); // 1128
store_temp<RangeCheck>([364]) -> ([364]); // 1129
store_temp<core::panics::PanicResult::<(core::byte_array::ByteArray, ())>>([373]) -> ([373]); // 1130
return([364], [373]); // 1131
branch_align() -> (); // 1132
drop<Array<bytes31>>([6]) -> (); // 1133
array_new<felt252>() -> ([374]); // 1134
const_as_immediate<Const<felt252, 29721761890975875353235833581453094220424382983267374>>() -> ([375]); // 1135
store_temp<felt252>([375]) -> ([375]); // 1136
array_append<felt252>([374], [375]) -> ([376]); // 1137
struct_construct<core::panics::Panic>() -> ([377]); // 1138
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([377], [376]) -> ([378]); // 1139
enum_init<core::panics::PanicResult::<(core::byte_array::ByteArray, ())>, 1>([378]) -> ([379]); // 1140
store_temp<RangeCheck>([366]) -> ([366]); // 1141
store_temp<core::panics::PanicResult::<(core::byte_array::ByteArray, ())>>([379]) -> ([379]); // 1142
return([366], [379]); // 1143
branch_align() -> (); // 1144
drop<Array<bytes31>>([6]) -> (); // 1145
drop<felt252>([2]) -> (); // 1146
drop<felt252>([7]) -> (); // 1147
struct_deconstruct<Tuple<core::panics::Panic, Array<felt252>>>([359]) -> ([380], [381]); // 1148
drop<core::panics::Panic>([380]) -> (); // 1149
store_temp<RangeCheck>([356]) -> ([351]); // 1150
store_temp<Array<felt252>>([381]) -> ([352]); // 1151
struct_construct<core::panics::Panic>() -> ([382]); // 1152
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([382], [352]) -> ([383]); // 1153
enum_init<core::panics::PanicResult::<(core::byte_array::ByteArray, ())>, 1>([383]) -> ([384]); // 1154
store_temp<RangeCheck>([351]) -> ([351]); // 1155
store_temp<core::panics::PanicResult::<(core::byte_array::ByteArray, ())>>([384]) -> ([384]); // 1156
return([351], [384]); // 1157
branch_align() -> (); // 1158
drop<u32>([20]) -> (); // 1159
drop<u32>([12]) -> (); // 1160
const_as_immediate<Const<u32, 0>>() -> ([385]); // 1161
dup<u32>([8]) -> ([8], [386]); // 1162
store_temp<RangeCheck>([19]) -> ([19]); // 1163
u32_eq([386], [385]) { fallthrough() 1269() }; // 1164
branch_align() -> (); // 1165
const_as_immediate<Const<u32, 16>>() -> ([387]); // 1166
dup<u32>([3]) -> ([3], [388]); // 1167
store_temp<u32>([387]) -> ([387]); // 1168
u32_overflowing_sub([19], [388], [387]) { fallthrough([389], [390]) 1214([391], [392]) }; // 1169
branch_align() -> (); // 1170
drop<u32>([390]) -> (); // 1171
const_as_immediate<Const<u32, 16>>() -> ([393]); // 1172
dup<u32>([3]) -> ([3], [394]); // 1173
store_temp<u32>([393]) -> ([393]); // 1174
u32_overflowing_sub([389], [394], [393]) { fallthrough([395], [396]) 1200([397], [398]) }; // 1175
branch_align() -> (); // 1176
store_temp<RangeCheck>([395]) -> ([395]); // 1177
store_temp<u32>([396]) -> ([396]); // 1178
function_call<user@core::bytes_31::one_shift_left_bytes_u128>([395], [396]) -> ([399], [400]); // 1179
enum_match<core::panics::PanicResult::<(core::integer::u128,)>>([400]) { fallthrough([401]) 1189([402]) }; // 1180
branch_align() -> (); // 1181
struct_deconstruct<Tuple<u128>>([401]) -> ([403]); // 1182
u128_to_felt252([403]) -> ([404]); // 1183
const_as_immediate<Const<felt252, 340282366920938463463374607431768211456>>() -> ([405]); // 1184
felt252_mul([404], [405]) -> ([406]); // 1185
store_temp<RangeCheck>([399]) -> ([407]); // 1186
store_temp<felt252>([406]) -> ([408]); // 1187
jump() { 1226() }; // 1188
branch_align() -> (); // 1189
drop<Array<bytes31>>([6]) -> (); // 1190
drop<u32>([3]) -> (); // 1191
drop<u32>([8]) -> (); // 1192
drop<felt252>([2]) -> (); // 1193
drop<felt252>([7]) -> (); // 1194
struct_deconstruct<Tuple<core::panics::Panic, Array<felt252>>>([402]) -> ([409], [410]); // 1195
drop<core::panics::Panic>([409]) -> (); // 1196
store_temp<RangeCheck>([399]) -> ([411]); // 1197
store_temp<Array<felt252>>([410]) -> ([412]); // 1198
jump() { 1263() }; // 1199
branch_align() -> (); // 1200
drop<u32>([398]) -> (); // 1201
drop<Array<bytes31>>([6]) -> (); // 1202
drop<felt252>([7]) -> (); // 1203
drop<u32>([3]) -> (); // 1204
drop<u32>([8]) -> (); // 1205
drop<felt252>([2]) -> (); // 1206
array_new<felt252>() -> ([413]); // 1207
const_as_immediate<Const<felt252, 155785504329508738615720351733824384887>>() -> ([414]); // 1208
store_temp<felt252>([414]) -> ([414]); // 1209
array_append<felt252>([413], [414]) -> ([415]); // 1210
store_temp<RangeCheck>([397]) -> ([411]); // 1211
store_temp<Array<felt252>>([415]) -> ([412]); // 1212
jump() { 1263() }; // 1213
branch_align() -> (); // 1214
drop<u32>([392]) -> (); // 1215
store_temp<RangeCheck>([391]) -> ([391]); // 1216
dup<u32>([3]) -> ([3], [416]); // 1217
store_temp<u32>([416]) -> ([416]); // 1218
function_call<user@core::bytes_31::one_shift_left_bytes_u128>([391], [416]) -> ([417], [418]); // 1219
enum_match<core::panics::PanicResult::<(core::integer::u128,)>>([418]) { fallthrough([419]) 1253([420]) }; // 1220
branch_align() -> (); // 1221
struct_deconstruct<Tuple<u128>>([419]) -> ([421]); // 1222
u128_to_felt252([421]) -> ([422]); // 1223
store_temp<RangeCheck>([417]) -> ([407]); // 1224
store_temp<felt252>([422]) -> ([408]); // 1225
felt252_mul([7], [408]) -> ([423]); // 1226
store_temp<felt252>([423]) -> ([423]); // 1227
felt252_add([2], [423]) -> ([424]); // 1228
store_temp<felt252>([424]) -> ([424]); // 1229
u32_overflowing_add([407], [8], [3]) { fallthrough([425], [426]) 1239([427], [428]) }; // 1230
branch_align() -> (); // 1231
struct_construct<core::byte_array::ByteArray>([6], [424], [426]) -> ([429]); // 1232
struct_construct<Unit>() -> ([430]); // 1233
struct_construct<Tuple<core::byte_array::ByteArray, Unit>>([429], [430]) -> ([431]); // 1234
enum_init<core::panics::PanicResult::<(core::byte_array::ByteArray, ())>, 0>([431]) -> ([432]); // 1235
store_temp<RangeCheck>([425]) -> ([425]); // 1236
store_temp<core::panics::PanicResult::<(core::byte_array::ByteArray, ())>>([432]) -> ([432]); // 1237
return([425], [432]); // 1238
branch_align() -> (); // 1239
drop<u32>([428]) -> (); // 1240
drop<Array<bytes31>>([6]) -> (); // 1241
drop<felt252>([424]) -> (); // 1242
array_new<felt252>() -> ([433]); // 1243
const_as_immediate<Const<felt252, 155785504323917466144735657540098748279>>() -> ([434]); // 1244
store_temp<felt252>([434]) -> ([434]); // 1245
array_append<felt252>([433], [434]) -> ([435]); // 1246
struct_construct<core::panics::Panic>() -> ([436]); // 1247
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([436], [435]) -> ([437]); // 1248
enum_init<core::panics::PanicResult::<(core::byte_array::ByteArray, ())>, 1>([437]) -> ([438]); // 1249
store_temp<RangeCheck>([427]) -> ([427]); // 1250
store_temp<core::panics::PanicResult::<(core::byte_array::ByteArray, ())>>([438]) -> ([438]); // 1251
return([427], [438]); // 1252
branch_align() -> (); // 1253
drop<Array<bytes31>>([6]) -> (); // 1254
drop<u32>([3]) -> (); // 1255
drop<u32>([8]) -> (); // 1256
drop<felt252>([2]) -> (); // 1257
drop<felt252>([7]) -> (); // 1258
struct_deconstruct<Tuple<core::panics::Panic, Array<felt252>>>([420]) -> ([439], [440]); // 1259
drop<core::panics::Panic>([439]) -> (); // 1260
store_temp<RangeCheck>([417]) -> ([411]); // 1261
store_temp<Array<felt252>>([440]) -> ([412]); // 1262
struct_construct<core::panics::Panic>() -> ([441]); // 1263
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([441], [412]) -> ([442]); // 1264
enum_init<core::panics::PanicResult::<(core::byte_array::ByteArray, ())>, 1>([442]) -> ([443]); // 1265
store_temp<RangeCheck>([411]) -> ([411]); // 1266
store_temp<core::panics::PanicResult::<(core::byte_array::ByteArray, ())>>([443]) -> ([443]); // 1267
return([411], [443]); // 1268
branch_align() -> (); // 1269
drop<felt252>([7]) -> (); // 1270
drop<u32>([8]) -> (); // 1271
struct_construct<core::byte_array::ByteArray>([6], [2], [3]) -> ([444]); // 1272
struct_construct<Unit>() -> ([445]); // 1273
struct_construct<Tuple<core::byte_array::ByteArray, Unit>>([444], [445]) -> ([446]); // 1274
enum_init<core::panics::PanicResult::<(core::byte_array::ByteArray, ())>, 0>([446]) -> ([447]); // 1275
store_temp<RangeCheck>([19]) -> ([19]); // 1276
store_temp<core::panics::PanicResult::<(core::byte_array::ByteArray, ())>>([447]) -> ([447]); // 1277
return([19], [447]); // 1278
branch_align() -> (); // 1279
drop<u32>([14]) -> (); // 1280
drop<felt252>([7]) -> (); // 1281
drop<Array<bytes31>>([6]) -> (); // 1282
drop<felt252>([2]) -> (); // 1283
drop<u32>([8]) -> (); // 1284
drop<u32>([3]) -> (); // 1285
array_new<felt252>() -> ([448]); // 1286
const_as_immediate<Const<felt252, 155785504323917466144735657540098748279>>() -> ([449]); // 1287
store_temp<felt252>([449]) -> ([449]); // 1288
array_append<felt252>([448], [449]) -> ([450]); // 1289
struct_construct<core::panics::Panic>() -> ([451]); // 1290
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([451], [450]) -> ([452]); // 1291
enum_init<core::panics::PanicResult::<(core::byte_array::ByteArray, ())>, 1>([452]) -> ([453]); // 1292
store_temp<RangeCheck>([13]) -> ([13]); // 1293
store_temp<core::panics::PanicResult::<(core::byte_array::ByteArray, ())>>([453]) -> ([453]); // 1294
return([13], [453]); // 1295
branch_align() -> (); // 1296
drop<u32>([3]) -> (); // 1297
drop<felt252>([2]) -> (); // 1298
struct_construct<Unit>() -> ([454]); // 1299
struct_construct<Tuple<core::byte_array::ByteArray, Unit>>([1], [454]) -> ([455]); // 1300
enum_init<core::panics::PanicResult::<(core::byte_array::ByteArray, ())>, 0>([455]) -> ([456]); // 1301
store_temp<RangeCheck>([0]) -> ([0]); // 1302
store_temp<core::panics::PanicResult::<(core::byte_array::ByteArray, ())>>([456]) -> ([456]); // 1303
return([0], [456]); // 1304
disable_ap_tracking() -> (); // 1305
withdraw_gas([0], [1]) { fallthrough([4], [5]) 1348([6], [7]) }; // 1306
branch_align() -> (); // 1307
struct_deconstruct<core::array::Span::<core::bytes_31::bytes31>>([2]) -> ([8]); // 1308
enable_ap_tracking() -> (); // 1309
store_temp<RangeCheck>([4]) -> ([4]); // 1310
array_snapshot_pop_front<bytes31>([8]) { fallthrough([9], [10]) 1317([11]) }; // 1311
branch_align() -> (); // 1312
enum_init<core::option::Option::<core::box::Box::<@core::bytes_31::bytes31>>, 0>([10]) -> ([12]); // 1313
store_temp<Snapshot<Array<bytes31>>>([9]) -> ([13]); // 1314
store_temp<core::option::Option::<core::box::Box::<@core::bytes_31::bytes31>>>([12]) -> ([14]); // 1315
jump() { 1322() }; // 1316
branch_align() -> (); // 1317
struct_construct<Unit>() -> ([15]); // 1318
enum_init<core::option::Option::<core::box::Box::<@core::bytes_31::bytes31>>, 1>([15]) -> ([16]); // 1319
store_temp<Snapshot<Array<bytes31>>>([11]) -> ([13]); // 1320
store_temp<core::option::Option::<core::box::Box::<@core::bytes_31::bytes31>>>([16]) -> ([14]); // 1321
enum_match<core::option::Option::<core::box::Box::<@core::bytes_31::bytes31>>>([14]) { fallthrough([17]) 1337([18]) }; // 1322
branch_align() -> (); // 1323
disable_ap_tracking() -> (); // 1324
unbox<bytes31>([17]) -> ([19]); // 1325
rename<bytes31>([19]) -> ([20]); // 1326
bytes31_to_felt252([20]) -> ([21]); // 1327
store_temp<felt252>([21]) -> ([21]); // 1328
array_append<felt252>([3], [21]) -> ([22]); // 1329
struct_construct<core::array::Span::<core::bytes_31::bytes31>>([13]) -> ([23]); // 1330
store_temp<RangeCheck>([4]) -> ([4]); // 1331
store_temp<GasBuiltin>([5]) -> ([5]); // 1332
store_temp<core::array::Span::<core::bytes_31::bytes31>>([23]) -> ([23]); // 1333
store_temp<Array<felt252>>([22]) -> ([22]); // 1334
function_call<user@core::array::serialize_array_helper::<core::bytes_31::bytes31, core::serde::into_felt252_based::SerdeImpl::<core::bytes_31::bytes31, core::bytes_31::bytes31Copy, core::bytes_31::Bytes31IntoFelt252, core::bytes_31::Felt252TryIntoBytes31>, core::bytes_31::bytes31Drop>>([4], [5], [23], [22]) -> ([24], [25], [26]); // 1335
return([24], [25], [26]); // 1336
branch_align() -> (); // 1337
disable_ap_tracking() -> (); // 1338
drop<Unit>([18]) -> (); // 1339
drop<Snapshot<Array<bytes31>>>([13]) -> (); // 1340
struct_construct<Unit>() -> ([27]); // 1341
struct_construct<Tuple<Array<felt252>, Unit>>([3], [27]) -> ([28]); // 1342
enum_init<core::panics::PanicResult::<(core::array::Array::<core::felt252>, ())>, 0>([28]) -> ([29]); // 1343
store_temp<RangeCheck>([4]) -> ([4]); // 1344
store_temp<GasBuiltin>([5]) -> ([5]); // 1345
store_temp<core::panics::PanicResult::<(core::array::Array::<core::felt252>, ())>>([29]) -> ([29]); // 1346
return([4], [5], [29]); // 1347
branch_align() -> (); // 1348
drop<Array<felt252>>([3]) -> (); // 1349
drop<core::array::Span::<core::bytes_31::bytes31>>([2]) -> (); // 1350
array_new<felt252>() -> ([30]); // 1351
const_as_immediate<Const<felt252, 375233589013918064796019>>() -> ([31]); // 1352
store_temp<felt252>([31]) -> ([31]); // 1353
array_append<felt252>([30], [31]) -> ([32]); // 1354
struct_construct<core::panics::Panic>() -> ([33]); // 1355
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([33], [32]) -> ([34]); // 1356
enum_init<core::panics::PanicResult::<(core::array::Array::<core::felt252>, ())>, 1>([34]) -> ([35]); // 1357
store_temp<RangeCheck>([6]) -> ([6]); // 1358
store_temp<GasBuiltin>([7]) -> ([7]); // 1359
store_temp<core::panics::PanicResult::<(core::array::Array::<core::felt252>, ())>>([35]) -> ([35]); // 1360
return([6], [7], [35]); // 1361
downcast<u32, BoundedInt<0, 15>>([0], [1]) { fallthrough([2], [3]) 1452([4]) }; // 1362
branch_align() -> (); // 1363
enum_from_bounded_int<index_enum_type<16>>([3]) -> ([5]); // 1364
store_temp<index_enum_type<16>>([5]) -> ([5]); // 1365
store_temp<RangeCheck>([2]) -> ([2]); // 1366
enum_match<index_enum_type<16>>([5]) { fallthrough([6]) 1373([7]) 1378([8]) 1383([9]) 1388([10]) 1393([11]) 1398([12]) 1403([13]) 1408([14]) 1413([15]) 1418([16]) 1423([17]) 1428([18]) 1433([19]) 1438([20]) 1443([21]) }; // 1367
branch_align() -> (); // 1368
drop<Unit>([6]) -> (); // 1369
const_as_immediate<Const<u128, 1>>() -> ([22]); // 1370
store_temp<u128>([22]) -> ([23]); // 1371
jump() { 1447() }; // 1372
branch_align() -> (); // 1373
drop<Unit>([7]) -> (); // 1374
const_as_immediate<Const<u128, 256>>() -> ([24]); // 1375
store_temp<u128>([24]) -> ([23]); // 1376
jump() { 1447() }; // 1377
branch_align() -> (); // 1378
drop<Unit>([8]) -> (); // 1379
const_as_immediate<Const<u128, 65536>>() -> ([25]); // 1380
store_temp<u128>([25]) -> ([23]); // 1381
jump() { 1447() }; // 1382
branch_align() -> (); // 1383
drop<Unit>([9]) -> (); // 1384
const_as_immediate<Const<u128, 16777216>>() -> ([26]); // 1385
store_temp<u128>([26]) -> ([23]); // 1386
jump() { 1447() }; // 1387
branch_align() -> (); // 1388
drop<Unit>([10]) -> (); // 1389
const_as_immediate<Const<u128, 4294967296>>() -> ([27]); // 1390
store_temp<u128>([27]) -> ([23]); // 1391
jump() { 1447() }; // 1392
branch_align() -> (); // 1393
drop<Unit>([11]) -> (); // 1394
const_as_immediate<Const<u128, 1099511627776>>() -> ([28]); // 1395
store_temp<u128>([28]) -> ([23]); // 1396
jump() { 1447() }; // 1397
branch_align() -> (); // 1398
drop<Unit>([12]) -> (); // 1399
const_as_immediate<Const<u128, 281474976710656>>() -> ([29]); // 1400
store_temp<u128>([29]) -> ([23]); // 1401
jump() { 1447() }; // 1402
branch_align() -> (); // 1403
drop<Unit>([13]) -> (); // 1404
const_as_immediate<Const<u128, 72057594037927936>>() -> ([30]); // 1405
store_temp<u128>([30]) -> ([23]); // 1406
jump() { 1447() }; // 1407
branch_align() -> (); // 1408
drop<Unit>([14]) -> (); // 1409
const_as_immediate<Const<u128, 18446744073709551616>>() -> ([31]); // 1410
store_temp<u128>([31]) -> ([23]); // 1411
jump() { 1447() }; // 1412
branch_align() -> (); // 1413
drop<Unit>([15]) -> (); // 1414
const_as_immediate<Const<u128, 4722366482869645213696>>() -> ([32]); // 1415
store_temp<u128>([32]) -> ([23]); // 1416
jump() { 1447() }; // 1417
branch_align() -> (); // 1418
drop<Unit>([16]) -> (); // 1419
const_as_immediate<Const<u128, 1208925819614629174706176>>() -> ([33]); // 1420
store_temp<u128>([33]) -> ([23]); // 1421
jump() { 1447() }; // 1422
branch_align() -> (); // 1423
drop<Unit>([17]) -> (); // 1424
const_as_immediate<Const<u128, 309485009821345068724781056>>() -> ([34]); // 1425
store_temp<u128>([34]) -> ([23]); // 1426
jump() { 1447() }; // 1427
branch_align() -> (); // 1428
drop<Unit>([18]) -> (); // 1429
const_as_immediate<Const<u128, 79228162514264337593543950336>>() -> ([35]); // 1430
store_temp<u128>([35]) -> ([23]); // 1431
jump() { 1447() }; // 1432
branch_align() -> (); // 1433
drop<Unit>([19]) -> (); // 1434
const_as_immediate<Const<u128, 20282409603651670423947251286016>>() -> ([36]); // 1435
store_temp<u128>([36]) -> ([23]); // 1436
jump() { 1447() }; // 1437
branch_align() -> (); // 1438
drop<Unit>([20]) -> (); // 1439
const_as_immediate<Const<u128, 5192296858534827628530496329220096>>() -> ([37]); // 1440
store_temp<u128>([37]) -> ([23]); // 1441
jump() { 1447() }; // 1442
branch_align() -> (); // 1443
drop<Unit>([21]) -> (); // 1444
const_as_immediate<Const<u128, 1329227995784915872903807060280344576>>() -> ([38]); // 1445
store_temp<u128>([38]) -> ([23]); // 1446
struct_construct<Tuple<u128>>([23]) -> ([39]); // 1447
enum_init<core::panics::PanicResult::<(core::integer::u128,)>, 0>([39]) -> ([40]); // 1448
store_temp<RangeCheck>([2]) -> ([2]); // 1449
store_temp<core::panics::PanicResult::<(core::integer::u128,)>>([40]) -> ([40]); // 1450
return([2], [40]); // 1451
branch_align() -> (); // 1452
array_new<felt252>() -> ([41]); // 1453
const_as_immediate<Const<felt252, 573087285299505011920718992710461799>>() -> ([42]); // 1454
store_temp<felt252>([42]) -> ([42]); // 1455
array_append<felt252>([41], [42]) -> ([43]); // 1456
struct_construct<core::panics::Panic>() -> ([44]); // 1457
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([44], [43]) -> ([45]); // 1458
enum_init<core::panics::PanicResult::<(core::integer::u128,)>, 1>([45]) -> ([46]); // 1459
store_temp<RangeCheck>([4]) -> ([4]); // 1460
store_temp<core::panics::PanicResult::<(core::integer::u128,)>>([46]) -> ([46]); // 1461
return([4], [46]); // 1462

test::foo@0([0]: RangeCheck, [1]: AddMod, [2]: MulMod, [3]: RangeCheck96, [4]: GasBuiltin) -> (RangeCheck, AddMod, MulMod, RangeCheck96, GasBuiltin, core::panics::PanicResult::<((),)>);
core::circuit::FillInputResultImpl::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>::next::<[core::internal::BoundedInt::<0, 79228162514264337593543950335>; 4], core::circuit::U96sIntoCircuitInputValue, core::traits::FixedSizedArrayDrop::<core::internal::BoundedInt::<0, 79228162514264337593543950335>, core::internal::BoundedIntDrop::<0, 79228162514264337593543950335>, 4>>@250([0]: RangeCheck, [1]: GasBuiltin, [2]: core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>, [3]: Tuple<BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>>) -> (RangeCheck, GasBuiltin, core::panics::PanicResult::<(core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>,)>);
core::circuit::FillInputResultImpl::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>::done@356([0]: RangeCheck, [1]: GasBuiltin, [2]: core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>) -> (RangeCheck, GasBuiltin, core::panics::PanicResult::<(core::circuit::CircuitData::<core::circuit::Circuit::<(core::circuit::MulModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::SubModGate::<core::circuit::InverseGate::<core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>>, core::circuit::CircuitInput::<1>>>,)>>,)>);
core::byte_array::ByteArrayImpl::append_word@446([0]: RangeCheck, [1]: core::byte_array::ByteArray, [2]: felt252, [3]: u32) -> (RangeCheck, core::panics::PanicResult::<(core::byte_array::ByteArray, ())>);
core::array::serialize_array_helper::<core::bytes_31::bytes31, core::serde::into_felt252_based::SerdeImpl::<core::bytes_31::bytes31, core::bytes_31::bytes31Copy, core::bytes_31::Bytes31IntoFelt252, core::bytes_31::Felt252TryIntoBytes31>, core::bytes_31::bytes31Drop>@1305([0]: RangeCheck, [1]: GasBuiltin, [2]: core::array::Span::<core::bytes_31::bytes31>, [3]: Array<felt252>) -> (RangeCheck, GasBuiltin, core::panics::PanicResult::<(core::array::Array::<core::felt252>, ())>);
core::bytes_31::one_shift_left_bytes_u128@1362([0]: RangeCheck, [1]: u32) -> (RangeCheck, core::panics::PanicResult::<(core::integer::u128,)>);

//! > ==========================================================================

//! > fill_input

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
use core::circuit::{
    U96Guarantee, AddModGate, fill_circuit_input, FillInputResult, CircuitInput, CircuitInputAccumulator,
    init_circuit_data, Circuit
};
type MyCircuit = Circuit<(AddModGate<CircuitInput<0>, CircuitInput<1>>, CircuitInput<2>,)>;

fn foo(
    accumulator: CircuitInputAccumulator<MyCircuit>, val: [U96Guarantee; 4]
) -> FillInputResult<MyCircuit> {
    fill_circuit_input(accumulator, val)
}

//! > casm
[fp + -6] = [[fp + -8] + 0];
[fp + -5] = [[fp + -8] + 1];
[fp + -4] = [[fp + -8] + 2];
[fp + -3] = [[fp + -8] + 3];
[ap + 0] = [fp + -8] + 4, ap++;
[fp + -7] = [ap + 0] + [ap + -1], ap++;
jmp rel 8 if [ap + -1] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
ret;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -7], ap++;
ret;

//! > sierra_code
type CircuitInputAccumulator<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>> = CircuitInputAccumulator<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>> [storable: true, drop: true, dup: false, zero_sized: false];
type CircuitData<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>> = CircuitData<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>> [storable: true, drop: true, dup: false, zero_sized: false];
type core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>> = Enum<ut@core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, CircuitData<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, CircuitInputAccumulator<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>> [storable: true, drop: true, dup: false, zero_sized: false];
type Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)> = Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)> [storable: false, drop: false, dup: false, zero_sized: true];
type core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>> = AddModGate<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>> [storable: false, drop: false, dup: false, zero_sized: false];
type core::circuit::CircuitInput::<2> = CircuitInput<2> [storable: false, drop: false, dup: false, zero_sized: false];
type (core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>) = Struct<ut@Tuple, core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>> [storable: false, drop: false, dup: false, zero_sized: false];
type U96Guarantee = U96Guarantee [storable: true, drop: false, dup: false, zero_sized: false];
type Tuple<U96Guarantee, U96Guarantee, U96Guarantee, U96Guarantee> = Struct<ut@Tuple, U96Guarantee, U96Guarantee, U96Guarantee, U96Guarantee> [storable: true, drop: false, dup: false, zero_sized: false];
type core::circuit::CircuitInput::<1> = CircuitInput<1> [storable: false, drop: false, dup: false, zero_sized: false];
type core::circuit::CircuitInput::<0> = CircuitInput<0> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc fill_circuit_input<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>> = fill_circuit_input<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>;
libfunc branch_align = branch_align;
libfunc enum_init<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, 0> = enum_init<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, 0>;
libfunc store_temp<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>> = store_temp<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>>;
libfunc enum_init<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, 1> = enum_init<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, 1>;

fill_circuit_input<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>([0], [1]) { fallthrough([2]) 5([3]) }; // 0
branch_align() -> (); // 1
enum_init<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, 0>([2]) -> ([4]); // 2
store_temp<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>>([4]) -> ([4]); // 3
return([4]); // 4
branch_align() -> (); // 5
enum_init<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, 1>([3]) -> ([5]); // 6
store_temp<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>>([5]) -> ([5]); // 7
return([5]); // 8

test::foo@0([0]: CircuitInputAccumulator<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, [1]: Tuple<U96Guarantee, U96Guarantee, U96Guarantee, U96Guarantee>) -> (core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>);

//! > function_costs
test::foo: OrderedHashMap({Const: 1000})

//! > ==========================================================================

//! > get_circuit_descriptor

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
use core::circuit::{
    AddModGate, get_circuit_descriptor, CircuitInput, CircuitDescriptor, Circuit, InverseGate,
    MulModGate, SubModGate,
};
type MyCircuit =
    Circuit<(AddModGate<CircuitInput<0>, CircuitInput<1>>, InverseGate<CircuitInput<2>>,
        MulModGate<CircuitInput<1>, CircuitInput<2>>,
        SubModGate<CircuitInput<2>, CircuitInput<0>>)>;

fn foo() -> CircuitDescriptor<MyCircuit> {
    get_circuit_descriptor::<MyCircuit>()
}

//! > casm
call rel 11;
[ap + 0] = [ap + -1] + 10, ap++;
[ap + 0] = 2, ap++;
[ap + 0] = [ap + -2] + 6, ap++;
[ap + 0] = 5, ap++;
ret;
ret;
dw 28;
dw 16;
dw 24;
dw 16;
dw 20;
dw 40;
dw 0;
dw 4;
dw 16;
dw 0;
dw 8;
dw 20;
dw 0;
dw 12;
dw 24;
dw 20;
dw 24;
dw 32;
dw 36;
dw 24;
dw 0;

//! > sierra_code
type CircuitDescriptor<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::InverseGate::<core::circuit::CircuitInput::<2>>, core::circuit::MulModGate::<core::circuit::CircuitInput::<1>, core::circuit::CircuitInput::<2>>, core::circuit::SubModGate::<core::circuit::CircuitInput::<2>, core::circuit::CircuitInput::<0>>)>> = CircuitDescriptor<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::InverseGate::<core::circuit::CircuitInput::<2>>, core::circuit::MulModGate::<core::circuit::CircuitInput::<1>, core::circuit::CircuitInput::<2>>, core::circuit::SubModGate::<core::circuit::CircuitInput::<2>, core::circuit::CircuitInput::<0>>)>> [storable: true, drop: true, dup: true, zero_sized: false];
type Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::InverseGate::<core::circuit::CircuitInput::<2>>, core::circuit::MulModGate::<core::circuit::CircuitInput::<1>, core::circuit::CircuitInput::<2>>, core::circuit::SubModGate::<core::circuit::CircuitInput::<2>, core::circuit::CircuitInput::<0>>)> = Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::InverseGate::<core::circuit::CircuitInput::<2>>, core::circuit::MulModGate::<core::circuit::CircuitInput::<1>, core::circuit::CircuitInput::<2>>, core::circuit::SubModGate::<core::circuit::CircuitInput::<2>, core::circuit::CircuitInput::<0>>)> [storable: false, drop: false, dup: false, zero_sized: true];
type core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>> = AddModGate<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>> [storable: false, drop: false, dup: false, zero_sized: false];
type core::circuit::InverseGate::<core::circuit::CircuitInput::<2>> = InverseGate<core::circuit::CircuitInput::<2>> [storable: false, drop: false, dup: false, zero_sized: false];
type core::circuit::MulModGate::<core::circuit::CircuitInput::<1>, core::circuit::CircuitInput::<2>> = MulModGate<core::circuit::CircuitInput::<1>, core::circuit::CircuitInput::<2>> [storable: false, drop: false, dup: false, zero_sized: false];
type core::circuit::SubModGate::<core::circuit::CircuitInput::<2>, core::circuit::CircuitInput::<0>> = SubModGate<core::circuit::CircuitInput::<2>, core::circuit::CircuitInput::<0>> [storable: false, drop: false, dup: false, zero_sized: false];
type (core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::InverseGate::<core::circuit::CircuitInput::<2>>, core::circuit::MulModGate::<core::circuit::CircuitInput::<1>, core::circuit::CircuitInput::<2>>, core::circuit::SubModGate::<core::circuit::CircuitInput::<2>, core::circuit::CircuitInput::<0>>) = Struct<ut@Tuple, core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::InverseGate::<core::circuit::CircuitInput::<2>>, core::circuit::MulModGate::<core::circuit::CircuitInput::<1>, core::circuit::CircuitInput::<2>>, core::circuit::SubModGate::<core::circuit::CircuitInput::<2>, core::circuit::CircuitInput::<0>>> [storable: false, drop: false, dup: false, zero_sized: false];
type core::circuit::CircuitInput::<0> = CircuitInput<0> [storable: false, drop: false, dup: false, zero_sized: false];
type core::circuit::CircuitInput::<2> = CircuitInput<2> [storable: false, drop: false, dup: false, zero_sized: false];
type core::circuit::CircuitInput::<1> = CircuitInput<1> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc get_circuit_descriptor<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::InverseGate::<core::circuit::CircuitInput::<2>>, core::circuit::MulModGate::<core::circuit::CircuitInput::<1>, core::circuit::CircuitInput::<2>>, core::circuit::SubModGate::<core::circuit::CircuitInput::<2>, core::circuit::CircuitInput::<0>>)>> = get_circuit_descriptor<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::InverseGate::<core::circuit::CircuitInput::<2>>, core::circuit::MulModGate::<core::circuit::CircuitInput::<1>, core::circuit::CircuitInput::<2>>, core::circuit::SubModGate::<core::circuit::CircuitInput::<2>, core::circuit::CircuitInput::<0>>)>>;

get_circuit_descriptor<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::InverseGate::<core::circuit::CircuitInput::<2>>, core::circuit::MulModGate::<core::circuit::CircuitInput::<1>, core::circuit::CircuitInput::<2>>, core::circuit::SubModGate::<core::circuit::CircuitInput::<2>, core::circuit::CircuitInput::<0>>)>>() -> ([0]); // 0
return([0]); // 1

test::foo@0() -> (CircuitDescriptor<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::InverseGate::<core::circuit::CircuitInput::<2>>, core::circuit::MulModGate::<core::circuit::CircuitInput::<1>, core::circuit::CircuitInput::<2>>, core::circuit::SubModGate::<core::circuit::CircuitInput::<2>, core::circuit::CircuitInput::<0>>)>>);

//! > function_costs
test::foo: OrderedHashMap({Const: 600})

//! > ==========================================================================

//! > try_into_circuit_modulus

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
use core::circuit::{u96, CircuitModulus, try_into_circuit_modulus};

fn foo(a: [u96; 4]) -> Option<CircuitModulus> {
    try_into_circuit_modulus(a)
}

//! > casm
jmp rel 16 if [fp + -3] != 0, ap++;
jmp rel 14 if [fp + -4] != 0;
jmp rel 12 if [fp + -5] != 0;
jmp rel 4 if [fp + -6] != 0;
jmp rel 15;
[fp + -6] = [ap + -1] + 1;
jmp rel 4 if [ap + -1] != 0;
jmp rel 9;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;

//! > sierra_code
type BoundedInt<0, 79228162514264337593543950335> = BoundedInt<0, 79228162514264337593543950335> [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>> = Struct<ut@Tuple, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>> [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type CircuitModulus = CircuitModulus [storable: true, drop: true, dup: true, zero_sized: false];
type core::option::Option::<core::circuit::CircuitModulus> = Enum<ut@core::option::Option::<core::circuit::CircuitModulus>, CircuitModulus, Unit> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc try_into_circuit_modulus = try_into_circuit_modulus;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<core::circuit::CircuitModulus>, 0> = enum_init<core::option::Option::<core::circuit::CircuitModulus>, 0>;
libfunc store_temp<core::option::Option::<core::circuit::CircuitModulus>> = store_temp<core::option::Option::<core::circuit::CircuitModulus>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::circuit::CircuitModulus>, 1> = enum_init<core::option::Option::<core::circuit::CircuitModulus>, 1>;

try_into_circuit_modulus([0]) { fallthrough([1]) 5() }; // 0
branch_align() -> (); // 1
enum_init<core::option::Option::<core::circuit::CircuitModulus>, 0>([1]) -> ([2]); // 2
store_temp<core::option::Option::<core::circuit::CircuitModulus>>([2]) -> ([2]); // 3
return([2]); // 4
branch_align() -> (); // 5
struct_construct<Unit>() -> ([3]); // 6
enum_init<core::option::Option::<core::circuit::CircuitModulus>, 1>([3]) -> ([4]); // 7
store_temp<core::option::Option::<core::circuit::CircuitModulus>>([4]) -> ([4]); // 8
return([4]); // 9

test::foo@0([0]: Tuple<BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>>) -> (core::option::Option::<core::circuit::CircuitModulus>);

//! > function_costs
test::foo: OrderedHashMap({Const: 1200})

//! > ==========================================================================

//! > eval_circuit (with AddModGate)

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
use core::circuit::{
    AddModGate, Circuit, CircuitData, CircuitInput, CircuitDescriptor, EvalCircuitResult,
    eval_circuit, CircuitModulus
};
type MyCircuit = Circuit<(AddModGate<CircuitInput<0>, CircuitInput<1>>, CircuitInput<2>,)>;

fn foo(
    desc: CircuitDescriptor<MyCircuit>, data: CircuitData<MyCircuit>, modulus: CircuitModulus
) -> EvalCircuitResult<MyCircuit> {
    eval_circuit::<MyCircuit>(desc, data, modulus, 0, 1)
}

//! > casm
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[fp + -7] = [ap + 0] + 16, ap++;
[ap + -2] = [[ap + -1] + 0];
[ap + -3] = [[ap + -1] + 1];
[ap + -3] = [[ap + -1] + 2];
[ap + -3] = [[ap + -1] + 3];
[fp + -6] = [[fp + -13] + 0];
[fp + -5] = [[fp + -13] + 1];
[fp + -4] = [[fp + -13] + 2];
[fp + -3] = [[fp + -13] + 3];
[ap + -1] = [[fp + -13] + 4];
[fp + -11] = [[fp + -13] + 5];
[fp + -10] = [[fp + -13] + 6];
[fp + -6] = [[fp + -12] + 0];
[fp + -5] = [[fp + -12] + 1];
[fp + -4] = [[fp + -12] + 2];
[fp + -3] = [[fp + -12] + 3];
[ap + -1] = [[fp + -12] + 4];
[fp + -9] = [[fp + -12] + 5];
%{
from starkware.cairo.lang.builtins.modulo.mod_builtin_runner import eval_circuit

memory[ap + 0] = run_circuit(
    memory=memory,
    values_ptr=memory[ap + -1],
    add_mod_builtin=memory[fp + -13],
    n_add_mods=memory[fp + -10],
    mul_mod_builtin=memory[fp + -12],
    n_mul_mods=memory[fp + -8],
    modulus_ptr=fp + -6,
)
%}
[ap + 0] = [[fp + -12] + 6], ap++;
[ap + 0] = [ap + -1] * 7, ap++;
[fp + -8] = [ap + 0] + [ap + -2], ap++;
jmp rel 31 if [ap + -1] != 0;
[ap + 0] = [fp + -13] + 7, ap++;
[ap + 0] = [fp + -12] + [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = [fp + -13] + 7, ap++;
[ap + 0] = [fp + -12] + [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;

//! > sierra_code
type BoundedInt<0, 0> = BoundedInt<0, 0> [storable: true, drop: true, dup: true, zero_sized: false];
type CircuitPartialOutputs<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>> = CircuitPartialOutputs<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>> [storable: true, drop: true, dup: false, zero_sized: false];
type CircuitFailureGuarantee = CircuitFailureGuarantee [storable: true, drop: false, dup: false, zero_sized: false];
type Tuple<CircuitPartialOutputs<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, CircuitFailureGuarantee> = Struct<ut@Tuple, CircuitPartialOutputs<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, CircuitFailureGuarantee> [storable: true, drop: false, dup: false, zero_sized: false];
type CircuitOutputs<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>> = CircuitOutputs<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>> [storable: true, drop: true, dup: true, zero_sized: false];
type core::circuit::EvalCircuitResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>> = Enum<ut@core::circuit::EvalCircuitResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, CircuitOutputs<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, Tuple<CircuitPartialOutputs<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, CircuitFailureGuarantee>> [storable: true, drop: false, dup: false, zero_sized: false];
type Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)> = Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)> [storable: false, drop: false, dup: false, zero_sized: true];
type core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>> = AddModGate<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>> [storable: false, drop: false, dup: false, zero_sized: false];
type core::circuit::CircuitInput::<2> = CircuitInput<2> [storable: false, drop: false, dup: false, zero_sized: false];
type (core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>) = Struct<ut@Tuple, core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>> [storable: false, drop: false, dup: false, zero_sized: false];
type core::circuit::CircuitInput::<1> = CircuitInput<1> [storable: false, drop: false, dup: false, zero_sized: false];
type core::circuit::CircuitInput::<0> = CircuitInput<0> [storable: false, drop: false, dup: false, zero_sized: false];
type CircuitModulus = CircuitModulus [storable: true, drop: true, dup: true, zero_sized: false];
type CircuitData<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>> = CircuitData<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>> [storable: true, drop: true, dup: false, zero_sized: false];
type CircuitDescriptor<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>> = CircuitDescriptor<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>> [storable: true, drop: true, dup: true, zero_sized: false];
type MulMod = MulMod [storable: true, drop: false, dup: false, zero_sized: false];
type AddMod = AddMod [storable: true, drop: false, dup: false, zero_sized: false];
type Const<BoundedInt<1, 1>, 1> = Const<BoundedInt<1, 1>, 1> [storable: false, drop: false, dup: false, zero_sized: false];
type BoundedInt<1, 1> = BoundedInt<1, 1> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<BoundedInt<0, 0>, 0> = Const<BoundedInt<0, 0>, 0> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc const_as_immediate<Const<BoundedInt<0, 0>, 0>> = const_as_immediate<Const<BoundedInt<0, 0>, 0>>;
libfunc const_as_immediate<Const<BoundedInt<1, 1>, 1>> = const_as_immediate<Const<BoundedInt<1, 1>, 1>>;
libfunc store_temp<BoundedInt<0, 0>> = store_temp<BoundedInt<0, 0>>;
libfunc store_temp<BoundedInt<1, 1>> = store_temp<BoundedInt<1, 1>>;
libfunc eval_circuit<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>> = eval_circuit<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>;
libfunc branch_align = branch_align;
libfunc enum_init<core::circuit::EvalCircuitResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, 0> = enum_init<core::circuit::EvalCircuitResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, 0>;
libfunc store_temp<AddMod> = store_temp<AddMod>;
libfunc store_temp<MulMod> = store_temp<MulMod>;
libfunc store_temp<core::circuit::EvalCircuitResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>> = store_temp<core::circuit::EvalCircuitResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>>;
libfunc struct_construct<Tuple<CircuitPartialOutputs<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, CircuitFailureGuarantee>> = struct_construct<Tuple<CircuitPartialOutputs<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, CircuitFailureGuarantee>>;
libfunc enum_init<core::circuit::EvalCircuitResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, 1> = enum_init<core::circuit::EvalCircuitResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, 1>;

const_as_immediate<Const<BoundedInt<0, 0>, 0>>() -> ([5]); // 0
const_as_immediate<Const<BoundedInt<1, 1>, 1>>() -> ([6]); // 1
store_temp<BoundedInt<0, 0>>([5]) -> ([5]); // 2
store_temp<BoundedInt<1, 1>>([6]) -> ([6]); // 3
eval_circuit<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>([0], [1], [2], [3], [4], [5], [6]) { fallthrough([7], [8], [9]) 11([10], [11], [12], [13]) }; // 4
branch_align() -> (); // 5
enum_init<core::circuit::EvalCircuitResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, 0>([9]) -> ([14]); // 6
store_temp<AddMod>([7]) -> ([7]); // 7
store_temp<MulMod>([8]) -> ([8]); // 8
store_temp<core::circuit::EvalCircuitResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>>([14]) -> ([14]); // 9
return([7], [8], [14]); // 10
branch_align() -> (); // 11
struct_construct<Tuple<CircuitPartialOutputs<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, CircuitFailureGuarantee>>([12], [13]) -> ([15]); // 12
enum_init<core::circuit::EvalCircuitResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, 1>([15]) -> ([16]); // 13
store_temp<AddMod>([10]) -> ([10]); // 14
store_temp<MulMod>([11]) -> ([11]); // 15
store_temp<core::circuit::EvalCircuitResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>>([16]) -> ([16]); // 16
return([10], [11], [16]); // 17

test::foo@0([0]: AddMod, [1]: MulMod, [2]: CircuitDescriptor<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, [3]: CircuitData<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, [4]: CircuitModulus) -> (AddMod, MulMod, core::circuit::EvalCircuitResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>);

//! > function_costs
test::foo: OrderedHashMap({AddMod: 1, MulMod: 3, Const: 4100})

//! > ==========================================================================

//! > eval_circuit (with No AddModGate)

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
use core::circuit::{
    InverseGate, Circuit, CircuitData, CircuitInput, CircuitDescriptor, EvalCircuitResult,
    eval_circuit, CircuitModulus
};
type MyCircuit = Circuit<(InverseGate<CircuitInput<0>>,)>;

fn foo(
    desc: CircuitDescriptor<MyCircuit>, data: CircuitData<MyCircuit>, modulus: CircuitModulus
) -> EvalCircuitResult<MyCircuit> {
    eval_circuit::<MyCircuit>(desc, data, modulus, 0, 1)
}

//! > casm
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[fp + -7] = [ap + 0] + 8, ap++;
[ap + -2] = [[ap + -1] + 0];
[ap + -3] = [[ap + -1] + 1];
[ap + -3] = [[ap + -1] + 2];
[ap + -3] = [[ap + -1] + 3];
[fp + -6] = [[fp + -12] + 0];
[fp + -5] = [[fp + -12] + 1];
[fp + -4] = [[fp + -12] + 2];
[fp + -3] = [[fp + -12] + 3];
[ap + -1] = [[fp + -12] + 4];
[fp + -9] = [[fp + -12] + 5];
%{
from starkware.cairo.lang.builtins.modulo.mod_builtin_runner import eval_circuit

memory[ap + 0] = run_circuit(
    memory=memory,
    values_ptr=memory[ap + -1],
    add_mod_builtin=memory[fp + -13],
    n_add_mods=memory[fp + -10],
    mul_mod_builtin=memory[fp + -12],
    n_mul_mods=memory[fp + -8],
    modulus_ptr=fp + -6,
)
%}
[ap + 0] = [[fp + -12] + 6], ap++;
[ap + 0] = [ap + -1] * 7, ap++;
[fp + -8] = [ap + 0] + [ap + -2], ap++;
jmp rel 31 if [ap + -1] != 0;
[ap + 0] = [fp + -13] + 0, ap++;
[ap + 0] = [fp + -12] + [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = [fp + -13] + 0, ap++;
[ap + 0] = [fp + -12] + [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;

//! > sierra_code
type BoundedInt<0, 0> = BoundedInt<0, 0> [storable: true, drop: true, dup: true, zero_sized: false];
type CircuitPartialOutputs<Circuit<(core::circuit::InverseGate::<core::circuit::CircuitInput::<0>>,)>> = CircuitPartialOutputs<Circuit<(core::circuit::InverseGate::<core::circuit::CircuitInput::<0>>,)>> [storable: true, drop: true, dup: false, zero_sized: false];
type CircuitFailureGuarantee = CircuitFailureGuarantee [storable: true, drop: false, dup: false, zero_sized: false];
type Tuple<CircuitPartialOutputs<Circuit<(core::circuit::InverseGate::<core::circuit::CircuitInput::<0>>,)>>, CircuitFailureGuarantee> = Struct<ut@Tuple, CircuitPartialOutputs<Circuit<(core::circuit::InverseGate::<core::circuit::CircuitInput::<0>>,)>>, CircuitFailureGuarantee> [storable: true, drop: false, dup: false, zero_sized: false];
type CircuitOutputs<Circuit<(core::circuit::InverseGate::<core::circuit::CircuitInput::<0>>,)>> = CircuitOutputs<Circuit<(core::circuit::InverseGate::<core::circuit::CircuitInput::<0>>,)>> [storable: true, drop: true, dup: true, zero_sized: false];
type core::circuit::EvalCircuitResult::<core::circuit::Circuit::<(core::circuit::InverseGate::<core::circuit::CircuitInput::<0>>,)>> = Enum<ut@core::circuit::EvalCircuitResult::<core::circuit::Circuit::<(core::circuit::InverseGate::<core::circuit::CircuitInput::<0>>,)>>, CircuitOutputs<Circuit<(core::circuit::InverseGate::<core::circuit::CircuitInput::<0>>,)>>, Tuple<CircuitPartialOutputs<Circuit<(core::circuit::InverseGate::<core::circuit::CircuitInput::<0>>,)>>, CircuitFailureGuarantee>> [storable: true, drop: false, dup: false, zero_sized: false];
type Circuit<(core::circuit::InverseGate::<core::circuit::CircuitInput::<0>>,)> = Circuit<(core::circuit::InverseGate::<core::circuit::CircuitInput::<0>>,)> [storable: false, drop: false, dup: false, zero_sized: true];
type core::circuit::InverseGate::<core::circuit::CircuitInput::<0>> = InverseGate<core::circuit::CircuitInput::<0>> [storable: false, drop: false, dup: false, zero_sized: false];
type (core::circuit::InverseGate::<core::circuit::CircuitInput::<0>>,) = Struct<ut@Tuple, core::circuit::InverseGate::<core::circuit::CircuitInput::<0>>> [storable: false, drop: false, dup: false, zero_sized: false];
type core::circuit::CircuitInput::<0> = CircuitInput<0> [storable: false, drop: false, dup: false, zero_sized: false];
type CircuitModulus = CircuitModulus [storable: true, drop: true, dup: true, zero_sized: false];
type CircuitData<Circuit<(core::circuit::InverseGate::<core::circuit::CircuitInput::<0>>,)>> = CircuitData<Circuit<(core::circuit::InverseGate::<core::circuit::CircuitInput::<0>>,)>> [storable: true, drop: true, dup: false, zero_sized: false];
type CircuitDescriptor<Circuit<(core::circuit::InverseGate::<core::circuit::CircuitInput::<0>>,)>> = CircuitDescriptor<Circuit<(core::circuit::InverseGate::<core::circuit::CircuitInput::<0>>,)>> [storable: true, drop: true, dup: true, zero_sized: false];
type MulMod = MulMod [storable: true, drop: false, dup: false, zero_sized: false];
type AddMod = AddMod [storable: true, drop: false, dup: false, zero_sized: false];
type Const<BoundedInt<1, 1>, 1> = Const<BoundedInt<1, 1>, 1> [storable: false, drop: false, dup: false, zero_sized: false];
type BoundedInt<1, 1> = BoundedInt<1, 1> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<BoundedInt<0, 0>, 0> = Const<BoundedInt<0, 0>, 0> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc const_as_immediate<Const<BoundedInt<0, 0>, 0>> = const_as_immediate<Const<BoundedInt<0, 0>, 0>>;
libfunc const_as_immediate<Const<BoundedInt<1, 1>, 1>> = const_as_immediate<Const<BoundedInt<1, 1>, 1>>;
libfunc store_temp<BoundedInt<0, 0>> = store_temp<BoundedInt<0, 0>>;
libfunc store_temp<BoundedInt<1, 1>> = store_temp<BoundedInt<1, 1>>;
libfunc eval_circuit<Circuit<(core::circuit::InverseGate::<core::circuit::CircuitInput::<0>>,)>> = eval_circuit<Circuit<(core::circuit::InverseGate::<core::circuit::CircuitInput::<0>>,)>>;
libfunc branch_align = branch_align;
libfunc enum_init<core::circuit::EvalCircuitResult::<core::circuit::Circuit::<(core::circuit::InverseGate::<core::circuit::CircuitInput::<0>>,)>>, 0> = enum_init<core::circuit::EvalCircuitResult::<core::circuit::Circuit::<(core::circuit::InverseGate::<core::circuit::CircuitInput::<0>>,)>>, 0>;
libfunc store_temp<AddMod> = store_temp<AddMod>;
libfunc store_temp<MulMod> = store_temp<MulMod>;
libfunc store_temp<core::circuit::EvalCircuitResult::<core::circuit::Circuit::<(core::circuit::InverseGate::<core::circuit::CircuitInput::<0>>,)>>> = store_temp<core::circuit::EvalCircuitResult::<core::circuit::Circuit::<(core::circuit::InverseGate::<core::circuit::CircuitInput::<0>>,)>>>;
libfunc struct_construct<Tuple<CircuitPartialOutputs<Circuit<(core::circuit::InverseGate::<core::circuit::CircuitInput::<0>>,)>>, CircuitFailureGuarantee>> = struct_construct<Tuple<CircuitPartialOutputs<Circuit<(core::circuit::InverseGate::<core::circuit::CircuitInput::<0>>,)>>, CircuitFailureGuarantee>>;
libfunc enum_init<core::circuit::EvalCircuitResult::<core::circuit::Circuit::<(core::circuit::InverseGate::<core::circuit::CircuitInput::<0>>,)>>, 1> = enum_init<core::circuit::EvalCircuitResult::<core::circuit::Circuit::<(core::circuit::InverseGate::<core::circuit::CircuitInput::<0>>,)>>, 1>;

const_as_immediate<Const<BoundedInt<0, 0>, 0>>() -> ([5]); // 0
const_as_immediate<Const<BoundedInt<1, 1>, 1>>() -> ([6]); // 1
store_temp<BoundedInt<0, 0>>([5]) -> ([5]); // 2
store_temp<BoundedInt<1, 1>>([6]) -> ([6]); // 3
eval_circuit<Circuit<(core::circuit::InverseGate::<core::circuit::CircuitInput::<0>>,)>>([0], [1], [2], [3], [4], [5], [6]) { fallthrough([7], [8], [9]) 11([10], [11], [12], [13]) }; // 4
branch_align() -> (); // 5
enum_init<core::circuit::EvalCircuitResult::<core::circuit::Circuit::<(core::circuit::InverseGate::<core::circuit::CircuitInput::<0>>,)>>, 0>([9]) -> ([14]); // 6
store_temp<AddMod>([7]) -> ([7]); // 7
store_temp<MulMod>([8]) -> ([8]); // 8
store_temp<core::circuit::EvalCircuitResult::<core::circuit::Circuit::<(core::circuit::InverseGate::<core::circuit::CircuitInput::<0>>,)>>>([14]) -> ([14]); // 9
return([7], [8], [14]); // 10
branch_align() -> (); // 11
struct_construct<Tuple<CircuitPartialOutputs<Circuit<(core::circuit::InverseGate::<core::circuit::CircuitInput::<0>>,)>>, CircuitFailureGuarantee>>([12], [13]) -> ([15]); // 12
enum_init<core::circuit::EvalCircuitResult::<core::circuit::Circuit::<(core::circuit::InverseGate::<core::circuit::CircuitInput::<0>>,)>>, 1>([15]) -> ([16]); // 13
store_temp<AddMod>([10]) -> ([10]); // 14
store_temp<MulMod>([11]) -> ([11]); // 15
store_temp<core::circuit::EvalCircuitResult::<core::circuit::Circuit::<(core::circuit::InverseGate::<core::circuit::CircuitInput::<0>>,)>>>([16]) -> ([16]); // 16
return([10], [11], [16]); // 17

test::foo@0([0]: AddMod, [1]: MulMod, [2]: CircuitDescriptor<Circuit<(core::circuit::InverseGate::<core::circuit::CircuitInput::<0>>,)>>, [3]: CircuitData<Circuit<(core::circuit::InverseGate::<core::circuit::CircuitInput::<0>>,)>>, [4]: CircuitModulus) -> (AddMod, MulMod, core::circuit::EvalCircuitResult::<core::circuit::Circuit::<(core::circuit::InverseGate::<core::circuit::CircuitInput::<0>>,)>>);

//! > function_costs
test::foo: OrderedHashMap({MulMod: 2, Const: 3400})

//! > ==========================================================================

//! > circuit_failure_guarantee_verify

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
use core::circuit::{CircuitFailureGuarantee, U96LimbsLTGuarantee,
    circuit_failure_guarantee_verify};

fn foo(
    guarantee: CircuitFailureGuarantee,
) -> U96LimbsLTGuarantee<4> {
    circuit_failure_guarantee_verify(guarantee, 0, 1)
}

//! > casm
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -8] * 3, ap++;
[ap + 0] = [fp + -10] + [ap + -1], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -2] + 1], ap++;
[ap + -6] = [[ap + -3] + 2];
[fp + -11] = [ap + 0] + [fp + -7], ap++;
[ap + -7] = [[fp + -11] + 0];
[ap + -7] = [[fp + -11] + 1];
[ap + -7] = [[fp + -11] + 2];
[ap + -7] = [[fp + -11] + 3];
%{ memory[ap + 0] = segments.add() %}
[ap + -3] = [[ap + 0] + 0], ap++;
[ap + -3] = [[ap + -1] + 1];
[ap + -2] = [[ap + -1] + 2];
[fp + -8] = [[fp + -11] + 4];
[fp + -9] = [ap + 0] + [fp + -8], ap++;
[ap + -1] = [[fp + -11] + 5];
[fp + -6] = [[fp + -12] + 0];
[fp + -5] = [[fp + -12] + 1];
[fp + -4] = [[fp + -12] + 2];
[fp + -3] = [[fp + -12] + 3];
[fp + -7] = [[fp + -12] + 4];
[ap + -2] = [[fp + -12] + 5];
[ap + -8] = [[fp + -12] + 6];
[ap + 0] = [fp + -7] + [ap + -5], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -2] + 1], ap++;
[ap + 0] = [[ap + -3] + 2], ap++;
[ap + 0] = [[ap + -4] + 3], ap++;
jmp rel 9 if [ap + -4] != 0;
jmp rel 7 if [ap + -3] != 0;
jmp rel 5 if [ap + -2] != 0;
jmp rel 3 if [ap + -1] != 0;
[ap + -13] = [ap + -14];
[ap + 0] = [fp + -12] + 7, ap++;
[ap + 0] = [fp + -11] + 6, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;

//! > sierra_code
type BoundedInt<0, 0> = BoundedInt<0, 0> [storable: true, drop: true, dup: true, zero_sized: false];
type U96LimbsLTGuarantee<4> = U96LimbsLTGuarantee<4> [storable: true, drop: false, dup: false, zero_sized: false];
type CircuitFailureGuarantee = CircuitFailureGuarantee [storable: true, drop: false, dup: false, zero_sized: false];
type MulMod = MulMod [storable: true, drop: false, dup: false, zero_sized: false];
type RangeCheck96 = RangeCheck96 [storable: true, drop: false, dup: false, zero_sized: false];
type Const<BoundedInt<1, 1>, 1> = Const<BoundedInt<1, 1>, 1> [storable: false, drop: false, dup: false, zero_sized: false];
type BoundedInt<1, 1> = BoundedInt<1, 1> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<BoundedInt<0, 0>, 0> = Const<BoundedInt<0, 0>, 0> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc const_as_immediate<Const<BoundedInt<0, 0>, 0>> = const_as_immediate<Const<BoundedInt<0, 0>, 0>>;
libfunc const_as_immediate<Const<BoundedInt<1, 1>, 1>> = const_as_immediate<Const<BoundedInt<1, 1>, 1>>;
libfunc store_temp<BoundedInt<0, 0>> = store_temp<BoundedInt<0, 0>>;
libfunc store_temp<BoundedInt<1, 1>> = store_temp<BoundedInt<1, 1>>;
libfunc circuit_failure_guarantee_verify = circuit_failure_guarantee_verify;
libfunc store_temp<MulMod> = store_temp<MulMod>;
libfunc store_temp<RangeCheck96> = store_temp<RangeCheck96>;
libfunc store_temp<U96LimbsLTGuarantee<4>> = store_temp<U96LimbsLTGuarantee<4>>;

const_as_immediate<Const<BoundedInt<0, 0>, 0>>() -> ([3]); // 0
const_as_immediate<Const<BoundedInt<1, 1>, 1>>() -> ([4]); // 1
store_temp<BoundedInt<0, 0>>([3]) -> ([3]); // 2
store_temp<BoundedInt<1, 1>>([4]) -> ([4]); // 3
circuit_failure_guarantee_verify([1], [0], [2], [3], [4]) -> ([5], [6], [7]); // 4
store_temp<MulMod>([6]) -> ([6]); // 5
store_temp<RangeCheck96>([5]) -> ([5]); // 6
store_temp<U96LimbsLTGuarantee<4>>([7]) -> ([7]); // 7
return([6], [5], [7]); // 8

test::foo@0([0]: MulMod, [1]: RangeCheck96, [2]: CircuitFailureGuarantee) -> (MulMod, RangeCheck96, U96LimbsLTGuarantee<4>);

//! > function_costs
test::foo: OrderedHashMap({RangeCheck96: 6, Const: 4500})

//! > ==========================================================================

//! > get_circuit_output

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
use core::circuit::{u384, AddModGate, CircuitInput, Circuit, CircuitOutputs, get_circuit_output,
 U96LimbsLTGuarantee};


type MyCircuit = Circuit<(AddModGate<CircuitInput<0>, CircuitInput<1>>, CircuitInput<2>,)>;

fn foo(
    outputs: CircuitOutputs<MyCircuit>,
) -> (u384, U96LimbsLTGuarantee::<4>) {
    get_circuit_output::<MyCircuit, CircuitInput::<1>>(outputs)
}

//! > casm
[ap + 0] = [fp + -7] + 20, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -2] + 1], ap++;
[ap + 0] = [[ap + -3] + 2], ap++;
[ap + 0] = [[ap + -4] + 3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;

//! > sierra_code
type CircuitOutputs<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>> = CircuitOutputs<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>> [storable: true, drop: true, dup: true, zero_sized: false];
type BoundedInt<0, 79228162514264337593543950335> = BoundedInt<0, 79228162514264337593543950335> [storable: true, drop: true, dup: true, zero_sized: false];
type core::circuit::u384 = Struct<ut@core::circuit::u384, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>> [storable: true, drop: true, dup: true, zero_sized: false];
type U96LimbsLTGuarantee<4> = U96LimbsLTGuarantee<4> [storable: true, drop: false, dup: false, zero_sized: false];
type Tuple<core::circuit::u384, U96LimbsLTGuarantee<4>> = Struct<ut@Tuple, core::circuit::u384, U96LimbsLTGuarantee<4>> [storable: true, drop: false, dup: false, zero_sized: false];
type core::circuit::CircuitInput::<1> = CircuitInput<1> [storable: false, drop: false, dup: false, zero_sized: false];
type Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)> = Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)> [storable: false, drop: false, dup: false, zero_sized: true];
type core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>> = AddModGate<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>> [storable: false, drop: false, dup: false, zero_sized: false];
type core::circuit::CircuitInput::<2> = CircuitInput<2> [storable: false, drop: false, dup: false, zero_sized: false];
type (core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>) = Struct<ut@Tuple, core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>> [storable: false, drop: false, dup: false, zero_sized: false];
type core::circuit::CircuitInput::<0> = CircuitInput<0> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc get_circuit_output<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>, core::circuit::CircuitInput::<1>> = get_circuit_output<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>, core::circuit::CircuitInput::<1>>;
libfunc struct_construct<Tuple<core::circuit::u384, U96LimbsLTGuarantee<4>>> = struct_construct<Tuple<core::circuit::u384, U96LimbsLTGuarantee<4>>>;
libfunc store_temp<Tuple<core::circuit::u384, U96LimbsLTGuarantee<4>>> = store_temp<Tuple<core::circuit::u384, U96LimbsLTGuarantee<4>>>;

get_circuit_output<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>, core::circuit::CircuitInput::<1>>([0]) -> ([1], [2]); // 0
struct_construct<Tuple<core::circuit::u384, U96LimbsLTGuarantee<4>>>([1], [2]) -> ([3]); // 1
store_temp<Tuple<core::circuit::u384, U96LimbsLTGuarantee<4>>>([3]) -> ([3]); // 2
return([3]); // 3

test::foo@0([0]: CircuitOutputs<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>) -> (Tuple<core::circuit::u384, U96LimbsLTGuarantee<4>>);

//! > function_costs
test::foo: OrderedHashMap({Const: 1700})

//! > ==========================================================================

//! > into_u96_guarantee

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
use core::circuit::{U96Guarantee, into_u96_guarantee};


fn foo(val: u8) -> U96Guarantee {
    into_u96_guarantee(val)
}

//! > casm
[ap + 0] = [fp + -3], ap++;
ret;

//! > sierra_code
type u8 = u8 [storable: true, drop: true, dup: true, zero_sized: false];
type U96Guarantee = U96Guarantee [storable: true, drop: false, dup: false, zero_sized: false];

libfunc into_u96_guarantee<u8> = into_u96_guarantee<u8>;
libfunc store_temp<U96Guarantee> = store_temp<U96Guarantee>;

into_u96_guarantee<u8>([0]) -> ([1]); // 0
store_temp<U96Guarantee>([1]) -> ([1]); // 1
return([1]); // 2

test::foo@0([0]: u8) -> (U96Guarantee);

//! > function_costs
test::foo: OrderedHashMap({Const: 100})

//! > ==========================================================================

//! > u96_guarantee_verify

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
use core::circuit::{U96Guarantee, u96_guarantee_verify};


fn foo(guarantee: U96Guarantee) {
    u96_guarantee_verify(guarantee)
}

//! > casm
[fp + -3] = [[fp + -4] + 0];
[ap + 0] = [fp + -4] + 1, ap++;
ret;

//! > sierra_code
type RangeCheck96 = RangeCheck96 [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type U96Guarantee = U96Guarantee [storable: true, drop: false, dup: false, zero_sized: false];

libfunc u96_guarantee_verify = u96_guarantee_verify;
libfunc store_temp<RangeCheck96> = store_temp<RangeCheck96>;

u96_guarantee_verify([0], [1]) -> ([2]); // 0
store_temp<RangeCheck96>([2]) -> ([2]); // 1
return([2]); // 2

test::foo@0([0]: RangeCheck96, [1]: U96Guarantee) -> (RangeCheck96);

//! > function_costs
test::foo: OrderedHashMap({RangeCheck96: 1, Const: 200})

//! > ==========================================================================

//! > u96_limbs_less_than_guarantee_verify for 4 limbs.

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
use core::circuit::{
    NextU96LessThanGuarantee, U96LimbsLTGuarantee, u96_limbs_less_than_guarantee_verify
};

fn foo(guarantee: U96LimbsLTGuarantee<4>) -> NextU96LessThanGuarantee<3> {
    u96_limbs_less_than_guarantee_verify(guarantee)
}

//! > casm
[fp + -3] = [ap + 0] + [fp + -7], ap++;
jmp rel 11 if [ap + -1] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
ret;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
ret;

//! > sierra_code
type U96LimbsLTGuarantee<4> = U96LimbsLTGuarantee<4> [storable: true, drop: false, dup: false, zero_sized: false];
type U96LimbsLTGuarantee<3> = U96LimbsLTGuarantee<3> [storable: true, drop: false, dup: false, zero_sized: false];
type U96Guarantee = U96Guarantee [storable: true, drop: false, dup: false, zero_sized: false];
type core::circuit::NextU96LessThanGuarantee::<3> = Enum<ut@core::circuit::NextU96LessThanGuarantee::<3>, U96LimbsLTGuarantee<3>, U96Guarantee> [storable: true, drop: false, dup: false, zero_sized: false];

libfunc u96_limbs_less_than_guarantee_verify<4> = u96_limbs_less_than_guarantee_verify<4>;
libfunc branch_align = branch_align;
libfunc enum_init<core::circuit::NextU96LessThanGuarantee::<3>, 0> = enum_init<core::circuit::NextU96LessThanGuarantee::<3>, 0>;
libfunc store_temp<core::circuit::NextU96LessThanGuarantee::<3>> = store_temp<core::circuit::NextU96LessThanGuarantee::<3>>;
libfunc enum_init<core::circuit::NextU96LessThanGuarantee::<3>, 1> = enum_init<core::circuit::NextU96LessThanGuarantee::<3>, 1>;

u96_limbs_less_than_guarantee_verify<4>([0]) { fallthrough([1]) 5([2]) }; // 0
branch_align() -> (); // 1
enum_init<core::circuit::NextU96LessThanGuarantee::<3>, 0>([1]) -> ([3]); // 2
store_temp<core::circuit::NextU96LessThanGuarantee::<3>>([3]) -> ([3]); // 3
return([3]); // 4
branch_align() -> (); // 5
enum_init<core::circuit::NextU96LessThanGuarantee::<3>, 1>([2]) -> ([4]); // 6
store_temp<core::circuit::NextU96LessThanGuarantee::<3>>([4]) -> ([4]); // 7
return([4]); // 8

test::foo@0([0]: U96LimbsLTGuarantee<4>) -> (core::circuit::NextU96LessThanGuarantee::<3>);

//! > function_costs
test::foo: OrderedHashMap({Const: 900})

//! > ==========================================================================

//! > u96_single_limb_less_than_guarantee_verify.

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
use core::circuit::{
    U96LimbsLTGuarantee, U96Guarantee, u96_single_limb_less_than_guarantee_verify
};

fn foo(guarantee: U96LimbsLTGuarantee<1>) -> U96Guarantee {
    u96_single_limb_less_than_guarantee_verify(guarantee)
}

//! > casm
[fp + -3] = [ap + 0] + [fp + -4], ap++;
ret;

//! > sierra_code
type U96LimbsLTGuarantee<1> = U96LimbsLTGuarantee<1> [storable: true, drop: false, dup: false, zero_sized: false];
type U96Guarantee = U96Guarantee [storable: true, drop: false, dup: false, zero_sized: false];

libfunc u96_single_limb_less_than_guarantee_verify = u96_single_limb_less_than_guarantee_verify;
libfunc store_temp<U96Guarantee> = store_temp<U96Guarantee>;

u96_single_limb_less_than_guarantee_verify([0]) -> ([1]); // 0
store_temp<U96Guarantee>([1]) -> ([1]); // 1
return([1]); // 2

test::foo@0([0]: U96LimbsLTGuarantee<1>) -> (U96Guarantee);

//! > function_costs
test::foo: OrderedHashMap({Const: 100})

//! > ==========================================================================

//! > U96LimbsLTGuarantee<4> full destruct.

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(guarantee: core::circuit::U96LimbsLTGuarantee<4>) {}

//! > casm
[fp + -3] = [ap + 0] + [fp + -7], ap++;
jmp rel 19 if [ap + -1] != 0;
[fp + -4] = [ap + 0] + [fp + -8], ap++;
jmp rel 11 if [ap + -1] != 0;
[fp + -5] = [ap + 0] + [fp + -9], ap++;
jmp rel 5 if [ap + -1] != 0;
[fp + -6] = [ap + 0] + [fp + -10], ap++;
jmp rel 13;
[ap + 0] = [ap + -1], ap++;
jmp rel 10;
ap += 1;
[ap + 0] = [ap + -2], ap++;
jmp rel 5;
ap += 2;
[ap + 0] = [ap + -3], ap++;
[ap + -1] = [[fp + -11] + 0];
[ap + 0] = [fp + -11] + 1, ap++;
ret;

//! > sierra_code
type U96LimbsLTGuarantee<4> = U96LimbsLTGuarantee<4> [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type RangeCheck96 = RangeCheck96 [storable: true, drop: false, dup: false, zero_sized: false];
type U96LimbsLTGuarantee<1> = U96LimbsLTGuarantee<1> [storable: true, drop: false, dup: false, zero_sized: false];
type U96LimbsLTGuarantee<2> = U96LimbsLTGuarantee<2> [storable: true, drop: false, dup: false, zero_sized: false];
type U96Guarantee = U96Guarantee [storable: true, drop: false, dup: false, zero_sized: false];
type U96LimbsLTGuarantee<3> = U96LimbsLTGuarantee<3> [storable: true, drop: false, dup: false, zero_sized: false];

libfunc u96_limbs_less_than_guarantee_verify<4> = u96_limbs_less_than_guarantee_verify<4>;
libfunc branch_align = branch_align;
libfunc u96_limbs_less_than_guarantee_verify<3> = u96_limbs_less_than_guarantee_verify<3>;
libfunc u96_limbs_less_than_guarantee_verify<2> = u96_limbs_less_than_guarantee_verify<2>;
libfunc u96_single_limb_less_than_guarantee_verify = u96_single_limb_less_than_guarantee_verify;
libfunc store_temp<U96Guarantee> = store_temp<U96Guarantee>;
libfunc jump = jump;
libfunc u96_guarantee_verify = u96_guarantee_verify;
libfunc store_temp<RangeCheck96> = store_temp<RangeCheck96>;

u96_limbs_less_than_guarantee_verify<4>([1]) { fallthrough([2]) 15([3]) }; // 0
branch_align() -> (); // 1
u96_limbs_less_than_guarantee_verify<3>([2]) { fallthrough([4]) 12([5]) }; // 2
branch_align() -> (); // 3
u96_limbs_less_than_guarantee_verify<2>([4]) { fallthrough([6]) 9([7]) }; // 4
branch_align() -> (); // 5
u96_single_limb_less_than_guarantee_verify([6]) -> ([8]); // 6
store_temp<U96Guarantee>([8]) -> ([9]); // 7
jump() { 17() }; // 8
branch_align() -> (); // 9
store_temp<U96Guarantee>([7]) -> ([9]); // 10
jump() { 17() }; // 11
branch_align() -> (); // 12
store_temp<U96Guarantee>([5]) -> ([9]); // 13
jump() { 17() }; // 14
branch_align() -> (); // 15
store_temp<U96Guarantee>([3]) -> ([9]); // 16
u96_guarantee_verify([0], [9]) -> ([10]); // 17
store_temp<RangeCheck96>([10]) -> ([10]); // 18
return([10]); // 19

test::foo@0([0]: RangeCheck96, [1]: U96LimbsLTGuarantee<4>) -> (RangeCheck96);

//! > function_costs
test::foo: OrderedHashMap({RangeCheck96: 1, Const: 1000})
