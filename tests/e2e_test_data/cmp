//! > u128 lt

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
use core::num::traits::{WideMul, CheckedSub};
use core::internal::{
        bounded_int, bounded_int::{BoundedInt, AddHelper, MulHelper, DivRemHelper}
};

pub const P: felt252 = 0x7fffffff;

type ConstValue<const VALUE: felt252> = BoundedInt<VALUE, VALUE>;

const M31_P: NonZero<ConstValue<0x7fffffff>> = 0x7fffffff;

impl DivRemU32ByP of DivRemHelper<u32, ConstValue<0x7fffffff>> {
    type DivT = BoundedInt<0, 2>;
    type RemT = BoundedInt<0, {P - 1}>;
}

impl DivRemU64ByP of DivRemHelper<u64, ConstValue<0x7fffffff>> {
    type DivT = BoundedInt<0, 8589934596>;
    type RemT = BoundedInt<0, {P - 1}>;
}

/// Equals `2^31 - 1`.
const P32NZ: NonZero<u32> = 0x7fffffff;

/// Equals `2^31 - 1`.
const P64NZ: NonZero<u64> = 0x7fffffff;

/// Equals `2^31 - 1`.
const P128NZ: NonZero<u128> = 0x7fffffff;

pub const R: CM31 = CM31 { a: M31 { inner: 2 }, b: M31 { inner: 1 } };

type M31InnerT = BoundedInt<0, {P - 1}>;

#[derive(Copy, Drop, Debug, PartialEq)]
pub struct M31 {
    pub inner: M31InnerT
}


#[generate_trait]
pub impl M31Impl of M31Trait {
    #[inline]
    fn reduce_u32(val: u32) -> M31 {
        let (_, res) = bounded_int::div_rem(val, M31_P);
      
        M31 { inner: core::integer::upcast(res) }
    }

    #[inline]
    fn reduce_u64(val: u64) -> M31 {
        let (_, res) = bounded_int::div_rem(val, M31_P);
      
        M31 { inner: core::integer::upcast(res) }
    }

    // #[inline]
    // fn reduce_u128(val: u128) -> M31 {
    //     let (_, res) = core::integer::u128_safe_divmod(val, P128NZ);
    //     M31 { inner: res.try_into().unwrap() }
    // }

    // #[inline]
    // fn sqn(v: M31, n: usize) -> M31 {
    //     if n == 0 {
    //         return v;
    //     }
    //     Self::sqn(v * v, n - 1)
    // }

    // fn inverse(self: M31) -> M31 {
    //     assert!(self.is_non_zero());
    //     let t0 = Self::sqn(self, 2) * self;
    //     let t1 = Self::sqn(t0, 1) * t0;
    //     let t2 = Self::sqn(t1, 3) * t0;
    //     let t3 = Self::sqn(t2, 1) * t0;
    //     let t4 = Self::sqn(t3, 8) * t3;
    //     let t5 = Self::sqn(t4, 8) * t3;
    //     Self::sqn(t5, 7) * t2
    // }
}


pub impl M31Zero of core::num::traits::Zero<M31> {
    #[inline]
    fn zero() -> M31 {
        M31 { inner: 0 }
    }

    fn is_zero(self: @M31) -> bool {
        *self.inner == 0
    }

    fn is_non_zero(self: @M31) -> bool {
        *self.inner != 0
    }
}

#[derive(Copy, Drop, Debug, PartialEq)]
pub struct CM31 {
    pub a: M31,
    pub b: M31,
}

#[derive(Copy, Drop, Debug, PartialEq)]
pub struct QM31 {
    pub a: CM31,
    pub b: CM31,
}




pub impl M31AddConstrainP of 
    core::internal::bounded_int::ConstrainHelper<BoundedInt::<0, {2*(P-1)}>, P> {
        type LowT = BoundedInt<0, {P-1}>;
        type HighT = BoundedInt<{P}, {2*(P-1)}>;
}



pub impl M31Add of core::traits::Add<M31> {
    #[inline]
    fn add(lhs: M31, rhs: M31) -> M31 {
        let res = match bounded_int::constrain::<BoundedInt::<0, {2*(P-1)}>, P>(lhs.inner + rhs.inner) {
             Result::Ok(lt) => core::integer::upcast(lt),
             Result::Err(gte) => core::integer::upcast(gte - M31_P),
        };
      
        M31 { inner: res }
    }
}

// pub impl M31Sub of core::traits::Sub<M31> {
//     #[inline]
//     fn sub(lhs: M31, rhs: M31) -> M31 {
//         lhs + (-rhs)
//     }
// }


// pub impl M31Mul of core::traits::Mul<M31> {
//     #[inline]
//     fn mul(lhs: M31, rhs: M31) -> M31 {
//         M31Impl::reduce_u64(lhs.inner.wide_mul(rhs.inner))
//     }
// }


// pub impl M31Neg of Neg<M31> {
//     #[inline]
//     fn neg(a: M31) -> M31 {
//         if a.inner == 0 {
//             M31 { inner: 0 }
//         } else {
//             M31 { inner: P - a.inner }
//         }
//     }
// }

// pub impl CM31Add of core::traits::Add<CM31> {
//     #[inline]
//     fn add(lhs: CM31, rhs: CM31) -> CM31 {
//         CM31 { a: lhs.a + rhs.a, b: lhs.b + rhs.b }
//     }
// }


// pub impl CM31Mul of core::traits::Mul<CM31> {
//     #[inline]
//     fn mul(lhs: CM31, rhs: CM31) -> CM31 {
//         CM31 { a: lhs.a * rhs.a - lhs.b * rhs.b, b: lhs.a * rhs.b + lhs.b * rhs.a }
//     }
// }

// pub impl QM31Mul of core::traits::Mul<QM31> {
//     #[inline]
//     fn mul(lhs: QM31, rhs: QM31) -> QM31 {
//         // (a + bu) * (c + du) = (ac + rbd) + (ad + bc)u.
//         QM31 { a: lhs.a * rhs.a + R * lhs.b * rhs.b, b: lhs.a * rhs.b + lhs.b * rhs.a }
//     }
// }



fn foo(a: M31, b: M31) -> M31 {
    a + b
}

//! > casm
[ap + 0] = [fp + -10] * [fp + -6], ap++;
[ap + 0] = 2147483647, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], memory[ap + -1]) %}
[ap + 4] = [[fp + -11] + 0], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[fp + -11] + 1], ap++;
[ap + -1] = [[fp + -11] + 2], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[ap + -7] = [ap + -3] + [ap + -1];
[ap + 0] = [fp + -9] * [fp + -5], ap++;
[ap + 0] = 2147483647, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], memory[ap + -1]) %}
[ap + 4] = [[fp + -11] + 3], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[fp + -11] + 4], ap++;
[ap + -1] = [[fp + -11] + 5], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[ap + -7] = [ap + -3] + [ap + -1];
[ap + 0] = [fp + -11] + 6, ap++;
[ap + -2] = [ap + 0] + 0, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 32;
[ap + 0] = 2147483647, ap++;
[ap + -1] = [ap + 1] + [ap + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -6] + 0];
jmp rel 8;
[ap + -1] = [[ap + -5] + 0];
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 21;
ap += 282;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -290] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 1099;
ap += 3;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
%{ memory[ap + 0] = (memory[ap + -15] + memory[ap + -1]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -16] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 1074;
[ap + 1] = [ap + -16] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -5] + 0];
[ap + 0] = 2147483647, ap++;
[ap + -2] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -9] + 1];
jmp rel 10;
[ap + -1] = [[ap + -8] + 1];
ap += 1;
[ap + 0] = [ap + -9] + 2, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 5;
[ap + 0] = [ap + -9] + 2, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -10] * [fp + -5], ap++;
[ap + 0] = 2147483647, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], memory[ap + -1]) %}
[ap + 4] = [[ap + -4] + 0], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[ap + -7] + 1], ap++;
[ap + -1] = [[ap + -8] + 2], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[ap + -7] = [ap + -3] + [ap + -1];
[ap + 0] = [fp + -9] * [fp + -6], ap++;
[ap + 0] = 2147483647, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], memory[ap + -1]) %}
[ap + 4] = [[ap + -11] + 3], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[ap + -14] + 4], ap++;
[ap + -1] = [[ap + -15] + 5], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[ap + -7] = [ap + -3] + [ap + -1];
%{ memory[ap + 0] = (memory[ap + -8] + memory[ap + -1]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -19] + 6];
jmp rel 1005;
[ap + 1] = [ap + -9] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -19] + 6];
[ap + 0] = 2147483647, ap++;
[ap + -2] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -23] + 7];
jmp rel 10;
[ap + -1] = [[ap + -22] + 7];
ap += 1;
[ap + 0] = [ap + -23] + 8, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 5;
[ap + 0] = [ap + -23] + 8, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 2, ap++;
[ap + 0] = [ap + -1] * [fp + -8], ap++;
[ap + 0] = 2147483647, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], memory[ap + -1]) %}
[ap + 4] = [[ap + -5] + 0], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[ap + -8] + 1], ap++;
[ap + -1] = [[ap + -9] + 2], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[ap + -7] = [ap + -3] + [ap + -1];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -1] * [fp + -7], ap++;
[ap + 0] = 2147483647, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], memory[ap + -1]) %}
[ap + 4] = [[ap + -13] + 3], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[ap + -16] + 4], ap++;
[ap + -1] = [[ap + -17] + 5], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[ap + -7] = [ap + -3] + [ap + -1];
[ap + 0] = [ap + -18] + 6, ap++;
[ap + -2] = [ap + 0] + 0, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 32;
[ap + 0] = 2147483647, ap++;
[ap + -1] = [ap + 1] + [ap + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -6] + 0];
jmp rel 8;
[ap + -1] = [[ap + -5] + 0];
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 21;
ap += 227;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -235] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 906;
ap += 3;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
%{ memory[ap + 0] = (memory[ap + -16] + memory[ap + -1]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -17] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 881;
[ap + 1] = [ap + -17] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -5] + 0];
[ap + 0] = 2147483647, ap++;
[ap + -2] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -9] + 1];
jmp rel 10;
[ap + -1] = [[ap + -8] + 1];
ap += 1;
[ap + 0] = [ap + -9] + 2, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 5;
[ap + 0] = [ap + -9] + 2, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 2, ap++;
[ap + 0] = [ap + -1] * [fp + -7], ap++;
[ap + 0] = 2147483647, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], memory[ap + -1]) %}
[ap + 4] = [[ap + -5] + 0], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[ap + -8] + 1], ap++;
[ap + -1] = [[ap + -9] + 2], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[ap + -7] = [ap + -3] + [ap + -1];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -1] * [fp + -8], ap++;
[ap + 0] = 2147483647, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], memory[ap + -1]) %}
[ap + 4] = [[ap + -13] + 3], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[ap + -16] + 4], ap++;
[ap + -1] = [[ap + -17] + 5], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[ap + -7] = [ap + -3] + [ap + -1];
%{ memory[ap + 0] = (memory[ap + -9] + memory[ap + -1]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -10] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -21] + 6];
jmp rel 808;
[ap + 1] = [ap + -10] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -21] + 6];
[ap + 0] = 2147483647, ap++;
[ap + -2] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -25] + 7];
jmp rel 10;
[ap + -1] = [[ap + -24] + 7];
ap += 1;
[ap + 0] = [ap + -25] + 8, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 5;
[ap + 0] = [ap + -25] + 8, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -26] * [fp + -4], ap++;
[ap + 0] = 2147483647, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], memory[ap + -1]) %}
[ap + 4] = [[ap + -4] + 0], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[ap + -7] + 1], ap++;
[ap + -1] = [[ap + -8] + 2], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[ap + -7] = [ap + -3] + [ap + -1];
[ap + 0] = [ap + -8] * [fp + -3], ap++;
[ap + 0] = 2147483647, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], memory[ap + -1]) %}
[ap + 4] = [[ap + -11] + 3], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[ap + -14] + 4], ap++;
[ap + -1] = [[ap + -15] + 5], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[ap + -7] = [ap + -3] + [ap + -1];
[ap + 0] = [ap + -16] + 6, ap++;
[ap + -2] = [ap + 0] + 0, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 32;
[ap + 0] = 2147483647, ap++;
[ap + -1] = [ap + 1] + [ap + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -6] + 0];
jmp rel 8;
[ap + -1] = [[ap + -5] + 0];
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 21;
ap += 172;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -180] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 713;
ap += 3;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
%{ memory[ap + 0] = (memory[ap + -15] + memory[ap + -1]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -16] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 688;
[ap + 1] = [ap + -16] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -5] + 0];
[ap + 0] = 2147483647, ap++;
[ap + -2] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -9] + 1];
jmp rel 10;
[ap + -1] = [[ap + -8] + 1];
ap += 1;
[ap + 0] = [ap + -9] + 2, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 5;
[ap + 0] = [ap + -9] + 2, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -56] * [fp + -3], ap++;
[ap + 0] = 2147483647, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], memory[ap + -1]) %}
[ap + 4] = [[ap + -4] + 0], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[ap + -7] + 1], ap++;
[ap + -1] = [[ap + -8] + 2], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[ap + -7] = [ap + -3] + [ap + -1];
[ap + 0] = [ap + -38] * [fp + -4], ap++;
[ap + 0] = 2147483647, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], memory[ap + -1]) %}
[ap + 4] = [[ap + -11] + 3], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[ap + -14] + 4], ap++;
[ap + -1] = [[ap + -15] + 5], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[ap + -7] = [ap + -3] + [ap + -1];
%{ memory[ap + 0] = (memory[ap + -8] + memory[ap + -1]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -19] + 6];
jmp rel 619;
[ap + 1] = [ap + -9] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -19] + 6];
[ap + 0] = 2147483647, ap++;
[ap + -2] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -23] + 7];
jmp rel 10;
[ap + -1] = [[ap + -22] + 7];
ap += 1;
[ap + 0] = [ap + -23] + 8, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 5;
[ap + 0] = [ap + -23] + 8, ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -134] + memory[ap + -24]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -135] + [ap + -25], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 564;
[ap + 1] = [ap + -135] + [ap + -25], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -5] + 0];
[ap + 0] = 2147483647, ap++;
[ap + -2] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -9] + 1];
jmp rel 10;
[ap + -1] = [[ap + -8] + 1];
ap += 1;
[ap + 0] = [ap + -9] + 2, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 5;
[ap + 0] = [ap + -9] + 2, ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -120] + memory[ap + -10]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -121] + [ap + -11], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 517;
[ap + 1] = [ap + -121] + [ap + -11], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -5] + 0];
[ap + 0] = 2147483647, ap++;
[ap + -2] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -9] + 1];
jmp rel 10;
[ap + -1] = [[ap + -8] + 1];
ap += 1;
[ap + 0] = [ap + -9] + 2, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 5;
[ap + 0] = [ap + -9] + 2, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -10] * [fp + -4], ap++;
[ap + 0] = 2147483647, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], memory[ap + -1]) %}
[ap + 4] = [[ap + -4] + 0], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[ap + -7] + 1], ap++;
[ap + -1] = [[ap + -8] + 2], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[ap + -7] = [ap + -3] + [ap + -1];
[ap + 0] = [fp + -9] * [fp + -3], ap++;
[ap + 0] = 2147483647, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], memory[ap + -1]) %}
[ap + 4] = [[ap + -11] + 3], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[ap + -14] + 4], ap++;
[ap + -1] = [[ap + -15] + 5], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[ap + -7] = [ap + -3] + [ap + -1];
[ap + 0] = [ap + -16] + 6, ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + -4] = [ap + 0] + 0, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 32;
[ap + 0] = 2147483647, ap++;
[ap + -1] = [ap + 1] + [ap + -6], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -8] + 0];
jmp rel 8;
[ap + -1] = [[ap + -7] + 0];
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 21;
ap += 99;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -109] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 420;
ap += 3;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
%{ memory[ap + 0] = (memory[ap + -17] + memory[ap + -1]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -18] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 395;
[ap + 1] = [ap + -18] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -5] + 0];
[ap + 0] = 2147483647, ap++;
[ap + -2] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -9] + 1];
jmp rel 10;
[ap + -1] = [[ap + -8] + 1];
ap += 1;
[ap + 0] = [ap + -9] + 2, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 5;
[ap + 0] = [ap + -9] + 2, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -10] * [fp + -3], ap++;
[ap + 0] = 2147483647, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], memory[ap + -1]) %}
[ap + 4] = [[ap + -4] + 0], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[ap + -7] + 1], ap++;
[ap + -1] = [[ap + -8] + 2], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[ap + -7] = [ap + -3] + [ap + -1];
[ap + 0] = [fp + -9] * [fp + -4], ap++;
[ap + 0] = 2147483647, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], memory[ap + -1]) %}
[ap + 4] = [[ap + -11] + 3], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[ap + -14] + 4], ap++;
[ap + -1] = [[ap + -15] + 5], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[ap + -7] = [ap + -3] + [ap + -1];
%{ memory[ap + 0] = (memory[ap + -8] + memory[ap + -1]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -19] + 6];
jmp rel 326;
[ap + 1] = [ap + -9] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -19] + 6];
[ap + 0] = 2147483647, ap++;
[ap + -2] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -23] + 7];
jmp rel 10;
[ap + -1] = [[ap + -22] + 7];
ap += 1;
[ap + 0] = [ap + -23] + 8, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 5;
[ap + 0] = [ap + -23] + 8, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -8] * [fp + -6], ap++;
[ap + 0] = 2147483647, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], memory[ap + -1]) %}
[ap + 4] = [[ap + -4] + 0], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[ap + -7] + 1], ap++;
[ap + -1] = [[ap + -8] + 2], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[ap + -7] = [ap + -3] + [ap + -1];
[ap + 0] = [fp + -7] * [fp + -5], ap++;
[ap + 0] = 2147483647, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], memory[ap + -1]) %}
[ap + 4] = [[ap + -11] + 3], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[ap + -14] + 4], ap++;
[ap + -1] = [[ap + -15] + 5], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[ap + -7] = [ap + -3] + [ap + -1];
[ap + 0] = [ap + -16] + 6, ap++;
[ap + -2] = [ap + 0] + 0, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 32;
[ap + 0] = 2147483647, ap++;
[ap + -1] = [ap + 1] + [ap + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -6] + 0];
jmp rel 8;
[ap + -1] = [[ap + -5] + 0];
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 21;
ap += 46;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -54] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 231;
ap += 3;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
%{ memory[ap + 0] = (memory[ap + -15] + memory[ap + -1]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -16] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 206;
[ap + 1] = [ap + -16] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -5] + 0];
[ap + 0] = 2147483647, ap++;
[ap + -2] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -9] + 1];
jmp rel 10;
[ap + -1] = [[ap + -8] + 1];
ap += 1;
[ap + 0] = [ap + -9] + 2, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 5;
[ap + 0] = [ap + -9] + 2, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -8] * [fp + -5], ap++;
[ap + 0] = 2147483647, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], memory[ap + -1]) %}
[ap + 4] = [[ap + -4] + 0], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[ap + -7] + 1], ap++;
[ap + -1] = [[ap + -8] + 2], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[ap + -7] = [ap + -3] + [ap + -1];
[ap + 0] = [fp + -7] * [fp + -6], ap++;
[ap + 0] = 2147483647, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], memory[ap + -1]) %}
[ap + 4] = [[ap + -11] + 3], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[ap + -14] + 4], ap++;
[ap + -1] = [[ap + -15] + 5], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[ap + -7] = [ap + -3] + [ap + -1];
%{ memory[ap + 0] = (memory[ap + -8] + memory[ap + -1]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -19] + 6];
jmp rel 137;
[ap + 1] = [ap + -9] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -19] + 6];
[ap + 0] = 2147483647, ap++;
[ap + -2] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -23] + 7];
jmp rel 10;
[ap + -1] = [[ap + -22] + 7];
ap += 1;
[ap + 0] = [ap + -23] + 8, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 5;
[ap + 0] = [ap + -23] + 8, ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -77] + memory[ap + -24]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -78] + [ap + -25], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 82;
[ap + 1] = [ap + -78] + [ap + -25], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -5] + 0];
[ap + 0] = 2147483647, ap++;
[ap + -2] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -9] + 1];
jmp rel 10;
[ap + -1] = [[ap + -8] + 1];
ap += 1;
[ap + 0] = [ap + -9] + 2, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 5;
[ap + 0] = [ap + -9] + 2, ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -63] + memory[ap + -10]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -64] + [ap + -11], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 35;
[ap + 1] = [ap + -64] + [ap + -11], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -5] + 0];
[ap + 0] = 2147483647, ap++;
[ap + -2] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -9] + 1];
jmp rel 10;
[ap + -1] = [[ap + -8] + 1];
ap += 1;
[ap + 0] = [ap + -9] + 2, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 5;
[ap + 0] = [ap + -9] + 2, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -113], ap++;
[ap + 0] = [ap + -113], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504323917466144735657540098748279, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 14;
ap += 10;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504323917466144735657540098748279, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 19;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504323917466144735657540098748279, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -40] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 14;
ap += 42;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504323917466144735657540098748279, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -49] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 72;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504323917466144735657540098748279, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -93] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 14;
ap += 95;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504323917466144735657540098748279, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -102] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 127;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504323917466144735657540098748279, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -134] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 14;
ap += 136;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504323917466144735657540098748279, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -143] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 145;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504323917466144735657540098748279, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -166] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 14;
ap += 168;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504323917466144735657540098748279, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -175] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 198;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504323917466144735657540098748279, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -221] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 14;
ap += 223;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504323917466144735657540098748279, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -230] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 255;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504323917466144735657540098748279, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -276] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 14;
ap += 278;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504323917466144735657540098748279, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -285] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 47680})

//! > sierra_code
type u32 = u32 [storable: true, drop: true, dup: true, zero_sized: false];
type test::M31 = Struct<ut@test::M31, u32> [storable: true, drop: true, dup: true, zero_sized: false];
type test::CM31 = Struct<ut@test::CM31, test::M31, test::M31> [storable: true, drop: true, dup: true, zero_sized: false];
type test::QM31 = Struct<ut@test::QM31, test::CM31, test::CM31> [storable: true, drop: true, dup: true, zero_sized: false];
type core::panics::Panic = Struct<ut@core::panics::Panic> [storable: true, drop: true, dup: true, zero_sized: true];
type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type Tuple<core::panics::Panic, Array<felt252>> = Struct<ut@Tuple, core::panics::Panic, Array<felt252>> [storable: true, drop: true, dup: false, zero_sized: false];
type Const<felt252, 155785504323917466144735657540098748279> = Const<felt252, 155785504323917466144735657540098748279> [storable: false, drop: false, dup: false, zero_sized: false];
type Tuple<test::QM31> = Struct<ut@Tuple, test::QM31> [storable: true, drop: true, dup: true, zero_sized: false];
type core::panics::PanicResult::<(test::QM31,)> = Enum<ut@core::panics::PanicResult::<(test::QM31,)>, Tuple<test::QM31>, Tuple<core::panics::Panic, Array<felt252>>> [storable: true, drop: true, dup: false, zero_sized: false];
type Const<test::CM31, Const<test::M31, Const<u32, 2>>, Const<test::M31, Const<u32, 1>>> = Const<test::CM31, Const<test::M31, Const<u32, 2>>, Const<test::M31, Const<u32, 1>>> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<felt252, 155785504329508738615720351733824384887> = Const<felt252, 155785504329508738615720351733824384887> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<test::M31, Const<u32, 1>> = Const<test::M31, Const<u32, 1>> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<test::M31, Const<u32, 2>> = Const<test::M31, Const<u32, 2>> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u32, 1> = Const<u32, 1> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u32, 2> = Const<u32, 2> [storable: false, drop: false, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Const<u32, 2147483647> = Const<u32, 2147483647> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u32, 0> = Const<u32, 0> [storable: false, drop: false, dup: false, zero_sized: false];
type BoundedInt<2147483647, 2147483647> = BoundedInt<2147483647, 2147483647> [storable: true, drop: true, dup: true, zero_sized: false];
type BoundedInt<0, 2147483646> = BoundedInt<0, 2147483646> [storable: true, drop: true, dup: true, zero_sized: false];
type BoundedInt<0, 8589934596> = BoundedInt<0, 8589934596> [storable: true, drop: true, dup: true, zero_sized: false];
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Const<NonZero<BoundedInt<2147483647, 2147483647>>, Const<BoundedInt<2147483647, 2147483647>, 2147483647>> = Const<NonZero<BoundedInt<2147483647, 2147483647>>, Const<BoundedInt<2147483647, 2147483647>, 2147483647>> [storable: false, drop: false, dup: false, zero_sized: false];
type NonZero<BoundedInt<2147483647, 2147483647>> = NonZero<BoundedInt<2147483647, 2147483647>> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<BoundedInt<2147483647, 2147483647>, 2147483647> = Const<BoundedInt<2147483647, 2147483647>, 2147483647> [storable: false, drop: false, dup: false, zero_sized: false];
type u64 = u64 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc struct_deconstruct<test::QM31> = struct_deconstruct<test::QM31>;
libfunc dup<test::CM31> = dup<test::CM31>;
libfunc struct_deconstruct<test::CM31> = struct_deconstruct<test::CM31>;
libfunc dup<test::M31> = dup<test::M31>;
libfunc struct_deconstruct<test::M31> = struct_deconstruct<test::M31>;
libfunc u32_wide_mul = u32_wide_mul;
libfunc const_as_immediate<Const<NonZero<BoundedInt<2147483647, 2147483647>>, Const<BoundedInt<2147483647, 2147483647>, 2147483647>>> = const_as_immediate<Const<NonZero<BoundedInt<2147483647, 2147483647>>, Const<BoundedInt<2147483647, 2147483647>, 2147483647>>>;
libfunc store_temp<u64> = store_temp<u64>;
libfunc store_temp<NonZero<BoundedInt<2147483647, 2147483647>>> = store_temp<NonZero<BoundedInt<2147483647, 2147483647>>>;
libfunc bounded_int_div_rem<u64, BoundedInt<2147483647, 2147483647>> = bounded_int_div_rem<u64, BoundedInt<2147483647, 2147483647>>;
libfunc drop<BoundedInt<0, 8589934596>> = drop<BoundedInt<0, 8589934596>>;
libfunc upcast<BoundedInt<0, 2147483646>, u32> = upcast<BoundedInt<0, 2147483646>, u32>;
libfunc const_as_immediate<Const<u32, 0>> = const_as_immediate<Const<u32, 0>>;
libfunc dup<u32> = dup<u32>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc u32_eq = u32_eq;
libfunc branch_align = branch_align;
libfunc const_as_immediate<Const<u32, 2147483647>> = const_as_immediate<Const<u32, 2147483647>>;
libfunc store_temp<u32> = store_temp<u32>;
libfunc u32_overflowing_sub = u32_overflowing_sub;
libfunc jump = jump;
libfunc drop<u32> = drop<u32>;
libfunc drop<test::CM31> = drop<test::CM31>;
libfunc drop<test::M31> = drop<test::M31>;
libfunc array_new<felt252> = array_new<felt252>;
libfunc const_as_immediate<Const<felt252, 155785504329508738615720351733824384887>> = const_as_immediate<Const<felt252, 155785504329508738615720351733824384887>>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc array_append<felt252> = array_append<felt252>;
libfunc store_temp<Array<felt252>> = store_temp<Array<felt252>>;
libfunc u32_overflowing_add = u32_overflowing_add;
libfunc const_as_immediate<Const<test::CM31, Const<test::M31, Const<u32, 2>>, Const<test::M31, Const<u32, 1>>>> = const_as_immediate<Const<test::CM31, Const<test::M31, Const<u32, 2>>, Const<test::M31, Const<u32, 1>>>>;
libfunc struct_construct<test::M31> = struct_construct<test::M31>;
libfunc struct_construct<test::CM31> = struct_construct<test::CM31>;
libfunc store_temp<test::CM31> = store_temp<test::CM31>;
libfunc struct_construct<test::QM31> = struct_construct<test::QM31>;
libfunc struct_construct<Tuple<test::QM31>> = struct_construct<Tuple<test::QM31>>;
libfunc enum_init<core::panics::PanicResult::<(test::QM31,)>, 0> = enum_init<core::panics::PanicResult::<(test::QM31,)>, 0>;
libfunc store_temp<core::panics::PanicResult::<(test::QM31,)>> = store_temp<core::panics::PanicResult::<(test::QM31,)>>;
libfunc const_as_immediate<Const<felt252, 155785504323917466144735657540098748279>> = const_as_immediate<Const<felt252, 155785504323917466144735657540098748279>>;
libfunc struct_construct<core::panics::Panic> = struct_construct<core::panics::Panic>;
libfunc struct_construct<Tuple<core::panics::Panic, Array<felt252>>> = struct_construct<Tuple<core::panics::Panic, Array<felt252>>>;
libfunc enum_init<core::panics::PanicResult::<(test::QM31,)>, 1> = enum_init<core::panics::PanicResult::<(test::QM31,)>, 1>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<Array<felt252>> = rename<Array<felt252>>;

struct_deconstruct<test::QM31>([1]) -> ([3], [4]); // 0
struct_deconstruct<test::QM31>([2]) -> ([5], [6]); // 1
dup<test::CM31>([3]) -> ([3], [7]); // 2
struct_deconstruct<test::CM31>([7]) -> ([8], [9]); // 3
dup<test::CM31>([5]) -> ([5], [10]); // 4
struct_deconstruct<test::CM31>([10]) -> ([11], [12]); // 5
dup<test::M31>([8]) -> ([8], [13]); // 6
struct_deconstruct<test::M31>([13]) -> ([14]); // 7
dup<test::M31>([11]) -> ([11], [15]); // 8
struct_deconstruct<test::M31>([15]) -> ([16]); // 9
u32_wide_mul([14], [16]) -> ([17]); // 10
const_as_immediate<Const<NonZero<BoundedInt<2147483647, 2147483647>>, Const<BoundedInt<2147483647, 2147483647>, 2147483647>>>() -> ([18]); // 11
store_temp<u64>([17]) -> ([17]); // 12
store_temp<NonZero<BoundedInt<2147483647, 2147483647>>>([18]) -> ([18]); // 13
bounded_int_div_rem<u64, BoundedInt<2147483647, 2147483647>>([0], [17], [18]) -> ([19], [20], [21]); // 14
drop<BoundedInt<0, 8589934596>>([20]) -> (); // 15
upcast<BoundedInt<0, 2147483646>, u32>([21]) -> ([22]); // 16
dup<test::M31>([9]) -> ([9], [23]); // 17
struct_deconstruct<test::M31>([23]) -> ([24]); // 18
dup<test::M31>([12]) -> ([12], [25]); // 19
struct_deconstruct<test::M31>([25]) -> ([26]); // 20
u32_wide_mul([24], [26]) -> ([27]); // 21
const_as_immediate<Const<NonZero<BoundedInt<2147483647, 2147483647>>, Const<BoundedInt<2147483647, 2147483647>, 2147483647>>>() -> ([28]); // 22
store_temp<u64>([27]) -> ([27]); // 23
store_temp<NonZero<BoundedInt<2147483647, 2147483647>>>([28]) -> ([28]); // 24
bounded_int_div_rem<u64, BoundedInt<2147483647, 2147483647>>([19], [27], [28]) -> ([29], [30], [31]); // 25
drop<BoundedInt<0, 8589934596>>([30]) -> (); // 26
upcast<BoundedInt<0, 2147483646>, u32>([31]) -> ([32]); // 27
const_as_immediate<Const<u32, 0>>() -> ([33]); // 28
dup<u32>([32]) -> ([32], [34]); // 29
store_temp<RangeCheck>([29]) -> ([29]); // 30
u32_eq([34], [33]) { fallthrough() 58() }; // 31
branch_align() -> (); // 32
const_as_immediate<Const<u32, 2147483647>>() -> ([35]); // 33
store_temp<u32>([35]) -> ([35]); // 34
u32_overflowing_sub([29], [35], [32]) { fallthrough([36], [37]) 40([38], [39]) }; // 35
branch_align() -> (); // 36
store_temp<RangeCheck>([36]) -> ([40]); // 37
store_temp<u32>([37]) -> ([41]); // 38
jump() { 63() }; // 39
branch_align() -> (); // 40
drop<u32>([39]) -> (); // 41
drop<test::CM31>([4]) -> (); // 42
drop<test::M31>([8]) -> (); // 43
drop<test::CM31>([6]) -> (); // 44
drop<test::CM31>([5]) -> (); // 45
drop<test::CM31>([3]) -> (); // 46
drop<test::M31>([9]) -> (); // 47
drop<test::M31>([11]) -> (); // 48
drop<test::M31>([12]) -> (); // 49
drop<u32>([22]) -> (); // 50
array_new<felt252>() -> ([42]); // 51
const_as_immediate<Const<felt252, 155785504329508738615720351733824384887>>() -> ([43]); // 52
store_temp<felt252>([43]) -> ([43]); // 53
array_append<felt252>([42], [43]) -> ([44]); // 54
store_temp<RangeCheck>([38]) -> ([45]); // 55
store_temp<Array<felt252>>([44]) -> ([46]); // 56
jump() { 864() }; // 57
branch_align() -> (); // 58
drop<u32>([32]) -> (); // 59
const_as_immediate<Const<u32, 0>>() -> ([47]); // 60
store_temp<RangeCheck>([29]) -> ([40]); // 61
store_temp<u32>([47]) -> ([41]); // 62
u32_overflowing_add([40], [22], [41]) { fallthrough([48], [49]) 848([50], [51]) }; // 63
branch_align() -> (); // 64
const_as_immediate<Const<u32, 2147483647>>() -> ([52]); // 65
dup<u32>([49]) -> ([49], [53]); // 66
store_temp<u32>([52]) -> ([52]); // 67
u32_overflowing_sub([48], [53], [52]) { fallthrough([54], [55]) 74([56], [57]) }; // 68
branch_align() -> (); // 69
drop<u32>([49]) -> (); // 70
store_temp<RangeCheck>([54]) -> ([58]); // 71
store_temp<u32>([55]) -> ([59]); // 72
jump() { 78() }; // 73
branch_align() -> (); // 74
drop<u32>([57]) -> (); // 75
store_temp<RangeCheck>([56]) -> ([58]); // 76
store_temp<u32>([49]) -> ([59]); // 77
struct_deconstruct<test::M31>([8]) -> ([60]); // 78
struct_deconstruct<test::M31>([12]) -> ([61]); // 79
u32_wide_mul([60], [61]) -> ([62]); // 80
const_as_immediate<Const<NonZero<BoundedInt<2147483647, 2147483647>>, Const<BoundedInt<2147483647, 2147483647>, 2147483647>>>() -> ([63]); // 81
store_temp<u64>([62]) -> ([62]); // 82
store_temp<NonZero<BoundedInt<2147483647, 2147483647>>>([63]) -> ([63]); // 83
bounded_int_div_rem<u64, BoundedInt<2147483647, 2147483647>>([58], [62], [63]) -> ([64], [65], [66]); // 84
drop<BoundedInt<0, 8589934596>>([65]) -> (); // 85
upcast<BoundedInt<0, 2147483646>, u32>([66]) -> ([67]); // 86
struct_deconstruct<test::M31>([9]) -> ([68]); // 87
struct_deconstruct<test::M31>([11]) -> ([69]); // 88
u32_wide_mul([68], [69]) -> ([70]); // 89
const_as_immediate<Const<NonZero<BoundedInt<2147483647, 2147483647>>, Const<BoundedInt<2147483647, 2147483647>, 2147483647>>>() -> ([71]); // 90
store_temp<u64>([70]) -> ([70]); // 91
store_temp<NonZero<BoundedInt<2147483647, 2147483647>>>([71]) -> ([71]); // 92
bounded_int_div_rem<u64, BoundedInt<2147483647, 2147483647>>([64], [70], [71]) -> ([72], [73], [74]); // 93
drop<BoundedInt<0, 8589934596>>([73]) -> (); // 94
upcast<BoundedInt<0, 2147483646>, u32>([74]) -> ([75]); // 95
u32_overflowing_add([72], [67], [75]) { fallthrough([76], [77]) 834([78], [79]) }; // 96
branch_align() -> (); // 97
const_as_immediate<Const<u32, 2147483647>>() -> ([80]); // 98
dup<u32>([77]) -> ([77], [81]); // 99
store_temp<u32>([80]) -> ([80]); // 100
u32_overflowing_sub([76], [81], [80]) { fallthrough([82], [83]) 107([84], [85]) }; // 101
branch_align() -> (); // 102
drop<u32>([77]) -> (); // 103
store_temp<RangeCheck>([82]) -> ([86]); // 104
store_temp<u32>([83]) -> ([87]); // 105
jump() { 111() }; // 106
branch_align() -> (); // 107
drop<u32>([85]) -> (); // 108
store_temp<RangeCheck>([84]) -> ([86]); // 109
store_temp<u32>([77]) -> ([87]); // 110
const_as_immediate<Const<test::CM31, Const<test::M31, Const<u32, 2>>, Const<test::M31, Const<u32, 1>>>>() -> ([88]); // 111
struct_deconstruct<test::CM31>([88]) -> ([89], [90]); // 112
dup<test::CM31>([4]) -> ([4], [91]); // 113
struct_deconstruct<test::CM31>([91]) -> ([92], [93]); // 114
dup<test::M31>([89]) -> ([89], [94]); // 115
struct_deconstruct<test::M31>([94]) -> ([95]); // 116
dup<test::M31>([92]) -> ([92], [96]); // 117
struct_deconstruct<test::M31>([96]) -> ([97]); // 118
store_temp<u32>([95]) -> ([95]); // 119
u32_wide_mul([95], [97]) -> ([98]); // 120
const_as_immediate<Const<NonZero<BoundedInt<2147483647, 2147483647>>, Const<BoundedInt<2147483647, 2147483647>, 2147483647>>>() -> ([99]); // 121
store_temp<u64>([98]) -> ([98]); // 122
store_temp<NonZero<BoundedInt<2147483647, 2147483647>>>([99]) -> ([99]); // 123
bounded_int_div_rem<u64, BoundedInt<2147483647, 2147483647>>([86], [98], [99]) -> ([100], [101], [102]); // 124
drop<BoundedInt<0, 8589934596>>([101]) -> (); // 125
upcast<BoundedInt<0, 2147483646>, u32>([102]) -> ([103]); // 126
dup<test::M31>([90]) -> ([90], [104]); // 127
struct_deconstruct<test::M31>([104]) -> ([105]); // 128
dup<test::M31>([93]) -> ([93], [106]); // 129
struct_deconstruct<test::M31>([106]) -> ([107]); // 130
store_temp<u32>([105]) -> ([105]); // 131
u32_wide_mul([105], [107]) -> ([108]); // 132
const_as_immediate<Const<NonZero<BoundedInt<2147483647, 2147483647>>, Const<BoundedInt<2147483647, 2147483647>, 2147483647>>>() -> ([109]); // 133
store_temp<u64>([108]) -> ([108]); // 134
store_temp<NonZero<BoundedInt<2147483647, 2147483647>>>([109]) -> ([109]); // 135
bounded_int_div_rem<u64, BoundedInt<2147483647, 2147483647>>([100], [108], [109]) -> ([110], [111], [112]); // 136
drop<BoundedInt<0, 8589934596>>([111]) -> (); // 137
upcast<BoundedInt<0, 2147483646>, u32>([112]) -> ([113]); // 138
const_as_immediate<Const<u32, 0>>() -> ([114]); // 139
dup<u32>([113]) -> ([113], [115]); // 140
store_temp<RangeCheck>([110]) -> ([110]); // 141
u32_eq([115], [114]) { fallthrough() 171() }; // 142
branch_align() -> (); // 143
const_as_immediate<Const<u32, 2147483647>>() -> ([116]); // 144
store_temp<u32>([116]) -> ([116]); // 145
u32_overflowing_sub([110], [116], [113]) { fallthrough([117], [118]) 151([119], [120]) }; // 146
branch_align() -> (); // 147
store_temp<RangeCheck>([117]) -> ([121]); // 148
store_temp<u32>([118]) -> ([122]); // 149
jump() { 176() }; // 150
branch_align() -> (); // 151
drop<u32>([120]) -> (); // 152
drop<test::CM31>([4]) -> (); // 153
drop<u32>([87]) -> (); // 154
drop<test::CM31>([6]) -> (); // 155
drop<test::CM31>([5]) -> (); // 156
drop<test::CM31>([3]) -> (); // 157
drop<u32>([59]) -> (); // 158
drop<test::M31>([89]) -> (); // 159
drop<test::M31>([90]) -> (); // 160
drop<test::M31>([92]) -> (); // 161
drop<test::M31>([93]) -> (); // 162
drop<u32>([103]) -> (); // 163
array_new<felt252>() -> ([123]); // 164
const_as_immediate<Const<felt252, 155785504329508738615720351733824384887>>() -> ([124]); // 165
store_temp<felt252>([124]) -> ([124]); // 166
array_append<felt252>([123], [124]) -> ([125]); // 167
store_temp<RangeCheck>([119]) -> ([126]); // 168
store_temp<Array<felt252>>([125]) -> ([127]); // 169
jump() { 826() }; // 170
branch_align() -> (); // 171
drop<u32>([113]) -> (); // 172
const_as_immediate<Const<u32, 0>>() -> ([128]); // 173
store_temp<RangeCheck>([110]) -> ([121]); // 174
store_temp<u32>([128]) -> ([122]); // 175
u32_overflowing_add([121], [103], [122]) { fallthrough([129], [130]) 808([131], [132]) }; // 176
branch_align() -> (); // 177
const_as_immediate<Const<u32, 2147483647>>() -> ([133]); // 178
dup<u32>([130]) -> ([130], [134]); // 179
store_temp<u32>([133]) -> ([133]); // 180
u32_overflowing_sub([129], [134], [133]) { fallthrough([135], [136]) 187([137], [138]) }; // 181
branch_align() -> (); // 182
drop<u32>([130]) -> (); // 183
store_temp<RangeCheck>([135]) -> ([139]); // 184
store_temp<u32>([136]) -> ([140]); // 185
jump() { 191() }; // 186
branch_align() -> (); // 187
drop<u32>([138]) -> (); // 188
store_temp<RangeCheck>([137]) -> ([139]); // 189
store_temp<u32>([130]) -> ([140]); // 190
struct_deconstruct<test::M31>([89]) -> ([141]); // 191
struct_deconstruct<test::M31>([93]) -> ([142]); // 192
store_temp<u32>([141]) -> ([141]); // 193
u32_wide_mul([141], [142]) -> ([143]); // 194
const_as_immediate<Const<NonZero<BoundedInt<2147483647, 2147483647>>, Const<BoundedInt<2147483647, 2147483647>, 2147483647>>>() -> ([144]); // 195
store_temp<u64>([143]) -> ([143]); // 196
store_temp<NonZero<BoundedInt<2147483647, 2147483647>>>([144]) -> ([144]); // 197
bounded_int_div_rem<u64, BoundedInt<2147483647, 2147483647>>([139], [143], [144]) -> ([145], [146], [147]); // 198
drop<BoundedInt<0, 8589934596>>([146]) -> (); // 199
upcast<BoundedInt<0, 2147483646>, u32>([147]) -> ([148]); // 200
struct_deconstruct<test::M31>([90]) -> ([149]); // 201
struct_deconstruct<test::M31>([92]) -> ([150]); // 202
store_temp<u32>([149]) -> ([149]); // 203
u32_wide_mul([149], [150]) -> ([151]); // 204
const_as_immediate<Const<NonZero<BoundedInt<2147483647, 2147483647>>, Const<BoundedInt<2147483647, 2147483647>, 2147483647>>>() -> ([152]); // 205
store_temp<u64>([151]) -> ([151]); // 206
store_temp<NonZero<BoundedInt<2147483647, 2147483647>>>([152]) -> ([152]); // 207
bounded_int_div_rem<u64, BoundedInt<2147483647, 2147483647>>([145], [151], [152]) -> ([153], [154], [155]); // 208
drop<BoundedInt<0, 8589934596>>([154]) -> (); // 209
upcast<BoundedInt<0, 2147483646>, u32>([155]) -> ([156]); // 210
u32_overflowing_add([153], [148], [156]) { fallthrough([157], [158]) 792([159], [160]) }; // 211
branch_align() -> (); // 212
const_as_immediate<Const<u32, 2147483647>>() -> ([161]); // 213
dup<u32>([158]) -> ([158], [162]); // 214
store_temp<u32>([161]) -> ([161]); // 215
u32_overflowing_sub([157], [162], [161]) { fallthrough([163], [164]) 222([165], [166]) }; // 216
branch_align() -> (); // 217
drop<u32>([158]) -> (); // 218
store_temp<RangeCheck>([163]) -> ([167]); // 219
store_temp<u32>([164]) -> ([168]); // 220
jump() { 226() }; // 221
branch_align() -> (); // 222
drop<u32>([166]) -> (); // 223
store_temp<RangeCheck>([165]) -> ([167]); // 224
store_temp<u32>([158]) -> ([168]); // 225
dup<test::CM31>([6]) -> ([6], [169]); // 226
struct_deconstruct<test::CM31>([169]) -> ([170], [171]); // 227
dup<test::M31>([170]) -> ([170], [172]); // 228
struct_deconstruct<test::M31>([172]) -> ([173]); // 229
dup<u32>([140]) -> ([140], [174]); // 230
u32_wide_mul([174], [173]) -> ([175]); // 231
const_as_immediate<Const<NonZero<BoundedInt<2147483647, 2147483647>>, Const<BoundedInt<2147483647, 2147483647>, 2147483647>>>() -> ([176]); // 232
store_temp<u64>([175]) -> ([175]); // 233
store_temp<NonZero<BoundedInt<2147483647, 2147483647>>>([176]) -> ([176]); // 234
bounded_int_div_rem<u64, BoundedInt<2147483647, 2147483647>>([167], [175], [176]) -> ([177], [178], [179]); // 235
drop<BoundedInt<0, 8589934596>>([178]) -> (); // 236
upcast<BoundedInt<0, 2147483646>, u32>([179]) -> ([180]); // 237
dup<test::M31>([171]) -> ([171], [181]); // 238
struct_deconstruct<test::M31>([181]) -> ([182]); // 239
dup<u32>([168]) -> ([168], [183]); // 240
u32_wide_mul([183], [182]) -> ([184]); // 241
const_as_immediate<Const<NonZero<BoundedInt<2147483647, 2147483647>>, Const<BoundedInt<2147483647, 2147483647>, 2147483647>>>() -> ([185]); // 242
store_temp<u64>([184]) -> ([184]); // 243
store_temp<NonZero<BoundedInt<2147483647, 2147483647>>>([185]) -> ([185]); // 244
bounded_int_div_rem<u64, BoundedInt<2147483647, 2147483647>>([177], [184], [185]) -> ([186], [187], [188]); // 245
drop<BoundedInt<0, 8589934596>>([187]) -> (); // 246
upcast<BoundedInt<0, 2147483646>, u32>([188]) -> ([189]); // 247
const_as_immediate<Const<u32, 0>>() -> ([190]); // 248
dup<u32>([189]) -> ([189], [191]); // 249
store_temp<RangeCheck>([186]) -> ([186]); // 250
u32_eq([191], [190]) { fallthrough() 280() }; // 251
branch_align() -> (); // 252
const_as_immediate<Const<u32, 2147483647>>() -> ([192]); // 253
store_temp<u32>([192]) -> ([192]); // 254
u32_overflowing_sub([186], [192], [189]) { fallthrough([193], [194]) 260([195], [196]) }; // 255
branch_align() -> (); // 256
store_temp<RangeCheck>([193]) -> ([197]); // 257
store_temp<u32>([194]) -> ([198]); // 258
jump() { 285() }; // 259
branch_align() -> (); // 260
drop<u32>([196]) -> (); // 261
drop<test::CM31>([4]) -> (); // 262
drop<u32>([87]) -> (); // 263
drop<test::CM31>([6]) -> (); // 264
drop<test::CM31>([5]) -> (); // 265
drop<test::CM31>([3]) -> (); // 266
drop<u32>([59]) -> (); // 267
drop<test::M31>([171]) -> (); // 268
drop<test::M31>([170]) -> (); // 269
drop<u32>([168]) -> (); // 270
drop<u32>([140]) -> (); // 271
drop<u32>([180]) -> (); // 272
array_new<felt252>() -> ([199]); // 273
const_as_immediate<Const<felt252, 155785504329508738615720351733824384887>>() -> ([200]); // 274
store_temp<felt252>([200]) -> ([200]); // 275
array_append<felt252>([199], [200]) -> ([201]); // 276
store_temp<RangeCheck>([195]) -> ([202]); // 277
store_temp<Array<felt252>>([201]) -> ([203]); // 278
jump() { 784() }; // 279
branch_align() -> (); // 280
drop<u32>([189]) -> (); // 281
const_as_immediate<Const<u32, 0>>() -> ([204]); // 282
store_temp<RangeCheck>([186]) -> ([197]); // 283
store_temp<u32>([204]) -> ([198]); // 284
u32_overflowing_add([197], [180], [198]) { fallthrough([205], [206]) 766([207], [208]) }; // 285
branch_align() -> (); // 286
const_as_immediate<Const<u32, 2147483647>>() -> ([209]); // 287
dup<u32>([206]) -> ([206], [210]); // 288
store_temp<u32>([209]) -> ([209]); // 289
u32_overflowing_sub([205], [210], [209]) { fallthrough([211], [212]) 296([213], [214]) }; // 290
branch_align() -> (); // 291
drop<u32>([206]) -> (); // 292
store_temp<RangeCheck>([211]) -> ([215]); // 293
store_temp<u32>([212]) -> ([216]); // 294
jump() { 300() }; // 295
branch_align() -> (); // 296
drop<u32>([214]) -> (); // 297
store_temp<RangeCheck>([213]) -> ([215]); // 298
store_temp<u32>([206]) -> ([216]); // 299
struct_deconstruct<test::M31>([171]) -> ([217]); // 300
u32_wide_mul([140], [217]) -> ([218]); // 301
const_as_immediate<Const<NonZero<BoundedInt<2147483647, 2147483647>>, Const<BoundedInt<2147483647, 2147483647>, 2147483647>>>() -> ([219]); // 302
store_temp<u64>([218]) -> ([218]); // 303
store_temp<NonZero<BoundedInt<2147483647, 2147483647>>>([219]) -> ([219]); // 304
bounded_int_div_rem<u64, BoundedInt<2147483647, 2147483647>>([215], [218], [219]) -> ([220], [221], [222]); // 305
drop<BoundedInt<0, 8589934596>>([221]) -> (); // 306
upcast<BoundedInt<0, 2147483646>, u32>([222]) -> ([223]); // 307
struct_deconstruct<test::M31>([170]) -> ([224]); // 308
u32_wide_mul([168], [224]) -> ([225]); // 309
const_as_immediate<Const<NonZero<BoundedInt<2147483647, 2147483647>>, Const<BoundedInt<2147483647, 2147483647>, 2147483647>>>() -> ([226]); // 310
store_temp<u64>([225]) -> ([225]); // 311
store_temp<NonZero<BoundedInt<2147483647, 2147483647>>>([226]) -> ([226]); // 312
bounded_int_div_rem<u64, BoundedInt<2147483647, 2147483647>>([220], [225], [226]) -> ([227], [228], [229]); // 313
drop<BoundedInt<0, 8589934596>>([228]) -> (); // 314
upcast<BoundedInt<0, 2147483646>, u32>([229]) -> ([230]); // 315
u32_overflowing_add([227], [223], [230]) { fallthrough([231], [232]) 750([233], [234]) }; // 316
branch_align() -> (); // 317
const_as_immediate<Const<u32, 2147483647>>() -> ([235]); // 318
dup<u32>([232]) -> ([232], [236]); // 319
store_temp<u32>([235]) -> ([235]); // 320
u32_overflowing_sub([231], [236], [235]) { fallthrough([237], [238]) 327([239], [240]) }; // 321
branch_align() -> (); // 322
drop<u32>([232]) -> (); // 323
store_temp<RangeCheck>([237]) -> ([241]); // 324
store_temp<u32>([238]) -> ([242]); // 325
jump() { 331() }; // 326
branch_align() -> (); // 327
drop<u32>([240]) -> (); // 328
store_temp<RangeCheck>([239]) -> ([241]); // 329
store_temp<u32>([232]) -> ([242]); // 330
u32_overflowing_add([241], [59], [216]) { fallthrough([243], [244]) 730([245], [246]) }; // 331
branch_align() -> (); // 332
const_as_immediate<Const<u32, 2147483647>>() -> ([247]); // 333
dup<u32>([244]) -> ([244], [248]); // 334
store_temp<u32>([247]) -> ([247]); // 335
u32_overflowing_sub([243], [248], [247]) { fallthrough([249], [250]) 342([251], [252]) }; // 336
branch_align() -> (); // 337
drop<u32>([244]) -> (); // 338
store_temp<RangeCheck>([249]) -> ([253]); // 339
store_temp<u32>([250]) -> ([254]); // 340
jump() { 346() }; // 341
branch_align() -> (); // 342
drop<u32>([252]) -> (); // 343
store_temp<RangeCheck>([251]) -> ([253]); // 344
store_temp<u32>([244]) -> ([254]); // 345
u32_overflowing_add([253], [87], [242]) { fallthrough([255], [256]) 716([257], [258]) }; // 346
branch_align() -> (); // 347
const_as_immediate<Const<u32, 2147483647>>() -> ([259]); // 348
dup<u32>([256]) -> ([256], [260]); // 349
store_temp<u32>([259]) -> ([259]); // 350
u32_overflowing_sub([255], [260], [259]) { fallthrough([261], [262]) 357([263], [264]) }; // 351
branch_align() -> (); // 352
drop<u32>([256]) -> (); // 353
store_temp<RangeCheck>([261]) -> ([265]); // 354
store_temp<u32>([262]) -> ([266]); // 355
jump() { 361() }; // 356
branch_align() -> (); // 357
drop<u32>([264]) -> (); // 358
store_temp<RangeCheck>([263]) -> ([265]); // 359
store_temp<u32>([256]) -> ([266]); // 360
struct_deconstruct<test::CM31>([3]) -> ([267], [268]); // 361
struct_deconstruct<test::CM31>([6]) -> ([269], [270]); // 362
dup<test::M31>([267]) -> ([267], [271]); // 363
struct_deconstruct<test::M31>([271]) -> ([272]); // 364
dup<test::M31>([269]) -> ([269], [273]); // 365
struct_deconstruct<test::M31>([273]) -> ([274]); // 366
u32_wide_mul([272], [274]) -> ([275]); // 367
const_as_immediate<Const<NonZero<BoundedInt<2147483647, 2147483647>>, Const<BoundedInt<2147483647, 2147483647>, 2147483647>>>() -> ([276]); // 368
store_temp<u64>([275]) -> ([275]); // 369
store_temp<NonZero<BoundedInt<2147483647, 2147483647>>>([276]) -> ([276]); // 370
bounded_int_div_rem<u64, BoundedInt<2147483647, 2147483647>>([265], [275], [276]) -> ([277], [278], [279]); // 371
drop<BoundedInt<0, 8589934596>>([278]) -> (); // 372
upcast<BoundedInt<0, 2147483646>, u32>([279]) -> ([280]); // 373
dup<test::M31>([268]) -> ([268], [281]); // 374
struct_deconstruct<test::M31>([281]) -> ([282]); // 375
dup<test::M31>([270]) -> ([270], [283]); // 376
struct_deconstruct<test::M31>([283]) -> ([284]); // 377
u32_wide_mul([282], [284]) -> ([285]); // 378
const_as_immediate<Const<NonZero<BoundedInt<2147483647, 2147483647>>, Const<BoundedInt<2147483647, 2147483647>, 2147483647>>>() -> ([286]); // 379
store_temp<u64>([285]) -> ([285]); // 380
store_temp<NonZero<BoundedInt<2147483647, 2147483647>>>([286]) -> ([286]); // 381
bounded_int_div_rem<u64, BoundedInt<2147483647, 2147483647>>([277], [285], [286]) -> ([287], [288], [289]); // 382
drop<BoundedInt<0, 8589934596>>([288]) -> (); // 383
upcast<BoundedInt<0, 2147483646>, u32>([289]) -> ([290]); // 384
const_as_immediate<Const<u32, 0>>() -> ([291]); // 385
struct_construct<test::M31>([254]) -> ([292]); // 386
struct_construct<test::M31>([266]) -> ([293]); // 387
struct_construct<test::CM31>([292], [293]) -> ([294]); // 388
dup<u32>([290]) -> ([290], [295]); // 389
store_temp<RangeCheck>([287]) -> ([287]); // 390
store_temp<test::CM31>([294]) -> ([294]); // 391
u32_eq([295], [291]) { fallthrough() 418() }; // 392
branch_align() -> (); // 393
const_as_immediate<Const<u32, 2147483647>>() -> ([296]); // 394
store_temp<u32>([296]) -> ([296]); // 395
u32_overflowing_sub([287], [296], [290]) { fallthrough([297], [298]) 401([299], [300]) }; // 396
branch_align() -> (); // 397
store_temp<RangeCheck>([297]) -> ([301]); // 398
store_temp<u32>([298]) -> ([302]); // 399
jump() { 423() }; // 400
branch_align() -> (); // 401
drop<u32>([300]) -> (); // 402
drop<test::CM31>([4]) -> (); // 403
drop<test::CM31>([294]) -> (); // 404
drop<test::M31>([267]) -> (); // 405
drop<test::CM31>([5]) -> (); // 406
drop<test::M31>([268]) -> (); // 407
drop<test::M31>([269]) -> (); // 408
drop<test::M31>([270]) -> (); // 409
drop<u32>([280]) -> (); // 410
array_new<felt252>() -> ([303]); // 411
const_as_immediate<Const<felt252, 155785504329508738615720351733824384887>>() -> ([304]); // 412
store_temp<felt252>([304]) -> ([304]); // 413
array_append<felt252>([303], [304]) -> ([305]); // 414
store_temp<RangeCheck>([299]) -> ([306]); // 415
store_temp<Array<felt252>>([305]) -> ([307]); // 416
jump() { 708() }; // 417
branch_align() -> (); // 418
drop<u32>([290]) -> (); // 419
const_as_immediate<Const<u32, 0>>() -> ([308]); // 420
store_temp<RangeCheck>([287]) -> ([301]); // 421
store_temp<u32>([308]) -> ([302]); // 422
u32_overflowing_add([301], [280], [302]) { fallthrough([309], [310]) 693([311], [312]) }; // 423
branch_align() -> (); // 424
const_as_immediate<Const<u32, 2147483647>>() -> ([313]); // 425
dup<u32>([310]) -> ([310], [314]); // 426
store_temp<u32>([313]) -> ([313]); // 427
u32_overflowing_sub([309], [314], [313]) { fallthrough([315], [316]) 434([317], [318]) }; // 428
branch_align() -> (); // 429
drop<u32>([310]) -> (); // 430
store_temp<RangeCheck>([315]) -> ([319]); // 431
store_temp<u32>([316]) -> ([320]); // 432
jump() { 438() }; // 433
branch_align() -> (); // 434
drop<u32>([318]) -> (); // 435
store_temp<RangeCheck>([317]) -> ([319]); // 436
store_temp<u32>([310]) -> ([320]); // 437
struct_deconstruct<test::M31>([267]) -> ([321]); // 438
struct_deconstruct<test::M31>([270]) -> ([322]); // 439
u32_wide_mul([321], [322]) -> ([323]); // 440
const_as_immediate<Const<NonZero<BoundedInt<2147483647, 2147483647>>, Const<BoundedInt<2147483647, 2147483647>, 2147483647>>>() -> ([324]); // 441
store_temp<u64>([323]) -> ([323]); // 442
store_temp<NonZero<BoundedInt<2147483647, 2147483647>>>([324]) -> ([324]); // 443
bounded_int_div_rem<u64, BoundedInt<2147483647, 2147483647>>([319], [323], [324]) -> ([325], [326], [327]); // 444
drop<BoundedInt<0, 8589934596>>([326]) -> (); // 445
upcast<BoundedInt<0, 2147483646>, u32>([327]) -> ([328]); // 446
struct_deconstruct<test::M31>([268]) -> ([329]); // 447
struct_deconstruct<test::M31>([269]) -> ([330]); // 448
u32_wide_mul([329], [330]) -> ([331]); // 449
const_as_immediate<Const<NonZero<BoundedInt<2147483647, 2147483647>>, Const<BoundedInt<2147483647, 2147483647>, 2147483647>>>() -> ([332]); // 450
store_temp<u64>([331]) -> ([331]); // 451
store_temp<NonZero<BoundedInt<2147483647, 2147483647>>>([332]) -> ([332]); // 452
bounded_int_div_rem<u64, BoundedInt<2147483647, 2147483647>>([325], [331], [332]) -> ([333], [334], [335]); // 453
drop<BoundedInt<0, 8589934596>>([334]) -> (); // 454
upcast<BoundedInt<0, 2147483646>, u32>([335]) -> ([336]); // 455
u32_overflowing_add([333], [328], [336]) { fallthrough([337], [338]) 680([339], [340]) }; // 456
branch_align() -> (); // 457
const_as_immediate<Const<u32, 2147483647>>() -> ([341]); // 458
dup<u32>([338]) -> ([338], [342]); // 459
store_temp<u32>([341]) -> ([341]); // 460
u32_overflowing_sub([337], [342], [341]) { fallthrough([343], [344]) 467([345], [346]) }; // 461
branch_align() -> (); // 462
drop<u32>([338]) -> (); // 463
store_temp<RangeCheck>([343]) -> ([347]); // 464
store_temp<u32>([344]) -> ([348]); // 465
jump() { 471() }; // 466
branch_align() -> (); // 467
drop<u32>([346]) -> (); // 468
store_temp<RangeCheck>([345]) -> ([347]); // 469
store_temp<u32>([338]) -> ([348]); // 470
struct_deconstruct<test::CM31>([4]) -> ([349], [350]); // 471
struct_deconstruct<test::CM31>([5]) -> ([351], [352]); // 472
dup<test::M31>([349]) -> ([349], [353]); // 473
struct_deconstruct<test::M31>([353]) -> ([354]); // 474
dup<test::M31>([351]) -> ([351], [355]); // 475
struct_deconstruct<test::M31>([355]) -> ([356]); // 476
u32_wide_mul([354], [356]) -> ([357]); // 477
const_as_immediate<Const<NonZero<BoundedInt<2147483647, 2147483647>>, Const<BoundedInt<2147483647, 2147483647>, 2147483647>>>() -> ([358]); // 478
store_temp<u64>([357]) -> ([357]); // 479
store_temp<NonZero<BoundedInt<2147483647, 2147483647>>>([358]) -> ([358]); // 480
bounded_int_div_rem<u64, BoundedInt<2147483647, 2147483647>>([347], [357], [358]) -> ([359], [360], [361]); // 481
drop<BoundedInt<0, 8589934596>>([360]) -> (); // 482
upcast<BoundedInt<0, 2147483646>, u32>([361]) -> ([362]); // 483
dup<test::M31>([350]) -> ([350], [363]); // 484
struct_deconstruct<test::M31>([363]) -> ([364]); // 485
dup<test::M31>([352]) -> ([352], [365]); // 486
struct_deconstruct<test::M31>([365]) -> ([366]); // 487
u32_wide_mul([364], [366]) -> ([367]); // 488
const_as_immediate<Const<NonZero<BoundedInt<2147483647, 2147483647>>, Const<BoundedInt<2147483647, 2147483647>, 2147483647>>>() -> ([368]); // 489
store_temp<u64>([367]) -> ([367]); // 490
store_temp<NonZero<BoundedInt<2147483647, 2147483647>>>([368]) -> ([368]); // 491
bounded_int_div_rem<u64, BoundedInt<2147483647, 2147483647>>([359], [367], [368]) -> ([369], [370], [371]); // 492
drop<BoundedInt<0, 8589934596>>([370]) -> (); // 493
upcast<BoundedInt<0, 2147483646>, u32>([371]) -> ([372]); // 494
const_as_immediate<Const<u32, 0>>() -> ([373]); // 495
dup<u32>([372]) -> ([372], [374]); // 496
store_temp<RangeCheck>([369]) -> ([369]); // 497
u32_eq([374], [373]) { fallthrough() 524() }; // 498
branch_align() -> (); // 499
const_as_immediate<Const<u32, 2147483647>>() -> ([375]); // 500
store_temp<u32>([375]) -> ([375]); // 501
u32_overflowing_sub([369], [375], [372]) { fallthrough([376], [377]) 507([378], [379]) }; // 502
branch_align() -> (); // 503
store_temp<RangeCheck>([376]) -> ([380]); // 504
store_temp<u32>([377]) -> ([381]); // 505
jump() { 529() }; // 506
branch_align() -> (); // 507
drop<u32>([379]) -> (); // 508
drop<u32>([348]) -> (); // 509
drop<test::CM31>([294]) -> (); // 510
drop<u32>([320]) -> (); // 511
drop<test::M31>([349]) -> (); // 512
drop<test::M31>([350]) -> (); // 513
drop<test::M31>([351]) -> (); // 514
drop<test::M31>([352]) -> (); // 515
drop<u32>([362]) -> (); // 516
array_new<felt252>() -> ([382]); // 517
const_as_immediate<Const<felt252, 155785504329508738615720351733824384887>>() -> ([383]); // 518
store_temp<felt252>([383]) -> ([383]); // 519
array_append<felt252>([382], [383]) -> ([384]); // 520
store_temp<RangeCheck>([378]) -> ([385]); // 521
store_temp<Array<felt252>>([384]) -> ([386]); // 522
jump() { 672() }; // 523
branch_align() -> (); // 524
drop<u32>([372]) -> (); // 525
const_as_immediate<Const<u32, 0>>() -> ([387]); // 526
store_temp<RangeCheck>([369]) -> ([380]); // 527
store_temp<u32>([387]) -> ([381]); // 528
u32_overflowing_add([380], [362], [381]) { fallthrough([388], [389]) 657([390], [391]) }; // 529
branch_align() -> (); // 530
const_as_immediate<Const<u32, 2147483647>>() -> ([392]); // 531
dup<u32>([389]) -> ([389], [393]); // 532
store_temp<u32>([392]) -> ([392]); // 533
u32_overflowing_sub([388], [393], [392]) { fallthrough([394], [395]) 540([396], [397]) }; // 534
branch_align() -> (); // 535
drop<u32>([389]) -> (); // 536
store_temp<RangeCheck>([394]) -> ([398]); // 537
store_temp<u32>([395]) -> ([399]); // 538
jump() { 544() }; // 539
branch_align() -> (); // 540
drop<u32>([397]) -> (); // 541
store_temp<RangeCheck>([396]) -> ([398]); // 542
store_temp<u32>([389]) -> ([399]); // 543
struct_deconstruct<test::M31>([349]) -> ([400]); // 544
struct_deconstruct<test::M31>([352]) -> ([401]); // 545
u32_wide_mul([400], [401]) -> ([402]); // 546
const_as_immediate<Const<NonZero<BoundedInt<2147483647, 2147483647>>, Const<BoundedInt<2147483647, 2147483647>, 2147483647>>>() -> ([403]); // 547
store_temp<u64>([402]) -> ([402]); // 548
store_temp<NonZero<BoundedInt<2147483647, 2147483647>>>([403]) -> ([403]); // 549
bounded_int_div_rem<u64, BoundedInt<2147483647, 2147483647>>([398], [402], [403]) -> ([404], [405], [406]); // 550
drop<BoundedInt<0, 8589934596>>([405]) -> (); // 551
upcast<BoundedInt<0, 2147483646>, u32>([406]) -> ([407]); // 552
struct_deconstruct<test::M31>([350]) -> ([408]); // 553
struct_deconstruct<test::M31>([351]) -> ([409]); // 554
u32_wide_mul([408], [409]) -> ([410]); // 555
const_as_immediate<Const<NonZero<BoundedInt<2147483647, 2147483647>>, Const<BoundedInt<2147483647, 2147483647>, 2147483647>>>() -> ([411]); // 556
store_temp<u64>([410]) -> ([410]); // 557
store_temp<NonZero<BoundedInt<2147483647, 2147483647>>>([411]) -> ([411]); // 558
bounded_int_div_rem<u64, BoundedInt<2147483647, 2147483647>>([404], [410], [411]) -> ([412], [413], [414]); // 559
drop<BoundedInt<0, 8589934596>>([413]) -> (); // 560
upcast<BoundedInt<0, 2147483646>, u32>([414]) -> ([415]); // 561
u32_overflowing_add([412], [407], [415]) { fallthrough([416], [417]) 644([418], [419]) }; // 562
branch_align() -> (); // 563
const_as_immediate<Const<u32, 2147483647>>() -> ([420]); // 564
dup<u32>([417]) -> ([417], [421]); // 565
store_temp<u32>([420]) -> ([420]); // 566
u32_overflowing_sub([416], [421], [420]) { fallthrough([422], [423]) 573([424], [425]) }; // 567
branch_align() -> (); // 568
drop<u32>([417]) -> (); // 569
store_temp<RangeCheck>([422]) -> ([426]); // 570
store_temp<u32>([423]) -> ([427]); // 571
jump() { 577() }; // 572
branch_align() -> (); // 573
drop<u32>([425]) -> (); // 574
store_temp<RangeCheck>([424]) -> ([426]); // 575
store_temp<u32>([417]) -> ([427]); // 576
u32_overflowing_add([426], [320], [399]) { fallthrough([428], [429]) 627([430], [431]) }; // 577
branch_align() -> (); // 578
const_as_immediate<Const<u32, 2147483647>>() -> ([432]); // 579
dup<u32>([429]) -> ([429], [433]); // 580
store_temp<u32>([432]) -> ([432]); // 581
u32_overflowing_sub([428], [433], [432]) { fallthrough([434], [435]) 588([436], [437]) }; // 582
branch_align() -> (); // 583
drop<u32>([429]) -> (); // 584
store_temp<RangeCheck>([434]) -> ([438]); // 585
store_temp<u32>([435]) -> ([439]); // 586
jump() { 592() }; // 587
branch_align() -> (); // 588
drop<u32>([437]) -> (); // 589
store_temp<RangeCheck>([436]) -> ([438]); // 590
store_temp<u32>([429]) -> ([439]); // 591
u32_overflowing_add([438], [348], [427]) { fallthrough([440], [441]) 616([442], [443]) }; // 592
branch_align() -> (); // 593
const_as_immediate<Const<u32, 2147483647>>() -> ([444]); // 594
dup<u32>([441]) -> ([441], [445]); // 595
store_temp<u32>([444]) -> ([444]); // 596
u32_overflowing_sub([440], [445], [444]) { fallthrough([446], [447]) 603([448], [449]) }; // 597
branch_align() -> (); // 598
drop<u32>([441]) -> (); // 599
store_temp<RangeCheck>([446]) -> ([450]); // 600
store_temp<u32>([447]) -> ([451]); // 601
jump() { 607() }; // 602
branch_align() -> (); // 603
drop<u32>([449]) -> (); // 604
store_temp<RangeCheck>([448]) -> ([450]); // 605
store_temp<u32>([441]) -> ([451]); // 606
struct_construct<test::M31>([439]) -> ([452]); // 607
struct_construct<test::M31>([451]) -> ([453]); // 608
struct_construct<test::CM31>([452], [453]) -> ([454]); // 609
struct_construct<test::QM31>([294], [454]) -> ([455]); // 610
struct_construct<Tuple<test::QM31>>([455]) -> ([456]); // 611
enum_init<core::panics::PanicResult::<(test::QM31,)>, 0>([456]) -> ([457]); // 612
store_temp<RangeCheck>([450]) -> ([450]); // 613
store_temp<core::panics::PanicResult::<(test::QM31,)>>([457]) -> ([457]); // 614
return([450], [457]); // 615
branch_align() -> (); // 616
drop<u32>([443]) -> (); // 617
drop<u32>([439]) -> (); // 618
drop<test::CM31>([294]) -> (); // 619
array_new<felt252>() -> ([458]); // 620
const_as_immediate<Const<felt252, 155785504323917466144735657540098748279>>() -> ([459]); // 621
store_temp<felt252>([459]) -> ([459]); // 622
array_append<felt252>([458], [459]) -> ([460]); // 623
store_temp<RangeCheck>([442]) -> ([461]); // 624
store_temp<Array<felt252>>([460]) -> ([462]); // 625
jump() { 638() }; // 626
branch_align() -> (); // 627
drop<u32>([431]) -> (); // 628
drop<u32>([348]) -> (); // 629
drop<test::CM31>([294]) -> (); // 630
drop<u32>([427]) -> (); // 631
array_new<felt252>() -> ([463]); // 632
const_as_immediate<Const<felt252, 155785504323917466144735657540098748279>>() -> ([464]); // 633
store_temp<felt252>([464]) -> ([464]); // 634
array_append<felt252>([463], [464]) -> ([465]); // 635
store_temp<RangeCheck>([430]) -> ([461]); // 636
store_temp<Array<felt252>>([465]) -> ([462]); // 637
struct_construct<core::panics::Panic>() -> ([466]); // 638
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([466], [462]) -> ([467]); // 639
enum_init<core::panics::PanicResult::<(test::QM31,)>, 1>([467]) -> ([468]); // 640
store_temp<RangeCheck>([461]) -> ([461]); // 641
store_temp<core::panics::PanicResult::<(test::QM31,)>>([468]) -> ([468]); // 642
return([461], [468]); // 643
branch_align() -> (); // 644
drop<u32>([419]) -> (); // 645
drop<u32>([348]) -> (); // 646
drop<test::CM31>([294]) -> (); // 647
drop<u32>([320]) -> (); // 648
drop<u32>([399]) -> (); // 649
array_new<felt252>() -> ([469]); // 650
const_as_immediate<Const<felt252, 155785504323917466144735657540098748279>>() -> ([470]); // 651
store_temp<felt252>([470]) -> ([470]); // 652
array_append<felt252>([469], [470]) -> ([471]); // 653
store_temp<RangeCheck>([418]) -> ([472]); // 654
store_temp<Array<felt252>>([471]) -> ([473]); // 655
jump() { 674() }; // 656
branch_align() -> (); // 657
drop<u32>([391]) -> (); // 658
drop<u32>([348]) -> (); // 659
drop<test::CM31>([294]) -> (); // 660
drop<u32>([320]) -> (); // 661
drop<test::M31>([349]) -> (); // 662
drop<test::M31>([350]) -> (); // 663
drop<test::M31>([351]) -> (); // 664
drop<test::M31>([352]) -> (); // 665
array_new<felt252>() -> ([474]); // 666
const_as_immediate<Const<felt252, 155785504323917466144735657540098748279>>() -> ([475]); // 667
store_temp<felt252>([475]) -> ([475]); // 668
array_append<felt252>([474], [475]) -> ([476]); // 669
store_temp<RangeCheck>([390]) -> ([385]); // 670
store_temp<Array<felt252>>([476]) -> ([386]); // 671
rename<RangeCheck>([385]) -> ([472]); // 672
rename<Array<felt252>>([386]) -> ([473]); // 673
struct_construct<core::panics::Panic>() -> ([477]); // 674
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([477], [473]) -> ([478]); // 675
enum_init<core::panics::PanicResult::<(test::QM31,)>, 1>([478]) -> ([479]); // 676
store_temp<RangeCheck>([472]) -> ([472]); // 677
store_temp<core::panics::PanicResult::<(test::QM31,)>>([479]) -> ([479]); // 678
return([472], [479]); // 679
branch_align() -> (); // 680
drop<u32>([340]) -> (); // 681
drop<test::CM31>([4]) -> (); // 682
drop<test::CM31>([294]) -> (); // 683
drop<u32>([320]) -> (); // 684
drop<test::CM31>([5]) -> (); // 685
array_new<felt252>() -> ([480]); // 686
const_as_immediate<Const<felt252, 155785504323917466144735657540098748279>>() -> ([481]); // 687
store_temp<felt252>([481]) -> ([481]); // 688
array_append<felt252>([480], [481]) -> ([482]); // 689
store_temp<RangeCheck>([339]) -> ([483]); // 690
store_temp<Array<felt252>>([482]) -> ([484]); // 691
jump() { 710() }; // 692
branch_align() -> (); // 693
drop<u32>([312]) -> (); // 694
drop<test::CM31>([4]) -> (); // 695
drop<test::CM31>([294]) -> (); // 696
drop<test::M31>([267]) -> (); // 697
drop<test::CM31>([5]) -> (); // 698
drop<test::M31>([268]) -> (); // 699
drop<test::M31>([269]) -> (); // 700
drop<test::M31>([270]) -> (); // 701
array_new<felt252>() -> ([485]); // 702
const_as_immediate<Const<felt252, 155785504323917466144735657540098748279>>() -> ([486]); // 703
store_temp<felt252>([486]) -> ([486]); // 704
array_append<felt252>([485], [486]) -> ([487]); // 705
store_temp<RangeCheck>([311]) -> ([306]); // 706
store_temp<Array<felt252>>([487]) -> ([307]); // 707
rename<RangeCheck>([306]) -> ([483]); // 708
rename<Array<felt252>>([307]) -> ([484]); // 709
struct_construct<core::panics::Panic>() -> ([488]); // 710
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([488], [484]) -> ([489]); // 711
enum_init<core::panics::PanicResult::<(test::QM31,)>, 1>([489]) -> ([490]); // 712
store_temp<RangeCheck>([483]) -> ([483]); // 713
store_temp<core::panics::PanicResult::<(test::QM31,)>>([490]) -> ([490]); // 714
return([483], [490]); // 715
branch_align() -> (); // 716
drop<u32>([258]) -> (); // 717
drop<test::CM31>([4]) -> (); // 718
drop<u32>([254]) -> (); // 719
drop<test::CM31>([6]) -> (); // 720
drop<test::CM31>([5]) -> (); // 721
drop<test::CM31>([3]) -> (); // 722
array_new<felt252>() -> ([491]); // 723
const_as_immediate<Const<felt252, 155785504323917466144735657540098748279>>() -> ([492]); // 724
store_temp<felt252>([492]) -> ([492]); // 725
array_append<felt252>([491], [492]) -> ([493]); // 726
store_temp<RangeCheck>([257]) -> ([494]); // 727
store_temp<Array<felt252>>([493]) -> ([495]); // 728
jump() { 744() }; // 729
branch_align() -> (); // 730
drop<u32>([246]) -> (); // 731
drop<test::CM31>([4]) -> (); // 732
drop<u32>([87]) -> (); // 733
drop<test::CM31>([6]) -> (); // 734
drop<test::CM31>([5]) -> (); // 735
drop<test::CM31>([3]) -> (); // 736
drop<u32>([242]) -> (); // 737
array_new<felt252>() -> ([496]); // 738
const_as_immediate<Const<felt252, 155785504323917466144735657540098748279>>() -> ([497]); // 739
store_temp<felt252>([497]) -> ([497]); // 740
array_append<felt252>([496], [497]) -> ([498]); // 741
store_temp<RangeCheck>([245]) -> ([494]); // 742
store_temp<Array<felt252>>([498]) -> ([495]); // 743
struct_construct<core::panics::Panic>() -> ([499]); // 744
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([499], [495]) -> ([500]); // 745
enum_init<core::panics::PanicResult::<(test::QM31,)>, 1>([500]) -> ([501]); // 746
store_temp<RangeCheck>([494]) -> ([494]); // 747
store_temp<core::panics::PanicResult::<(test::QM31,)>>([501]) -> ([501]); // 748
return([494], [501]); // 749
branch_align() -> (); // 750
drop<u32>([234]) -> (); // 751
drop<test::CM31>([4]) -> (); // 752
drop<u32>([87]) -> (); // 753
drop<test::CM31>([6]) -> (); // 754
drop<test::CM31>([5]) -> (); // 755
drop<test::CM31>([3]) -> (); // 756
drop<u32>([59]) -> (); // 757
drop<u32>([216]) -> (); // 758
array_new<felt252>() -> ([502]); // 759
const_as_immediate<Const<felt252, 155785504323917466144735657540098748279>>() -> ([503]); // 760
store_temp<felt252>([503]) -> ([503]); // 761
array_append<felt252>([502], [503]) -> ([504]); // 762
store_temp<RangeCheck>([233]) -> ([505]); // 763
store_temp<Array<felt252>>([504]) -> ([506]); // 764
jump() { 786() }; // 765
branch_align() -> (); // 766
drop<u32>([208]) -> (); // 767
drop<test::CM31>([4]) -> (); // 768
drop<u32>([87]) -> (); // 769
drop<test::CM31>([6]) -> (); // 770
drop<test::CM31>([5]) -> (); // 771
drop<test::CM31>([3]) -> (); // 772
drop<u32>([59]) -> (); // 773
drop<test::M31>([171]) -> (); // 774
drop<test::M31>([170]) -> (); // 775
drop<u32>([168]) -> (); // 776
drop<u32>([140]) -> (); // 777
array_new<felt252>() -> ([507]); // 778
const_as_immediate<Const<felt252, 155785504323917466144735657540098748279>>() -> ([508]); // 779
store_temp<felt252>([508]) -> ([508]); // 780
array_append<felt252>([507], [508]) -> ([509]); // 781
store_temp<RangeCheck>([207]) -> ([202]); // 782
store_temp<Array<felt252>>([509]) -> ([203]); // 783
rename<RangeCheck>([202]) -> ([505]); // 784
rename<Array<felt252>>([203]) -> ([506]); // 785
struct_construct<core::panics::Panic>() -> ([510]); // 786
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([510], [506]) -> ([511]); // 787
enum_init<core::panics::PanicResult::<(test::QM31,)>, 1>([511]) -> ([512]); // 788
store_temp<RangeCheck>([505]) -> ([505]); // 789
store_temp<core::panics::PanicResult::<(test::QM31,)>>([512]) -> ([512]); // 790
return([505], [512]); // 791
branch_align() -> (); // 792
drop<u32>([160]) -> (); // 793
drop<test::CM31>([4]) -> (); // 794
drop<u32>([87]) -> (); // 795
drop<test::CM31>([6]) -> (); // 796
drop<test::CM31>([5]) -> (); // 797
drop<test::CM31>([3]) -> (); // 798
drop<u32>([59]) -> (); // 799
drop<u32>([140]) -> (); // 800
array_new<felt252>() -> ([513]); // 801
const_as_immediate<Const<felt252, 155785504323917466144735657540098748279>>() -> ([514]); // 802
store_temp<felt252>([514]) -> ([514]); // 803
array_append<felt252>([513], [514]) -> ([515]); // 804
store_temp<RangeCheck>([159]) -> ([516]); // 805
store_temp<Array<felt252>>([515]) -> ([517]); // 806
jump() { 828() }; // 807
branch_align() -> (); // 808
drop<u32>([132]) -> (); // 809
drop<test::CM31>([4]) -> (); // 810
drop<u32>([87]) -> (); // 811
drop<test::CM31>([6]) -> (); // 812
drop<test::CM31>([5]) -> (); // 813
drop<test::CM31>([3]) -> (); // 814
drop<u32>([59]) -> (); // 815
drop<test::M31>([89]) -> (); // 816
drop<test::M31>([90]) -> (); // 817
drop<test::M31>([92]) -> (); // 818
drop<test::M31>([93]) -> (); // 819
array_new<felt252>() -> ([518]); // 820
const_as_immediate<Const<felt252, 155785504323917466144735657540098748279>>() -> ([519]); // 821
store_temp<felt252>([519]) -> ([519]); // 822
array_append<felt252>([518], [519]) -> ([520]); // 823
store_temp<RangeCheck>([131]) -> ([126]); // 824
store_temp<Array<felt252>>([520]) -> ([127]); // 825
rename<RangeCheck>([126]) -> ([516]); // 826
rename<Array<felt252>>([127]) -> ([517]); // 827
struct_construct<core::panics::Panic>() -> ([521]); // 828
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([521], [517]) -> ([522]); // 829
enum_init<core::panics::PanicResult::<(test::QM31,)>, 1>([522]) -> ([523]); // 830
store_temp<RangeCheck>([516]) -> ([516]); // 831
store_temp<core::panics::PanicResult::<(test::QM31,)>>([523]) -> ([523]); // 832
return([516], [523]); // 833
branch_align() -> (); // 834
drop<u32>([79]) -> (); // 835
drop<test::CM31>([4]) -> (); // 836
drop<u32>([59]) -> (); // 837
drop<test::CM31>([6]) -> (); // 838
drop<test::CM31>([5]) -> (); // 839
drop<test::CM31>([3]) -> (); // 840
array_new<felt252>() -> ([524]); // 841
const_as_immediate<Const<felt252, 155785504323917466144735657540098748279>>() -> ([525]); // 842
store_temp<felt252>([525]) -> ([525]); // 843
array_append<felt252>([524], [525]) -> ([526]); // 844
store_temp<RangeCheck>([78]) -> ([527]); // 845
store_temp<Array<felt252>>([526]) -> ([528]); // 846
jump() { 866() }; // 847
branch_align() -> (); // 848
drop<u32>([51]) -> (); // 849
drop<test::CM31>([4]) -> (); // 850
drop<test::M31>([8]) -> (); // 851
drop<test::CM31>([6]) -> (); // 852
drop<test::CM31>([5]) -> (); // 853
drop<test::CM31>([3]) -> (); // 854
drop<test::M31>([9]) -> (); // 855
drop<test::M31>([11]) -> (); // 856
drop<test::M31>([12]) -> (); // 857
array_new<felt252>() -> ([529]); // 858
const_as_immediate<Const<felt252, 155785504323917466144735657540098748279>>() -> ([530]); // 859
store_temp<felt252>([530]) -> ([530]); // 860
array_append<felt252>([529], [530]) -> ([531]); // 861
store_temp<RangeCheck>([50]) -> ([45]); // 862
store_temp<Array<felt252>>([531]) -> ([46]); // 863
rename<RangeCheck>([45]) -> ([527]); // 864
rename<Array<felt252>>([46]) -> ([528]); // 865
struct_construct<core::panics::Panic>() -> ([532]); // 866
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([532], [528]) -> ([533]); // 867
enum_init<core::panics::PanicResult::<(test::QM31,)>, 1>([533]) -> ([534]); // 868
store_temp<RangeCheck>([527]) -> ([527]); // 869
store_temp<core::panics::PanicResult::<(test::QM31,)>>([534]) -> ([534]); // 870
return([527], [534]); // 871

test::foo@0([0]: RangeCheck, [1]: test::QM31, [2]: test::QM31) -> (RangeCheck, core::panics::PanicResult::<(test::QM31,)>);
