//! > Test fib raw executable.

//! > test_runner_name
CompileExecutableTestRunner(expect_diagnostics: false)

//! > cairo_code
#[executable_raw]
fn main(mut _input: Span<felt252>, ref output: Array<felt252>) {
    let values = array![0x110, 0x120, 0x130, 0x140, 0x150, 0x160].span();
    let params = Params { state: [0x1, 0x1], memory: [0x1, 0x1], random_coeff: 0x1 };
    let mut sum = 0;
    ret_eval_at_point(ref sum, values, params);
    output.append(sum);
}

fn is_bit(x: felt252) -> felt252 {
    x * x - x
}

#[derive(Drop)]
struct Params {
    state: [felt252; 2],
    memory: [felt252; 2],
    random_coeff: felt252,
}

fn combine(lookup_elements: [felt252; 2], mut values: Span<felt252>) -> felt252 {
    let [z, alpha] = lookup_elements;
    let mut res = z;
    let mut alpha_pow = 1;
    while let Some(v) = values.pop_front() {
        res = res - (alpha_pow * *v);
        alpha_pow = alpha_pow * alpha
    }
    res
}

fn ret_eval_at_point(ref sum: felt252, mut values: Span<felt252>, params: Params) {
    const RET_INST: felt252 = 0x1234;
    // Trace values
    let mult = *values.pop_front().unwrap();
    let pc = *values.pop_front().unwrap();
    let ap = *values.pop_front().unwrap();
    let fp = *values.pop_front().unwrap();
    let fp_minus_1_val = *values.pop_front().unwrap();
    let fp_minus_2_val = *values.pop_front().unwrap();

    // Constraint 0 - mult is bit.
    sum = sum * params.random_coeff + is_bit(mult);

    let rel0 = combine(params.state, array![pc, fp, ap].span());
    let rel1 = combine(params.memory, array![pc, RET_INST].span());
    let x = felt252_div(rel0 + mult * rel1, (rel0 * rel1).try_into().unwrap());
    sum = sum * params.random_coeff + x;

    let rel2 = combine(params.memory, array![fp - 1, fp_minus_1_val].span());
    let rel3 = combine(params.memory, array![fp - 2, fp_minus_2_val].span());
    let x = felt252_div(rel2 + rel3, (rel2 * rel3).try_into().unwrap());
    sum = sum * params.random_coeff + x;

    // Yield last state.
    let rel5 = combine(params.state, array![fp_minus_1_val, ap, fp_minus_2_val].span());
    let x = felt252_div(mult, rel5.try_into().unwrap());
    sum = sum * params.random_coeff - x;
}

//! > expected_diagnostics

//! > result
["0x20", "0x2", "0x7ffffffc", "0x0"],
["0x20", "0x2", "0x7ffffffc", "0x0"],
["0xa", "0x2", "0x0", "0x0"],
["0x5a", "0x5", "0x0", "0x0"],
["0x26", "0x0", "0x0", "0x0"],
["0x1d", "0x7ffffffe", "0x7ffffffb", "0x0"],
["0x1e", "0x0", "0x7ffffffd", "0x0"],
["0xab", "0x0", "0x0", "0x0"],
["0xa", "0x1", "0x0", "0x0"],
["0x26", "0x0", "0x110", "0x0"],
["0x21", "0x7ffffffe", "0x7ffffffd", "0x0"],
["0x26", "0x0", "0x120", "0x0"],
["0x21", "0x7ffffffe", "0x7ffffffc", "0x1"],
["0x26", "0x0", "0x130", "0x0"],
["0x21", "0x7ffffffe", "0x7ffffffb", "0x2"],
["0x26", "0x0", "0x140", "0x0"],
["0x21", "0x7ffffffe", "0x7ffffffa", "0x3"],
["0x26", "0x0", "0x150", "0x0"],
["0x21", "0x7ffffffe", "0x7ffffff9", "0x4"],
["0x26", "0x0", "0x160", "0x0"],
["0x21", "0x7ffffffe", "0x7ffffff8", "0x5"],
["0x26", "0x0", "0x0", "0x0"],
["0x1e", "0x0", "0x7ffffff7", "0x0"],
["0x1a", "0x0", "0x6", "0x7ffffff6"],
["0x26", "0x0", "0x1", "0x0"],
["0x26", "0x0", "0x1", "0x0"],
["0x26", "0x0", "0x1", "0x0"],
["0x26", "0x0", "0x1", "0x0"],
["0x26", "0x0", "0x1", "0x0"],
["0x5a", "0xb", "0x0", "0x0"],
["0xa7", "0x6", "0x7ffffffc", "0x0"],
["0x23", "0x7ffffffe", "0x7ffffffc", "0x0"],
["0x26", "0x0", "0x0", "0x0"],
["0x20", "0x0", "0x7ffffffb", "0x0"],
["0x1c", "0x0", "0x1", "0x7ffffffc"],
["0xab", "0x0", "0x0", "0x0"],
["0x26", "0x0", "0x1", "0x0"],
["0x1e", "0x0", "0x7ffffffc", "0x0"],
["0x1e", "0x0", "0x7ffffffc", "0x0"],
["0xab", "0x0", "0x0", "0x0"],
["0xa", "0xc", "0x0", "0x0"],
["0x38", "0x7ffffff7", "0x7ffffff6", "0x0"],
["0xa7", "0x2", "0x7ffffffe", "0x0"],
["0x91", "0xa6", "0x0", "0x0"],
["0x1c", "0x0", "0x1", "0x7ffffff6"],
["0x20", "0x0", "0x7ffffff7", "0x0"],
["0x45", "0x0", "0x7ffffff6", "0x0"],
["0x12", "0x7ffffffe", "0x7ffffffd", "0x0"],
["0xa7", "0x2", "0x7ffffffe", "0x0"],
["0x91", "0x99", "0x0", "0x0"],
["0x1a", "0x0", "0x1", "0x7ffffffc"],
["0x1e", "0x0", "0x7ffffffc", "0x0"],
["0x43", "0xb", "0x7ffffffa", "0x0"],
["0x12", "0x7ffffffe", "0x7ffffffd", "0x0"],
["0xa7", "0x2", "0x7ffffffe", "0x0"],
["0x91", "0x8c", "0x0", "0x0"],
["0x1a", "0x0", "0x1", "0x7ffffffc"],
["0x1e", "0x0", "0x7ffffffc", "0x0"],
["0x43", "0x8", "0x7ffffffa", "0x0"],
["0x12", "0x7ffffffe", "0x7ffffffd", "0x0"],
["0xa7", "0x2", "0x7ffffffe", "0x0"],
["0x91", "0x7f", "0x0", "0x0"],
["0x1a", "0x0", "0x1", "0x7ffffffc"],
["0x1e", "0x0", "0x7ffffffc", "0x0"],
["0x43", "0xa", "0x7ffffffa", "0x0"],
["0x12", "0x7ffffffe", "0x7ffffffd", "0x0"],
["0xa7", "0x2", "0x7ffffffe", "0x0"],
["0x91", "0x72", "0x0", "0x0"],
["0x1a", "0x0", "0x1", "0x7ffffffc"],
["0x1e", "0x0", "0x7ffffffc", "0x0"],
["0x43", "0x7", "0x7ffffffa", "0x0"],
["0x12", "0x7ffffffe", "0x7ffffffd", "0x0"],
["0xa7", "0x2", "0x7ffffffe", "0x0"],
["0x91", "0x65", "0x0", "0x0"],
["0xa", "0x1", "0x0", "0x0"],
["0x43", "0xb", "0x7ffffffe", "0x0"],
["0x43", "0xa", "0x7ffffffe", "0x1"],
["0x43", "0x8", "0x7ffffffe", "0x2"],
["0x1e", "0x0", "0x7ffffffe", "0x0"],
["0x1a", "0x0", "0x3", "0x7ffffffd"],
["0x20", "0x0", "0x7ffffff8", "0x0"],
["0x26", "0x0", "0x1", "0x0"],
["0x20", "0x0", "0x7ffffff9", "0x0"],
["0x43", "0x9", "0x7ffffff6", "0x0"],
["0x5a", "0x84", "0x0", "0x0"],
["0xa", "0x1", "0x0", "0x0"],
["0x43", "0xb", "0x7ffffffe", "0x0"],
["0x26", "0x0", "0x1234", "0x0"],
["0x21", "0x7ffffffe", "0x7ffffffd", "0x1"],
["0x1e", "0x0", "0x7ffffffd", "0x0"],
["0x1a", "0x0", "0x2", "0x7ffffffc"],
["0x20", "0x0", "0x7ffffffa", "0x0"],
["0x26", "0x0", "0x1", "0x0"],
["0x20", "0x0", "0x7ffffffb", "0x0"],
["0x3f", "0x6", "0x7ffffff6", "0x0"],
["0x5a", "0x79", "0x0", "0x0"],
["0x3f", "0x4", "0x7ffffffd", "0x0"],
["0x4f", "0x5", "0x4", "0x6"],
["0xa9", "0x8", "0x5", "0x0"],
["0xa", "0x1", "0x0", "0x0"],
["0x26", "0x0", "0x757270", "0x0"],
["0x21", "0x7ffffffe", "0x7ffffffd", "0x0"],
["0x26", "0x0", "0x1", "0x0"],
["0x1e", "0x0", "0x7ffffffc", "0x0"],
["0x1a", "0x0", "0x1", "0x7ffffffb"],
["0xab", "0x0", "0x0", "0x0"],
["0xa", "0x1", "0x0", "0x0"],
["0x3c", "0xa", "0x1", "0x0"],
["0x21", "0x7ffffffe", "0x7ffffffd", "0x0"],
["0x43", "0x7", "0x7ffffffd", "0x1"],
["0x1e", "0x0", "0x7ffffffd", "0x0"],
["0x1a", "0x0", "0x2", "0x7ffffffc"],
["0x20", "0x0", "0x7ffffffa", "0x0"],
["0x26", "0x0", "0x1", "0x0"],
["0x20", "0x0", "0x7ffffffb", "0x0"],
["0x5a", "0x65", "0x0", "0x0"],
["0xa", "0x1", "0x0", "0x0"],
["0x3c", "0xa", "0x2", "0x0"],
["0x21", "0x7ffffffe", "0x7ffffffd", "0x0"],
["0x43", "0x9", "0x7ffffffd", "0x1"],
["0x1e", "0x0", "0x7ffffffd", "0x0"],
["0x1a", "0x0", "0x2", "0x7ffffffc"],
["0x20", "0x0", "0x7ffffffa", "0x0"],
["0x26", "0x0", "0x1", "0x0"],
["0x20", "0x0", "0x7ffffffb", "0x0"],
["0x3f", "0x1", "0x7ffffff6", "0x0"],
["0x5a", "0x5a", "0x0", "0x0"],
["0x3f", "0x3", "0x7ffffffd", "0x0"],
["0x4f", "0x2", "0x3", "0x1"],
["0xa9", "0x8", "0x2", "0x0"],
["0xa", "0x1", "0x0", "0x0"],
["0x26", "0x0", "0x757270", "0x0"],
["0x21", "0x7ffffffe", "0x7ffffffd", "0x0"],
["0x26", "0x0", "0x1", "0x0"],
["0x1e", "0x0", "0x7ffffffc", "0x0"],
["0x1a", "0x0", "0x1", "0x7ffffffb"],
["0xab", "0x0", "0x0", "0x0"],
["0xa", "0x1", "0x0", "0x0"],
["0x43", "0x7", "0x7ffffffe", "0x0"],
["0x43", "0x8", "0x7ffffffe", "0x1"],
["0x43", "0x9", "0x7ffffffe", "0x2"],
["0x1e", "0x0", "0x7ffffffe", "0x0"],
["0x1a", "0x0", "0x3", "0x7ffffffd"],
["0x20", "0x0", "0x7ffffff8", "0x0"],
["0x26", "0x0", "0x1", "0x0"],
["0x20", "0x0", "0x7ffffff9", "0x0"],
["0x5a", "0x46", "0x0", "0x0"],
["0xa7", "0x8", "0x7ffffffd", "0x0"],
["0xa", "0x1", "0x0", "0x0"],
["0x26", "0x0", "0x757270", "0x0"],
["0x21", "0x7ffffffe", "0x7ffffffd", "0x0"],
["0x26", "0x0", "0x1", "0x0"],
["0x1e", "0x0", "0x7ffffffc", "0x0"],
["0x1a", "0x0", "0x1", "0x7ffffffb"],
["0xab", "0x0", "0x0", "0x0"],
["0x2e", "0x0", "0x0", "0x0"],
["0x2e", "0x0", "0x7ffffffc", "0x7ffffff5"],
["0x16", "0x7ffffffd", "0x0", "0x0"],
["0x2e", "0x0", "0x4", "0x0"],
["0x14", "0x0", "0x7ffffffe", "0x6"],
["0x2c", "0x7ffffffe", "0x5", "0x0"],
["0x12", "0x0", "0x7ffffffb", "0x7ffffffa"],
["0x2c", "0x0", "0x7ffffffc", "0x7ffffffe"],
["0x18", "0x0", "0x3", "0x1"],
["0x2c", "0x7ffffffe", "0x2", "0x0"],
["0x12", "0x0", "0x7ffffffa", "0x7ffffffc"],
["0x2c", "0x0", "0x7ffffffc", "0x7ffffffe"],
["0x4a", "0x0", "0x7ffffff1", "0x0"],
["0x12", "0x0", "0x7ffffffb", "0x7ffffffd"],
["0x2c", "0x0", "0x7ffffffc", "0x7ffffffe"],
["0x26", "0x0", "0x0", "0x0"],
["0x26", "0x0", "0x0", "0x0"],
["0x12", "0x7ffffffc", "0x7ffffffa", "0x0"],
["0xab", "0x0", "0x0", "0x0"],
["0xa", "0x1", "0x0", "0x0"],
["0x26", "0x0", "0x757270", "0x0"],
["0x21", "0x7ffffffe", "0x7ffffffd", "0x0"],
["0x26", "0x0", "0x1", "0x0"],
["0x1e", "0x0", "0x7ffffffc", "0x0"],
["0x1a", "0x0", "0x1", "0x7ffffffb"],
["0xab", "0x0", "0x0", "0x0"],
["0xa", "0x1", "0x0", "0x0"],
["0x26", "0x0", "0x757270", "0x0"],
["0x21", "0x7ffffffe", "0x7ffffffd", "0x0"],
["0x26", "0x0", "0x1", "0x0"],
["0x1e", "0x0", "0x7ffffffc", "0x0"],
["0x1a", "0x0", "0x1", "0x7ffffffb"],
["0xab", "0x0", "0x0", "0x0"],
["0xa", "0x1", "0x0", "0x0"],
["0x26", "0x0", "0x757270", "0x0"],
["0x21", "0x7ffffffe", "0x7ffffffd", "0x0"],
["0x26", "0x0", "0x1", "0x0"],
["0x1e", "0x0", "0x7ffffffc", "0x0"],
["0x1a", "0x0", "0x1", "0x7ffffffb"],
["0xab", "0x0", "0x0", "0x0"],
["0xa", "0x1", "0x0", "0x0"],
["0x26", "0x0", "0x757270", "0x0"],
["0x21", "0x7ffffffe", "0x7ffffffd", "0x0"],
["0x26", "0x0", "0x1", "0x0"],
["0x1e", "0x0", "0x7ffffffc", "0x0"],
["0x1a", "0x0", "0x1", "0x7ffffffb"],
["0xab", "0x0", "0x0", "0x0"],
["0xa", "0x1", "0x0", "0x0"],
["0x26", "0x0", "0x757270", "0x0"],
["0x21", "0x7ffffffe", "0x7ffffffd", "0x0"],
["0x26", "0x0", "0x1", "0x0"],
["0x1e", "0x0", "0x7ffffffc", "0x0"],
["0x1a", "0x0", "0x1", "0x7ffffffb"],
["0xab", "0x0", "0x0", "0x0"],
["0xa", "0x1", "0x0", "0x0"],
["0x26", "0x0", "0x757270", "0x0"],
["0x21", "0x7ffffffe", "0x7ffffffd", "0x0"],
["0x26", "0x0", "0x1", "0x0"],
["0x1e", "0x0", "0x7ffffffc", "0x0"],
["0x1a", "0x0", "0x1", "0x7ffffffb"],
["0xab", "0x0", "0x0", "0x0"],
["0x38", "0x7ffffff9", "0x7ffffff8", "0x0"],
["0xa7", "0x2", "0x7ffffffe", "0x0"],
["0x91", "0x6", "0x0", "0x0"],
["0x1c", "0x0", "0x1", "0x7ffffff8"],
["0x20", "0x0", "0x7ffffff9", "0x0"],
["0x26", "0x0", "0x0", "0x0"],
["0x20", "0x0", "0x7ffffff8", "0x0"],
["0x91", "0x5", "0x0", "0x0"],
["0x20", "0x0", "0x7ffffff8", "0x0"],
["0x20", "0x0", "0x7ffffff9", "0x0"],
["0x26", "0x0", "0x1", "0x0"],
["0x26", "0x0", "0x0", "0x0"],
["0xa7", "0xa", "0x7ffffffd", "0x0"],
["0x22", "0x0", "0x7ffffffe", "0x0"],
["0x2a", "0x0", "0x7ffffffe", "0x7ffffffb"],
["0x1e", "0x0", "0x7ffffff9", "0x0"],
["0x1e", "0x0", "0x7ffffff9", "0x0"],
["0x34", "0x7ffffffa", "0x7ffffffc", "0x0"],
["0x2e", "0x0", "0x7ffffffc", "0x7ffffffb"],
["0x20", "0x0", "0x7ffffffc", "0x0"],
["0x5a", "0x7fffffeb", "0x0", "0x0"],
["0xab", "0x0", "0x0", "0x0"],
["0x1e", "0x0", "0x7ffffffb", "0x0"],
["0x1e", "0x0", "0x7ffffffb", "0x0"],
["0x20", "0x0", "0x7ffffffa", "0x0"],
["0x20", "0x0", "0x7ffffffb", "0x0"],
["0xab", "0x0", "0x0", "0x0"],
["0xab", "0x0", "0x0", "0x0"],
